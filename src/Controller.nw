\chapter{Class: Controller}
\label{controller}

<<Controller.java>>=
<<Controller.java preamble>>
public class Controller {
  <<[[Controller]] member variables>>
  <<[[Controller]] constructor>>
  <<[[Controller]] methods>>
}
@

The simulation controller is intended to be the sole interface for an
evaluation program to control Jargo's simulation environment. The controller
advances the simulation world time, ``pushes'' server locations and new
requests to the client, perturbs server routes stored in the data layer in
order to mimic traffic and other stochastic vehicle processes, and can be used
to report evaluation metrics to the program.  A listing of the methods is shown
in Figure~\ref{controller:fig:methods}.

\begin{figure}
\adjustbox{scale=.8}{
\begin{minipage}[t]{0.6\textwidth}
\hi{Read Methods}
<<[[Controller]] methods>>=
public <<Read: query(2)>>
public <<Read: queryAllVertices(0)>>
public <<Read: queryAllEdges(0)>>
public <<Read: queryVertex(1)>>
public <<Read: queryEdge(2)>>
public <<Read: queryUser(1)>>
public <<Read: queryQueuedRequests(1)>>
public <<Read: queryServerRoute(1)>>
public <<Read: queryServerSchedule(1)>>
public <<Read: queryCountVertices(0)>>
public <<Read: queryCountEdges(0)>>
public <<Read: queryStatisticsEdges(0)>>
public <<Read: queryMBR(0)>>
public <<Read: queryCountServers(0)>>
public <<Read: queryCountRequests(0)>>
public <<Read: queryServiceRate(0)>>
public <<Read: queryBaseDistanceTotal(0)>>
public <<Read: queryServerBaseDistanceTotal(0)>>
public <<Read: queryRequestBaseDistanceTotal(0)>>
public <<Read: queryRequestBaseDistanceUnassigned(0)>>
public <<Read: queryServerTravelDistanceTotal(0)>>
public <<Read: queryServerCruisingDistanceTotal(0)>>
public <<Read: queryServerServiceDistanceTotal(0)>>
public <<Read: queryRequestDetourDistanceTotal(0)>>
public <<Read: queryRequestTransitDistanceTotal(0)>>
public <<Read: queryServerTravelDurationTotal(0)>>
public <<Read: queryRequestPickupDurationTotal(0)>>
public <<Read: queryRequestTransitDurationTotal(0)>>
public <<Read: queryRequestTravelDurationTotal(0)>>
public <<Read: queryRequestDepartureTime(1)>>
public <<Read: queryServerDepartureTime(1)>>
public <<Read: queryRequestArrivalTime(1)>>
@
\end{minipage}
\begin{minipage}[t]{0.6\textwidth}
\hi{Write Methods}
<<[[Controller]] methods>>=
public <<Write: addNewServer(2)>>
public <<Write: addNewRequest(1)>>
public <<loadRoadNetworkFromFile(1)>>
public <<loadProblem(1)>>
@
\hi{Utilities}
<<[[Controller]] methods>>=
public <<Admin: createNewInstance(0)>>
public <<Admin: closeInstance(0)>>
public <<Admin: loadDataModel(0)>>
public <<Admin: loadBackup(1)>>
public <<Admin: loadRoadNetworkFromDB(0)>>
public <<Admin: loadUsersFromDB(0)>>
public <<Admin: saveBackup(1)>>
public <<Gtree: loadGtree(1)>>
public <<getSimulationWorldTime(0)>>
public <<setEngineUpdatePeriod(1)>>
public <<setFinalWorldTime(1)>>
public <<setInitialWorldTime(1)>>
public <<startRealtime(1)>>
public <<startSequential(1)>>
public <<registerClient(1)>>
public <<returnRequest(1)>>
@
\end{minipage}
}
\caption{Controller methods.}
\label{controller:fig:methods}
\end{figure}

\section{Preamble}
<<Controller.java preamble>>=
package com.github.jargors;
@
We import:
\begin{itemize}
\item all parts of the Jargo stack;
<<Controller.java preamble>>=
import com.github.jargors.Storage;
import com.github.jargors.Communicator;
import com.github.jargors.Client;
import com.github.jargors.Tools;
import com.github.jargors.exceptions.ClientException;
import com.github.jargors.exceptions.ClientFatalException;
import com.github.jargors.exceptions.DuplicateVertexException;
import com.github.jargors.exceptions.DuplicateEdgeException;
import com.github.jargors.exceptions.DuplicateUserException;
import com.github.jargors.exceptions.EdgeNotFoundException;
import com.github.jargors.exceptions.UserNotFoundException;
import com.github.jargors.exceptions.VertexNotFoundException;
import com.github.jargors.exceptions.GtreeNotLoadedException;
import com.github.jargors.exceptions.GtreeIllegalSourceException;
import com.github.jargors.exceptions.GtreeIllegalTargetException;
@ \item standard utilities for concurrent execution;
<<Controller.java preamble>>=
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
@ \item standard classes for file operations;
<<Controller.java preamble>>=
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
@ \item standard map classes for caching various items.
<<Controller.java preamble>>=
import java.util.Map;
import java.util.HashMap;
@
<<Controller.java preamble>>=
import java.sql.SQLException;
@
\end{itemize}

\section{Member Variables}
Member variables are grouped into \emph{containers}, \emph{settings}, and
\emph{loops}.
<<[[Controller]] member variables>>=
<<Container objects>>
<<Settings objects>>
<<Loop objects>>
@
\hi{Containers.}
<<Container objects>>=
private Storage storage;
private Communicator communicator;
private Tools tools = new Tools();
private Client client;
private Map<Integer, Boolean> lu_seen = new HashMap<>();
@

\hi{Settings.} Settings objects configure various aspects of the simulation.
Some settings can be configured using the public setters, others can
be configured through system properties, and others are non-configurable.
<<Settings objects>>=
private int initial_world_time = 0;
private int final_world_time = 86400;
@
The simulation world time is stored in [[world_time]] and is upated by the
clock loop. The time advances in increments of 1 from [[initial_world_time]]
to [[final_world_time]].
<<Settings objects>>=
private int world_time = 0;
@
The [[loop_delay]] configures how many seconds to wait until the controller
loops start. The update periods configure how often particular loops should
execute, in seconds.
<<Settings objects>>=
private int loop_delay = 0;
private int engine_update_period = 10;
// private int deviation_rate = 0.02;
// private int breakdown_rate = 0.005;
@
The [[CSHIFT]] setting configures the precision for longitude and latitude
coordiates (see [[Storage.DBAddNewVertex]](3))\footnote{Beware, if [[CSHIFT]]
is changed here, it should also be changed in Tools.}.
<<Settings objects>>=
private final double CSHIFT = 10000000.0;
@
The [[DEBUG]] setting controls whether certain messages are print to screen.
Pass [[-Djargors.controller.debug=true]] to the [[java]] command to set
[[DEBUG]] to [[true]].
<<Settings objects>>=
private final boolean DEBUG = "true".equals(System.getProperty("jargors.controller.debug"));
@

\hi{Loops.} Jargo's simulation environment comprises four ``loops'', defined
here, running in parallel. They are executed using Java's
[[ScheduledExecutorService]] to control timing.
<<Loop objects>>=
<<Definition of clock loop>>
<<Definition of engine loop>>
<<Definition of request collection loop>>
<<Definition of request handling loop>>
<<Definition of server collection loop>>
@

\subsection{Clock Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[ClockLoop]]} is a [[Runnable]] that does two things.
First it advances the simulation world time, and then it tells [[communicator]]
about the new time.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} increments [[world_time]] by 1, may modify
[[communicator]] by changing [[Communicator.world_time]], may print to
standard error if [[DEBUG]] is [[true]].\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of clock loop>>=
private Runnable ClockLoop = () -> {
  ++(this.world_time);
  if (DEBUG) {
    System.err.printf("[t=%d] Controller.ClockLoop says: %s!",
        this.world_time, (this.world_time % 2 == 0 ? "ping" : "pong"));
  }
};
@

\subsection{Engine Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[EngineLoop]]} is a [[Runnable]] that simulates
stochastic effects on the ridesharing vehicles.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may insert, delete, or update rows in Tables W, CW,
PD, CPD, and CQ in the database instance underlying [[storage]].\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of engine loop>>=
private Runnable EngineLoop = () -> {
  // Idea: what if we apply traffic effects at the time a server route is
  // submitted? we can do it because we know what the future traffic will
  // be and we also know where the future location will be of the server.
  // then, is this loop necessary?
};
@

\subsection{Request Collection Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[RequestCollectionLoop]]} is a [[Runnable]] that
collects requests eligible for assignment at the current world time.  A request
$r$ is ``eligible'' if it is not assigned at the current world time, and if the
world time is between the request's early time $r_\texttt{e}$ and
$(r_\texttt{e}+\texttt{REQUEST\_TIMEOUT})$ (see
[[Storage.DBQueryQueuedRequests]](1)). If the eligible requests cannot be
collected, we consider this failure to be fatal and exit immediately. A possible
reason may be database failure in [[storage]]. \\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may modify [[client]] by adding objects into
[[Client.queue]], may put new entries or modify existing entries in
[[lu_seen]], may print to standard error if [[DEBUG]] is [[true]], or exits the JVM if
failure occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of request collection loop>>=
private Runnable RequestCollectionLoop = () -> {
  long A0 = 0;
  if (DEBUG) {
    A0 = System.currentTimeMillis();
  }
  try {
    int[] output = this.storage.DBQueryQueuedRequests(this.world_time);
    for (int i = 0; i < (output.length - 6); i += 7) {
      if (!this.lu_seen.containsKey(output[i]) || this.lu_seen.get(output[i]) == false) {
        this.client.collectRequest(new int[] {
          output[(i + 0)],
          output[(i + 1)],
          output[(i + 2)],
          output[(i + 3)],
          output[(i + 4)],
          output[(i + 5)],
          output[(i + 6)] });
        this.lu_seen.put(output[i], true);
      }
    }
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    System.err.println(e.toString());
    e.printStackTrace();
    System.exit(1);
  }
  if (DEBUG) {
    System.err.printf("Controller.RequestCollectionLoop completed in %d ms\n",
        (System.currentTimeMillis() - A0));
  }
};
@

\subsection{Request Handling Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[RequestHandlingLoop]]} is a [[Runnable]] that
notifies the client algorithm to check for and process new requests.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may indirectly modify the database underlying
[[storage]] depending on the body of [[Client.notifyNew]](0). May print to
standard error if a [[ClientException]] occurs or [[ClientFatalException]]
occurs or [[DEBUG]] is [[true]], or exits the JVM if [[ClientFatalException]]
occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of request handling loop>>=
private Runnable RequestHandlingLoop = () -> {
  long A0 = 0;
  if (DEBUG) {
    A0 = System.currentTimeMillis();
  }
  try {
    this.client.notifyNew();
  } catch (ClientException e) {
    System.err.printf("[t=%d] Controller.RequestHandlingLoop caught a non-fatal Client exception: %s",
        this.world_time, e.toString());
  } catch (ClientFatalException e) {
    System.err.printf("[t=%d] Controller.RequestHandlingLoop caught a FATAL Client exception: %s",
        this.world_time, e.toString());
    e.printStackTrace();
    System.exit(1);
  }
  if (DEBUG) {
    System.err.printf("Controller.RequestHandlingLoop completed in %d ms\n",
        (System.currentTimeMillis() - A0));
  }
};
@

\subsection{Server Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[ServerLoop]]} is a [[Runnable]] that collects
last-known locations of all active servers at the current word time.  A server
is ``active'' if its service has not ended, in other words it has not arrived
at its own destination.  The ``last-known location'' is the waypoint in the
server's route $w$ with a time component closest to but not exceeding the given
time, in other words ${w_{\leq t}}_{|w_{\leq t}|}$ (see
[[Storage.DBQueryServerLocationsActive]](1)).  If the last-known locations
cannot be collected, we consider this failure to be fatal and exit immediately.
A possible reason may be database failure in [[storage]]. \\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may indirectly modify the database underlying
[[storage]] depending on the body of [[Client.collectServerLocations]](1).
May print to standard error if [[DEBUG]] is [[true]], or
exits the JVM if failure occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of server collection loop>>=
private Runnable ServerLoop = () -> {
  long A0 = 0;
  if (DEBUG) {
    A0 = System.currentTimeMillis();
  }
  try {
    int[] output = this.storage.DBQueryServerLocationsActive(this.world_time);
    this.client.collectServerLocations(output);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    System.err.println(e.toString());
    e.printStackTrace();
    System.exit(1);
  }
  if (DEBUG) {
    System.err.printf("Controller.ServerLoop completed in %d ms\n",
        (System.currentTimeMillis() - A0));
  }
};
@

\section{Constructor}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Constructor \textcolor{blue}{[[Controller]]}(0) registers a new [[Storage]] to
the [[storage]] member variable. It also registers a new [[Communicator]] to
the [[communicator]] member variable. It then registers itself and the new
[[Storage]] to [[communicator]].\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} creates a new [[Storage]] and [[Communicator]] on the
memory heap, modifies [[storage]] and [[communicator]].\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<[[Controller]] constructor>>=
public Controller() {
  this.storage = new Storage();
  this.communicator = new Communicator();
  this.communicator.registerStorage(storage);
  this.communicator.registerController(this);
}
@

\section{Methods}

\subsection{[[loadRoadNetworkFromFile]](1)}
<<loadRoadNetworkFromFile(1)>>=
void loadRoadNetworkFromFile(final String f_rnet) throws FileNotFoundException, SQLException {
  Scanner sc = new Scanner(new File(f_rnet));
  while (sc.hasNext()) {
@ %def loadRoadNetworkFromFile
{\small If a vertex identifier is $0$, then we store its coordinates as $(0,0)$. We
still call [[Scanner.nextDouble]](0) because we need to advance to the next
token.}
<<loadRoadNetworkFromFile(1)>>=
final int col0 = sc.nextInt();
final int col1 = sc.nextInt();
final int col2 = sc.nextInt();
final int col3 = (col1 == 0 ? (int) (0*sc.nextDouble()) : (int) Math.round(sc.nextDouble()*CSHIFT));
final int col4 = (col1 == 0 ? (int) (0*sc.nextDouble()) : (int) Math.round(sc.nextDouble()*CSHIFT));
final int col5 = (col2 == 0 ? (int) (0*sc.nextDouble()) : (int) Math.round(sc.nextDouble()*CSHIFT));
final int col6 = (col2 == 0 ? (int) (0*sc.nextDouble()) : (int) Math.round(sc.nextDouble()*CSHIFT));
@
{\small Now we insert the vertices into the database.}
<<loadRoadNetworkFromFile(1)>>=
try {
  this.storage.DBAddNewVertex(col1, col3, col4);
} catch (DuplicateVertexException e) {
  if (DEBUG) {
    System.out.println("Warning! Duplicate vertex ignored.");
  }
}
try {
  this.storage.DBAddNewVertex(col2, col5, col6);
} catch (DuplicateVertexException e) {
  if (DEBUG) {
    System.out.println("Warning! Duplicate vertex ignored.");
  }
}
@
{\small We use haversine to compute edge weights\footnote{If the distance between two
vertices is 0 due to rounding, then we round it up to 1.}.  If one of the
vertices in the edge is a dummy vertex, we set the weight to 0\footnote{The
dummy vertex should only terminate and never begin an edge in the road network,
otherwise a shortest path could take a shortcut through the dummy vertex to
reach any other vertex with 0 weight!}.}
<<loadRoadNetworkFromFile(1)>>=
final int dist = ((col1 != 0 && col2 != 0)
  ? this.tools.computeHaversine(
        col3/CSHIFT, col4/CSHIFT,
        col5/CSHIFT, col6/CSHIFT) : 0);
@
{\small The fifth parameter is the \textit{initial speed} on all the edges
\footnote{In the future, the speed on each edge may be recorded directly in the
road network file instead of hardcoded here.}.}
<<loadRoadNetworkFromFile(1)>>=
try {
  this.storage.DBAddNewEdge(col1, col2, dist, 10);
} catch (DuplicateEdgeException e) {
  if (DEBUG) {
    System.out.println("Warning! Duplicate edge ignored.");
  }
}
@
{\small Now we close the [[while]] loop and register the caches to Tools.}
<<loadRoadNetworkFromFile(1)>>=
  }
  this.tools.registerVertices(this.storage.getReferenceVerticesCache());
  this.tools.registerEdges(this.storage.getReferenceEdgesCache());
}
@

\subsection{[[loadProblem(1)]]}
<<loadProblem(1)>>=
void loadProblem(String p)
throws FileNotFoundException, DuplicateUserException, EdgeNotFoundException, SQLException,
       GtreeNotLoadedException, GtreeIllegalSourceException, GtreeIllegalTargetException {
  Scanner sc = new Scanner(new File(p));
  <<..skip header rows>>
  while (sc.hasNext()) {
    final int uid = sc.nextInt();
    final int  uo = sc.nextInt();
    final int  ud = sc.nextInt();
    final int  uq = sc.nextInt();
    final int  ue = sc.nextInt();
    final int  ul = sc.nextInt();
    final int  ub = this.tools.computeShortestPathDistance(uo, ud);
    if (uq < 0) {
      this.addNewServer(new int[] { uid, uq, ue, ul, uo, ud, ub });
    } else {
      this.addNewRequest(new int[] { uid, uq, ue, ul, uo, ud, ub });
    }
  }
}
@ %def loadProblem
<<..skip header rows>>=
for (int i = 0; i < 6; i++) {
  sc.nextLine();
}
@

\subsection{[[registerClient]](1)}
<<registerClient(1)>>=
void registerClient(final Client target) {
  this.client = target;
  this.client.registerCommunicator(this.communicator);
}
@ %def registerClient

\subsection{[[setInitialWorldTime(1)]]}
<<setInitialWorldTime(1)>>=
void setInitialWorldTime(final int t) {
  this.initial_world_time = t;
}
@ %def setInitialWorldTime

\subsection{[[setFinalWorldTime(1)]]}
<<setFinalWorldTime(1)>>=
void setFinalWorldTime(final int t) {
  this.final_world_time = t;
}
@ %def setFinalWorldTime

\subsection{[[setEngineUpdatePeriod(1)]]}
<<setEngineUpdatePeriod(1)>>=
void setEngineUpdatePeriod(final int t) {
  this.engine_update_period = t;
}
@ %def setEngineUpdatePeriod

\subsection{[[getSimulationWorldTime(0)]]}
<<getSimulationWorldTime(0)>>=
int getSimulationWorldTime() {
  return this.world_time;
}
@ %def getSimulationWorldTime


\subsection{[[returnRequest]](1)}
<<returnRequest(1)>>=
void returnRequest(final int rid) {
  this.lu_seen.put(rid, false);
}
@ %def returnRequest

\subsection{[[startRealtime]](1)}
<<startRealtime(1)>>=
void startRealtime(final Consumer app_cb) {
  this.world_time = this.initial_world_time;

  int simulation_duration = (this.final_world_time - this.initial_world_time);

  ScheduledExecutorService exe = Executors.newScheduledThreadPool(5);

  ScheduledFuture<?> cb1 = exe.scheduleAtFixedRate(
    this.ClockLoop, 0, 1, TimeUnit.SECONDS);

  ScheduledFuture<?> cb2 = exe.scheduleAtFixedRate(
    this.EngineLoop, this.loop_delay, this.engine_update_period, TimeUnit.SECONDS);

  int request_collection_period = this.client.getRequestCollectionPeriod();
  ScheduledFuture<?> cb3 = exe.scheduleAtFixedRate(
    this.RequestCollectionLoop, this.loop_delay, request_collection_period, TimeUnit.SECONDS);

  int request_handling_period = this.client.getRequestHandlingPeriod();
  ScheduledFuture<?> cb4 = exe.scheduleAtFixedRate(
    this.RequestHandlingLoop, this.loop_delay, request_handling_period, TimeUnit.MILLISECONDS);

  int server_collection_period = this.client.getServerLocationCollectionPeriod();
  ScheduledFuture<?> cb5 = exe.scheduleAtFixedRate(
    this.ServerLoop, this.loop_delay, server_collection_period, TimeUnit.SECONDS);

  exe.schedule(() -> {
    cb1.cancel(false);
    cb2.cancel(false);
    cb3.cancel(false);
    cb4.cancel(false);
    cb5.cancel(false);
    exe.shutdown();
    this.client.end();
    app_cb.accept(true);
  }, simulation_duration, TimeUnit.SECONDS);
}
@ %def startRealtime

\subsection{[[startSequential]](1)}
<<startSequential(1)>>=
void startSequential(final Consumer app_cb) {
  this.world_time = this.initial_world_time;
  while (this.world_time < this.final_world_time) {
    this.ClockLoop.run();  // this.world_time gets incremented here!
    this.EngineLoop.run();
    this.ServerLoop.run();
    this.RequestCollectionLoop.run();
    this.RequestHandlingLoop.run();
  }
  this.client.end();
  app_cb.accept(true);
}
@ %def startSequential

























