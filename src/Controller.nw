\documentclass{article}

\usepackage{noweb}
\noweboptions{smallcode,longchunks}
\usepackage[a4paper,margin=1in]{geometry}
\usepackage{caption}
\usepackage{colortbl}
\usepackage[colorlinks=true]{hyperref}
\usepackage{graphicx}

\newcommand{\hi}[1]{\noindent {\bf #1}}     % Define a handy paragraph opener

\def\nwendcode{\endtrivlist \endgroup}      % Remove noweb page break penalty
\let\nwdocspar=\par

\captionsetup{labelfont={bf},textfont={bf,it}}
\setlength{\abovecaptionskip}{1mm}
\setlength{\belowcaptionskip}{1mm}

\title{Jargo Simulation Controller\footnote{
  \url{https://github.com/jargors/Controller}}}
\author{James J. Pan\\
  \small{\href{mailto:pan-j16@mails.tsinghua.edu.cn}{pan-j16@mails.tsinghua.edu.cn}}}

\begin{document}
\maketitle
\pagestyle{noweb}

\tableofcontents

\section{Introduction}
\label{sec:introduction}
The simulation controller is intended to be the sole interface for an
evaluation program to control Jargo's simulation environment. The controller
advances the simulation world time, ``pushes'' server locations and new
requests to the client, perturbs server routes stored in the data layer in
order to mimic traffic and other stochastic vehicle processes, and can be used
to report evaluation metrics to the program.  The simulation controller is
developed using the Noweb\footnote{\url{https://www.cs.tufts.edu/~nr/noweb/}}
literate programming\footnote{\url{http://literateprogramming.com/}} tool.
This file ([[src/Controller.nw]]) is the source for the documentation
([[doc/Controller.tex]]) and the Java code ([[Controller.java]])\footnote{See
the [[Makefile]] for build details.}.

\begin{figure}[h]
\centering
\includegraphics[width=150mm]{src/fig/controller-fig}
\caption{Controller within the Jargo stack.}
\label{fig:controller}
\end{figure}

\section{Implementation Overview}
The code consist of the \emph{preamble} (\S\ref{sec:preamble})
and the \emph{class definition} (\S\ref{sec:class-definition}).
<<Controller.java>>=
<<Controller.java preamble>>
<<[[Controller]] definition>>
@

\subsection{Preamble}
\label{sec:preamble}
The preamble declares the package and imports dependencies.
<<Controller.java preamble>>=
package com.github.jargors;
@
We import:
\begin{itemize}
\item all parts of the Jargo stack;
<<Controller.java preamble>>=
import com.github.jargors.Storage;
import com.github.jargors.Communicator;
import com.github.jargors.Client;
import com.github.jargors.Tools;
import com.github.jargors.exceptions.DuplicateVertexException;
import com.github.jargors.exceptions.DuplicateEdgeException;
import com.github.jargors.exceptions.DuplicateUserException;
import com.github.jargors.exceptions.EdgeNotFoundException;
import com.github.jargors.exceptions.UserNotFoundException;
import com.github.jargors.exceptions.VertexNotFoundException;
@ \item standard utilities for concurrent execution;
<<Controller.java preamble>>=
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
@ \item standard classes for file operations;
<<Controller.java preamble>>=
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
@ \item standard map classes for caching various items.
<<Controller.java preamble>>=
import java.util.Map;
import java.util.HashMap;
@
<<Controller.java preamble>>=
import java.sql.SQLException;
@
\end{itemize}

\subsection{Class Definition}
\label{sec:class-definition}
<<[[Controller]] definition>>=
public class Controller {
  <<[[Controller]] member variables>>
  <<[[Controller]] constructor>>
  <<[[Controller]] public methods>>
}
@

\subsection{Member Variables}
Member variables are grouped into \emph{containers}, \emph{settings}, and
\emph{loops}.
<<[[Controller]] member variables>>=
<<Container objects>>
<<Settings objects>>
<<Loop objects>>
@
\hi{Containers.}
<<Container objects>>=
private Storage storage;
private Communicator communicator;
private Tools tools = new Tools();
private Client client;
private Map<Integer, Boolean> lu_seen = new HashMap<>();
@ %def storage communicator tools client lu_seen

\hi{Settings.} Settings objects configure various aspects of the simulation.
These settings should mostly be set by the evaluation program by using the public
setters.

Ultimately we want everything in the database to be an integer so we don't have
to fiddle around with data types when we do reads and writes. We use [[CSHIFT]]
to shift the decimal places of latitude and longitude coordinates left and
right by multiplication or division\footnote{Beware, if [[CSHIFT]] is changed
here, it should also be changed in Tools.}.
<<Settings objects>>=
private final double CSHIFT = 10000000.0;
private static int world_time = 0;
private int initial_world_time = 0;
private int final_world_time = 86400;
private int engine_update_period = 10;
private int loop_delay = 0;
// private int deviation_rate = 0.02;
// private int breakdown_rate = 0.005;
@ %def CSHIFT world_time initial_world_time final_world_time engine_update_period loop_delay

\hi{Loops.} Jargo's simulation environment comprises four ``loops'', defined
here, running in parallel. They are executed using Java's
[[ScheduledExecutorService]] to control timing.
<<Loop objects>>=
<<Definition of clock loop>>
<<Definition of engine loop>>
<<Definition of request collection loop>>
<<Definition of request handling loop>>
<<Definition of server collection loop>>
@

\subsubsection{Clock Loop}
This loop advances the simulation world time.
<<Definition of clock loop>>=
private Runnable ClockLoop = () -> {
  communicator.setSimulationWorldTime(++world_time);
  Tools.Print((world_time % 2 == 0 ? "*ping*" : "*pong*"));
};
@ %def ClockLoop

\subsubsection{Engine Loop}
<<Definition of engine loop>>=
private Runnable EngineLoop = () -> { };
@ %def EngineLoop

\subsubsection{Request Collection Loop}
<<Definition of request collection loop>>=
private Runnable RequestCollectionLoop = () -> {
  long A0 = System.currentTimeMillis();
  final int t0 = world_time;
  try {
    int[] output = storage.DBQueryQueuedRequests(world_time);
    for (int i = 0; i < (output.length - 6); i += 7) {
      if (!lu_seen.containsKey(output[i]) || lu_seen.get(output[i]) == false) {
        client.collectRequest(new int[] {
          output[(i + 0)],
          output[(i + 1)],
          output[(i + 2)],
          output[(i + 3)],
          output[(i + 4)],
          output[(i + 5)],
          output[(i + 6)] });
        lu_seen.put(output[i], true);
      }
    }
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  final int t1 = world_time;
  long A1 = System.currentTimeMillis();
  Tools.Print("Time RCL: "+(A1 - A0)+" ms");
};
@ %def RequestCollectionLoop

\subsubsection{Request Handling Loop}
<<Definition of request handling loop>>=
private Runnable RequestHandlingLoop = () -> {
  long A0 = System.currentTimeMillis();
  try {
    client.notifyNew();
  } catch (RuntimeException e) {
    System.out.println("client.notifyNew() exception: "+e.toString());
  }
  long A1 = System.currentTimeMillis();
  Tools.Print("Time RHL: "+(A1 - A0)+" ms");
};
@ %def RequestHandlingLoop

\subsubsection{Server Loop}
This loop ``pushes'' server locations to the client.
Option A. Cache the routes here, then update the cache when the routes change.
Option B. Change the query to use one query to get active vehicles, then
  a second query to get position from table W for each active vehicle, instead
  of using join.
<<Definition of server collection loop>>=
private Runnable ServerLoop = () -> {
  long A0 = System.currentTimeMillis();
  try {
    int[] output = storage.DBQueryServerLocationsActive(world_time);
    client.collectServerLocations(output);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  long A1 = System.currentTimeMillis();
  Tools.Print("Time SL: "+(A1 - A0)+" ms");
};
@ %def ServerLoop

\subsection{Constructor}
<<[[Controller]] constructor>>=
public Controller() {
  storage = new Storage();
  communicator = new Communicator();
  communicator.setStorage(storage);
  communicator.setController(this);
}
@

\section{Public Methods}
\label{sec:public-methods}
\hi{General methods.}
<<[[Controller]] public methods>>=
<<Initialize new empty database>>
<<Close database>>
<<Set client debug>>
<<Set communicator debug>>
<<Set client>>
<<Set initial world time>>
<<Set final world time>>
<<Set engine update period>>
<<Get world time>>
<<Return request to queue>>
<<Save backup>>
<<Load backup>>
<<Load data model>>
<<Load road network>>
<<Load problem>>
<<Load GTree>>
<<Start dynamic simulation>>
<<Start static simulation>>
@
\hi{Read methods.}
<<[[Controller]] public methods>>=
<<Query custom statement>>
<<Query all vertices>>
<<Query all edges>>
<<Query vertex>>
<<Query edge>>
<<Query ridesharing user>>
<<Query queued requests>>
<<Query routes>>
<<Query schedules>>
<<Query various metrics>>
@
\hi{Write methods.}
<<[[Controller]] public methods>>=
<<Add new server>>
<<Add new request>>
@

\subsection{General methods}

\subsubsection{[[createNewInstance]](0)}
<<Initialize new empty database>>=
public void createNewInstance() {
  try {
    storage.DBCreateNewInstance();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
}
@ %def createNewInstance

\subsubsection{[[closeInstance]](0)}
<<Close database>>=
public void closeInstance() {
  try {
    storage.DBCloseInstance();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
}
@ %def closeInstance

\subsubsection{[[setDebugClient]](1)}
<<Set client debug>>=
public void setDebugClient(boolean flag) {
  client.setDebug(flag);
}
@ %def setDebugClient

\subsubsection{[[setDebugCommunicator]](1)}
<<Set communicator debug>>=
public void setDebugCommunicator(boolean flag) {
  communicator.setDebug(flag);
}
@ %def setDebugCommunicator

\subsubsection{[[setClient]](1)}
<<Set client>>=
public void setClient(Client target) {
  client = target;
  client.setCommunicator(communicator);
}
@ %def setClient

\subsubsection{[[setInitialWorldTime(1)]]}
<<Set initial world time>>=
public void setInitialWorldTime(int t) {
  initial_world_time = t;
}
@ %def setInitialWorldTime

\subsubsection{[[setFinalWorldTime(1)]]}
<<Set final world time>>=
public void setFinalWorldTime(int t) {
  final_world_time = t;
}
@ %def setFinalWorldTime

\subsubsection{[[setEngineUpdatePeriod(1)]]}
<<Set engine update period>>=
public void setEngineUpdatePeriod(int t) {
  this.engine_update_period = t;
}
@ %def setEngineUpdatePeriod

\subsubsection{[[getSimulationWorldTime(0)]]}
<<Get world time>>=
public static int getSimulationWorldTime() {
  return world_time;
}
@ %def getSimulationWorldTime


\subsubsection{[[returnRequest]](1)}
<<Return request to queue>>=
public void returnRequest(int rid) {
  lu_seen.put(rid, false);
}
@ %def returnRequest

\subsubsection{[[save]](1)}
<<Save backup>>=
public void saveBackup(String p) {
  try {
    storage.DBSaveBackup(p);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
}
@ %def saveBackup

\subsubsection{[[loadBackup]](1)}
<<Load backup>>=
public void loadBackup(String p) {
  try {
    storage.DBLoadBackup(p);
    storage.DBLoadRoadNetworkFromDB();
    storage.DBLoadUsersFromDB();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
}
@ %def loadBackup

\subsubsection{[[loadDataModel]](0)}
<<Load data model>>=
public void loadDataModel() {
  storage.DBLoadDataModel();
}
@

\subsubsection{[[loadRoadNetwork]](1)}
<<Load road network>>=
public void loadRoadNetwork(final String f_rnet) {
  try {
    Scanner sc = new Scanner(new File(f_rnet));
    while (sc.hasNext()) {
      <<..parse a line of the road network>>
      <<..detect dummy vertex>>
      <<..insert vertex coordinates>>
      <<..compute edge weight [[dist]]>>
      <<..insert edge>>
    }
  } catch (FileNotFoundException e) {
    System.err.println("Encountered fatal error");
    System.err.println(e.toString());
    e.printStackTrace();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  tools.registerVertices(storage.getReferenceVerticesCache());
  tools.registerEdges(storage.getReferenceEdgesCache());
}
@ %def loadRoadNetwork
<<..parse a line of the road network>>=
int[] col = new int[7];
col[0] = sc.nextInt();
col[1] = sc.nextInt();
col[2] = sc.nextInt();
col[3] = (int) Math.round(sc.nextDouble()*CSHIFT);
col[4] = (int) Math.round(sc.nextDouble()*CSHIFT);
col[5] = (int) Math.round(sc.nextDouble()*CSHIFT);
col[6] = (int) Math.round(sc.nextDouble()*CSHIFT);
@
If a vertex identifier is $0$, then we store its coordinates as $(0,0)$.
<<..detect dummy vertex>>=
if (col[1] == 0) {
  col[3] = 0;
  col[4] = 0;
}
if (col[2] == 0) {
  col[5] = 0;
  col[6] = 0;
}
@
<<..insert vertex coordinates>>=
try {
  storage.DBAddNewVertex(col[1], col[3], col[4]);
} catch (DuplicateVertexException e) {
  // System.err.println("Warning: duplicate vertex rejected");
  // System.err.println(e.toString());
}
try {
  storage.DBAddNewVertex(col[2], col[5], col[6]);
} catch (DuplicateVertexException e) {
  // System.err.println("Warning: duplicate vertex rejected");
  // System.err.println(e.toString());
}
@
We use haversine to compute edge weights\footnote{If the distance between two
vertices is 0 due to rounding, then we round it up to 1.}.  If one of the
vertices in the edge is a dummy vertex, we set the weight to 0\footnote{The
dummy vertex should only terminate and never begin an edge in the road network,
otherwise a shortest path could take a shortcut through the dummy vertex to
reach any other vertex with 0 weight!}.
<<..compute edge weight [[dist]]>>=
int dist = ((col[1] != 0 && col[2] != 0)
  ? tools.computeHaversine(
        col[3]/CSHIFT, col[4]/CSHIFT,
        col[5]/CSHIFT, col[6]/CSHIFT) : 0);
@
The fifth parameter is the \textit{initial speed} on all the edges \footnote{In
the future, the speed on each edge may be recorded directly in the road network
file instead of hardcoded here.}.
<<..insert edge>>=
try {
  storage.DBAddNewEdge(col[1], col[2], dist, 10);
} catch (DuplicateEdgeException e) {
  // System.err.println("Warning: duplicate edge rejected");
  // System.err.println(e.toString());
}
@

\subsubsection{[[loadProblem(1)]]}
<<Load problem>>=
public void loadProblem(String p) {
  try {
    Scanner sc = new Scanner(new File(p));
    <<..skip header rows>>
    int[] col = new int[6];
    while (sc.hasNext()) {
      for (int i = 0; i < 6; i++) {
        col[i] = sc.nextInt();
      }
      int uid = col[0];
      int uo = col[1];
      int ud = col[2];
      int uq = col[3];
      int ue = col[4];
      int ul = col[5];
      int ub = tools.computeShortestPathDistance(uo, ud);
      if (uq < 0) {
        addNewServer(new int[] { uid, uq, ue, ul, uo, ud, ub });
      } else {
        addNewRequest(new int[] { uid, uq, ue, ul, uo, ud, ub });
      }
    }
  } catch (FileNotFoundException e) {
    System.out.println("Bad path to problem instance");
  } catch (RuntimeException e) {
    System.out.println(e.getMessage());
    e.printStackTrace();
    System.out.println("Jargo runtime exception");
  }
}
@ %def loadProblem
<<..skip header rows>>=
for (int i = 0; i < 6; i++) {
  sc.nextLine();
}
@

\subsubsection{[[loadGTree]](1)}
<<Load GTree>>=
public void loadGTree(String p) {
  tools.loadGTree(p);
}
@ %def loadGTree

\subsubsection{[[start]](0)}
<<Start dynamic simulation>>=
public void start(Consumer app_cb) {
  world_time = initial_world_time;

  int simulation_duration = (final_world_time - initial_world_time);

  ScheduledExecutorService exe = Executors.newScheduledThreadPool(5);

  ScheduledFuture<?> cb1 = exe.scheduleAtFixedRate(
    ClockLoop, 0, 1, TimeUnit.SECONDS);

  ScheduledFuture<?> cb2 = exe.scheduleAtFixedRate(
    EngineLoop, loop_delay, engine_update_period, TimeUnit.SECONDS);

  int request_collection_period = client.getRequestCollectionPeriod();
  ScheduledFuture<?> cb3 = exe.scheduleAtFixedRate(
    RequestCollectionLoop, loop_delay, request_collection_period, TimeUnit.SECONDS);

  int request_handling_period = client.getRequestHandlingPeriod();
  ScheduledFuture<?> cb4 = exe.scheduleAtFixedRate(
    RequestHandlingLoop, loop_delay, request_handling_period, TimeUnit.MILLISECONDS);

  int server_collection_period = client.getServerLocationCollectionPeriod();
  ScheduledFuture<?> cb5 = exe.scheduleAtFixedRate(
    ServerLoop, loop_delay, server_collection_period, TimeUnit.SECONDS);

  exe.schedule(() -> {
    cb1.cancel(false);
    cb2.cancel(false);
    cb3.cancel(false);
    cb4.cancel(false);
    cb5.cancel(false);
    exe.shutdown();
    client.end();
    app_cb.accept(true);
  }, simulation_duration, TimeUnit.SECONDS);
}
@ %def start

\subsubsection{[[startStatic]](0)}
<<Start static simulation>>=
public void startStatic() {

  world_time = initial_world_time;

  while (world_time < final_world_time) {
    ClockLoop.run();
    EngineLoop.run();
    ServerLoop.run();
    RequestCollectionLoop.run();
    RequestHandlingLoop.run();
  }

  client.end();
}
@ %def startStatic


\subsection{Read Methods}
\subsubsection{[[query]](2)}
<<Query custom statement>>=
public int[] query(String sql, int ncols) {
  int[] output = new int[] { };
  try {
    output = storage.DBQuery(sql, ncols);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def query

\subsubsection{[[queryAllVertices]](0)}
<<Query all vertices>>=
public int[] queryAllVertices() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryAllVertices();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryAllVertices

\subsubsection{[[queryAllEdges]](0)}
<<Query all edges>>=
public int[] queryAllEdges() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryAllEdges();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryAllEdges

\subsubsection{[[queryVertex]](1)}
<<Query vertex>>=
public int[] queryVertex(final int v) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryVertex(v);
  } catch (VertexNotFoundException e) {
    System.err.println("Warning: vertex "+v+" not found");
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@

\subsubsection{[[queryEdge]](2)}
<<Query edge>>=
public int[] queryEdge(final int v1, final int v2) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryEdge(v1, v2);
  } catch (EdgeNotFoundException e) {
    // ...
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@

\subsubsection{[[queryUser]](1)}
<<Query ridesharing user>>=
public int[] queryUser(int rid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryUser(rid);
  } catch (UserNotFoundException e) {
    System.err.println("Warning: user not found");
    System.err.println(e.toString());
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryUser

\subsubsection{[[queryQueuedRequests]](1)}
<<Query queued requests>>=
public int[] queryQueuedRequests(int t) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryQueuedRequests(t);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryQueuedRequests

\subsubsection{[[queryRoute]](1)}
<<Query routes>>=
public int[] queryRoute(int sid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerRoute(sid);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRoute

\subsubsection{[[querySchedule]](1)}
<<Query schedules>>=
public int[] querySchedule(int sid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerSchedule(sid);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def querySchedule

\subsubsection{[[queryCountVertices]](0)}
<<Query various metrics>>=
public int[] queryCountVertices() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryCountVertices();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryCountVertices

\subsubsection{[[queryCountEdges]](0)}
<<Query various metrics>>=
public int[] queryCountEdges() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryCountEdges();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryCountEdges

\subsubsection{[[queryStatisticsEdges]](0)}
<<Query various metrics>>=
public int[] queryStatisticsEdges() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryStatisticsEdges();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryStatisticsEdges

\subsubsection{[[queryMBR]](0)}
<<Query various metrics>>=
public int[] queryMBR() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryMBR();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryMBR

\subsubsection{[[queryCountServers]](0)}
<<Query various metrics>>=
public int[] queryCountServers() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryCountServers();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryCountServers

\subsubsection{[[queryCountRequests]](0)}
<<Query various metrics>>=
public int[] queryCountRequests() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryCountRequests();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryCountRequests

\subsubsection{[[queryServiceRate]](0)}
<<Query various metrics>>=
public int[] queryServiceRate() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServiceRate();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServiceRate

\subsubsection{[[queryBaseDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryBaseDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryBaseDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryBaseDistanceTotal

\subsubsection{[[queryServerBaseDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryServerBaseDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerBaseDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerBaseDistanceTotal

\subsubsection{[[queryRequestBaseDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryRequestBaseDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestBaseDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestBaseDistanceTotal

\subsubsection{[[queryRequestBaseDistanceUnassigned]](0)}
<<Query various metrics>>=
public int[] queryRequestBaseDistanceUnassigned() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestBaseDistanceUnassigned();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestBaseDistanceUnassigned

\subsubsection{[[queryServerTravelDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryServerTravelDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerTravelDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerTravelDistanceTotal

\subsubsection{[[queryServerCruisingDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryServerCruisingDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerCruisingDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerCruisingDistanceTotal

\subsubsection{[[queryServerServiceDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryServerServiceDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerServiceDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerServiceDistanceTotal

\subsubsection{[[queryRequestDetourDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryRequestDetourDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestDetourDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestDetourDistanceTotal

\subsubsection{[[queryRequestTransitDistanceTotal]](0)}
<<Query various metrics>>=
public int[] queryRequestTransitDistanceTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestTransitDistanceTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestTransitDistanceTotal

\subsubsection{[[queryServerTravelDurationTotal]](0)}
<<Query various metrics>>=
public int[] queryServerTravelDurationTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerTravelDurationTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerTravelDurationTotal

\subsubsection{[[queryRequestPickupDurationTotal]](0)}
<<Query various metrics>>=
public int[] queryRequestPickupDurationTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestPickupDurationTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestPickupDurationTotal

\subsubsection{[[queryRequestTransitDurationTotal]](0)}
<<Query various metrics>>=
public int[] queryRequestTransitDurationTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestTransitDurationTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestTransitDurationTotal

\subsubsection{[[queryRequestTravelDurationTotal]](0)}
<<Query various metrics>>=
public int[] queryRequestTravelDurationTotal() {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestTravelDurationTotal();
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestTravelDurationTotal

\subsubsection{[[queryRequestDepartureTime]](1)}
<<Query various metrics>>=
public int[] queryRequestDepartureTime(int rid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestDepartureTime(rid);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestDepartureTime

\subsubsection{[[queryServerDepartureTime]](1)}
<<Query various metrics>>=
public int[] queryServerDepartureTime(int sid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerDepartureTime(sid);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerDepartureTime

\subsubsection{[[queryRequestArrivalTime]](1)}
<<Query various metrics>>=
public int[] queryRequestArrivalTime(int rid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryRequestArrivalTime(rid);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryRequestArrivalTime

\subsubsection{[[queryServerArrivalTime]](1)}
<<Query various metrics>>=
public int[] queryServerArrivalTime(int sid) {
  int[] output = new int[] { };
  try {
    output = storage.DBQueryServerArrivalTime(sid);
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
  return output;
}
@ %def queryServerArrivalTime


\subsection{Write Methods}
\subsubsection{[[addNewServer]](1)}
<<Add new server>>=
public void addNewServer(int[] u) {
  try {
    storage.DBAddNewServer(u, tools.computeRoute(u[4], u[5], u[2]));
  } catch (DuplicateUserException e) {
    System.err.println("Warning: duplicate user rejected");
    System.err.println(e.toString());
  } catch (EdgeNotFoundException e) {
    System.err.println("Warning: malformed route rejected");
    System.err.println(e.toString());
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
}
@ %def addNewServer

\subsubsection{[[addNewRequest]](1)}
<<Add new request>>=
public void addNewRequest(int[] u) {
  try {
    storage.DBAddNewRequest(u);
  } catch (DuplicateUserException e) {
    System.err.println("Warning: duplicate user rejected");
    System.err.println(e.toString());
  } catch (SQLException e) {
    System.err.println("Encountered fatal error");
    Tools.PrintSQLException(e);
    System.exit(1);
  }
}
@ %def addNewRequest

\appendix

\section{Appendix: List of Chunks}
\label{ap:list-of-chunks}
\nowebchunks

\section{Appendix: List of Identifiers}
\label{ap:list-of-identifiers}
\nowebindex

\end{document}


