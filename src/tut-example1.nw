\chapter{Example: Nearest Neighbor Client}
\label{tut-example1}

A ``client'' is a program that can respond to ridesharing requests served by
the Jargo. A base Client class is provided that includes some basic
request-handling functionality. The most important method in this class is
[[handleRequest]]. This method takes a request as its argument and can be used
to compute an assignment for the request.

\section*{Step 1: Preamble}
\addcontentsline{toc}{section}{Step 1: Preamble}

Let's develop a client that uses the nearest-neighbor algorithm to perform
assignments. First, create a new file somewhere on your computer and give it a
name that ends in [[*.java]], for example [[TutorialClient.java]]. In Java, the
filename must match the name of your class, in this case [[TutorialClient]].
Now in the preamble, give your class a package and import Jargo's [[sim]]
modules. For serious error handling, you can also include the standard
[[SQLException]] module. Your file should look similar to this:

\begin{verbatim}
package com.github.jargors.client;
import com.github.jargors.sim.*;
import java.sql.SQLException;
\end{verbatim}

\section*{Step 2: Extending Jargo's Client Class}
\addcontentsline{toc}{section}{Step 2: Extending Jargo's Client Class}

Create the class by extending Jargo's base Client class. Then add member
variables. For this tutorial, we will add a distance-based filter to our
algorithm. Any vehicle outside 1,000 meters of a customer request will not be
considered. Store this magic distance threshold in a variable called
[[MAX\_RANGE]].

We will also add a schedule-length filter. A vehicle's schedule
lists the pick-ups and drop-offs that the vehicle will perform. As the schedule
grows longer, computing a good way to insert a new pick-up and drop-off gets
harder. Here, we will create a schedule-length threshold called [[MAX\_EVENT]] and
set it to 8. If a vehicle is scheduled to perform more than 8 pick-ups or
drop-offs at the time that a request appears, the vehicle will not be considered.
Your file should now look like:

\begin{verbatim}
package com.github.jargors.client;
import com.github.jargors.sim.*;
import java.sql.SQLException;

public class TutorialClient extends Client {
  final int MAX_RANGE = 1000;
  final int MAX_EVENT = 8;
  int[] locations = new int[] { };
}
\end{verbatim}

\section*{Step 3: Handling Requests}
\addcontentsline{toc}{section}{Step 3: Handling Requests}

In the class body, create the [[handleRequest]] method. The method should
look like this:

\begin{verbatim}
protected void handleRequest(int[] r)
throws ClientException, ClientFatalException {
}
\end{verbatim}

When new requests are available, Jargo will automatically call this method.
Copy and paste the following code into the method:

\begin{verbatim}
tools.Print("Extract request { rid="+r[0]+", rq="+r[1]+", ro="+r[4]+", rd="+r[5]+" }");
\end{verbatim}


