\section{Class: Communicator}
\label{sim-communicator}

\etocsettocstyle{}{}
\localtableofcontents

<<Communicator.java>>=
<<Package: [[sim]]>>
<<Communicator.java preamble>>
public class Communicator {
  <<[[Communicator]] member variables>>
  <<[[Communicator]] constructor>>
  <<[[Communicator]] methods>>
}
@

\subsection{Preamble}
<<Communicator.java preamble>>=
import com.github.jargors.sim.Storage;
import com.github.jargors.sim.Controller;
import com.github.jargors.sim.Traffic;
import com.github.jargors.sim.ClientException;
import com.github.jargors.sim.ClientFatalException;
import com.github.jargors.sim.DuplicateVertexException;
import com.github.jargors.sim.DuplicateEdgeException;
import com.github.jargors.sim.DuplicateUserException;
import com.github.jargors.sim.EdgeNotFoundException;
import com.github.jargors.sim.UserNotFoundException;
import com.github.jargors.sim.VertexNotFoundException;
import com.github.jargors.sim.RouteIllegalOverwriteException;
import com.github.jargors.sim.TimeWindowException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.sql.SQLException;
@

\subsection{Member Variables}
<<[[Communicator]] member variables>>=
private Storage storage;
private Controller controller;
private Traffic traffic = null;
private final boolean DEBUG = "true".equals(System.getProperty("jargors.communicator.debug"));
@

\subsection{Constructor}
<<[[Communicator]] constructor>>=
public Communicator() { }
@

\subsection{Methods}
\subsubsection{Read Methods}
<<[[Communicator]] methods>>=
public <<Read: queryEdge(2)>>
public <<Read: queryMBR(0)>>
public <<Read: queryMetricCountAssigned(0)>>
public <<Read: queryMetricServerDistanceTotal(0)>>
public <<Read: queryMetricServerDistanceTotal(1)>>
public <<Read: queryMetricServiceRate(0)>>
public <<Read: queryMetricServiceRate(1)>>
public <<Read: queryMetricRequestDistanceBaseAssigned(0)>>
public <<Read: queryServerCapacityViolations(4)>>
public <<Read: queryServerDistanceRemaining(2)>>
public <<Read: queryServerDurationRemaining(2)>>
public <<Read: queryServerDurationTravel(2)>>
public <<Read: queryServerLoadMax(2)>>
public <<Read: queryServerRouteActive(1)>>
public <<Read: queryServerRouteRemaining(2)>>
public <<Read: queryServerScheduleRemaining(2)>>
public <<Read: queryServersCount(0)>>
public <<Read: queryServersLocationsActive(1)>>
public <<Read: queryUser(1)>>
public <<Read: queryVertex(1)>>
@
\subsubsection{Write Methods}
<<[[Communicator]] methods>>=
public <<Write: updateServerService(5)>>
@
\subsubsection{Adminstration}
<<[[Communicator]] methods>>=
public <<Admin: retrieveClock(0)>>
public <<Admin: retrieveRefCacheEdges(0)>>
public <<Admin: retrieveRefCacheUsers(0)>>
public <<Admin: retrieveRefCacheVertices(0)>>
public <<Admin: setRefController(1)>>
public <<Admin: setRefStorage(1)>>
public <<Admin: setRefTraffic(1)>>
@
\subsubsection{Special Methods}
<<[[Communicator]] methods>>=
public <<Communicator: forwardReturnRequest(1)>>
@


\subsubsection{\texttt{forwardReturnRequest}(1)}
<<Communicator: forwardReturnRequest(1)>>=
void forwardReturnRequest(final int[] r) {
  this.controller.returnRequest(r);
}
@ %def forwardReturnRequest

