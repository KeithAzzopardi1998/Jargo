\chapter*{Preface}
\label{preface}

\addcontentsline{toc}{chapter}{Preface}

Jargo is developed using the
Noweb\footnote{\url{https://www.cs.tufts.edu/~nr/noweb/}} literate
programming\footnote{\url{http://literateprogramming.com/}} tool.  The files in
the [[src]] directory are the source files for this document
([[jargo.pdf]]) and the Java code ([[java/*.java]], [[jar/jargors-1.0.0.jar]]).
See the \texttt{Makefile} for build details.

At the end of the day, Jargo is basically a
CRUD\footnote{\url{https://en.wikipedia.org/wiki/Create,_read,_update_and_delete}}
app, albeit with a powerful data model for representing ridesharing systems. As
such, organizing the class methods by CRUD functionality seems sensible.
Literate programming allows us to define \emph{chunks} of code which we can
reference anywhere we like. Here I've put all the CRUD chunks into
Chapters 2--4 and then referenced them in the appropriate classes in the
remaining chapters. Methods specific to G-tree are located in Chapter 5.
Non-CRUD methods specific to each of the Jargo classes are located in Chapters
6--12.

To anybody reading this document, keep in mind that ultimately it is
\emph{source code}. Its main purpose is to produce a working Java library. The
idea is that the flexibility of the chunks lets the code be reasoned about in
an organized way to reduce the occurrence of bugs. The best way to read it is
to put on your ``hacker'' hat.  But for those without a ``hacker'' hat, I am
spending some effort to add descriptions about the methods to produce something
like an API document. This effort is ongoing.

\bigskip
\begin{flushright}
James\\
November 13, 2019
\end{flushright}

