\documentclass{article}

\usepackage{noweb}
\noweboptions{smallcode,longchunks}
\usepackage[a4paper,margin=1in]{geometry}
\usepackage{adjustbox}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{booktabs}
\usepackage{caption}
\usepackage{colortbl}
\usepackage{enumitem}
\usepackage[colorlinks=true]{hyperref}
\usepackage{multicol}
\usepackage{multirow}
\usepackage{tikz}

\newcommand{\hi}[1]{\noindent {\bf #1}}     % Define a handy paragraph opener

\def\nwendcode{\endtrivlist \endgroup}      % Remove noweb page break penalty
\let\nwdocspar=\par

\theoremstyle{definition}                   % Define an "example" environment
\newtheorem{example}{Example}

\definecolor{TableTitle}{rgb}{0.900, 0.900, 0.900}  % Define colors for tables
\definecolor{TableHeader}{rgb}{0.900, 0.900, 0.900}

\captionsetup{labelfont={bf},textfont={bf,it}}
\setlength{\abovecaptionskip}{1mm}
\setlength{\belowcaptionskip}{1mm}

\title{Jargo Storage Interface and Data Model\footnote{
  \url{https://github.com/jargors/Storage-Interface}}}
\author{James J. Pan\\
  \small{\href{mailto:pan-j16@mails.tsinghua.edu.cn}{pan-j16@mails.tsinghua.edu.cn}}}

\begin{document}
\maketitle
\pagestyle{noweb}

\tableofcontents

\section{Introduction}
\label{sec:introduction}
Jargo's storage interface is a data access layer (Figure~\ref{fig:storage}) for
Jargo to record the ground-truth state of ridesharing users (customers and
vehicles) as they evolve over time, and to query analytical metrics about the
state.  The storage engine is Apache
Derby\footnote{\url{https://db.apache.org/derby}}, chosen for its ability to
defer table and column constraints until the end of a transaction.  This
ability is needed during some write operations that may temporarily cause the
simulation to be in an invalid state. At all other times, Jargo's data model
guarantees the integrity of the simulation. The storage interface is written in
Java so it can communicate with Derby using JDBC. A listing of the public
methods is shown in Figure~\ref{fig:methods}.  The storage interface is
developed using the Noweb\footnote{\url{https://www.cs.tufts.edu/~nr/noweb/}}
literate programming\footnote{\url{http://literateprogramming.com/}} tool.
This file ([[src/Storage.nw]]) is the source for both the documentation
([[doc/Storage.tex]]) and the Java code ([[Storage.java]])\footnote{See the
[[Makefile]] for build details.}.

\begin{figure}[h]
\centering
\includegraphics[width=150mm]{src/fig/storage-fig}
\caption{Storage interface and data layer within the Jargo stack.}
\label{fig:storage}
\end{figure}

\begin{figure}
\adjustbox{scale=1.00}{
\begin{minipage}[t]{0.5\textwidth}
\hi{Read Methods}
<<[[Storage]] public methods>>=
<<Query custom statement>>
<<Query count of vertices>>
<<Query count of edges>>
<<Query vertex>>
<<Query all vertices>>
<<Query edge>>
<<Query all edges>>
<<Query edge statistics>>
<<Query MBR>>
<<Query count of servers>>
<<Query count of requests>>
<<Query ridesharing user>>
<<Query request status>>
<<Query request is assigned?>>
<<Query queued requests>>
<<Query active servers>>
<<Query all server locations>>
<<Query active server locations>>
<<Query routes>>
<<Query schedules>>
<<Query remaining routes>>
<<Query remaining schedules>>
<<Query remaining distance>>
<<Query remaining duration>>
<<Query max load>>
<<Query server pending assignments>>
<<Query server completed assignments>>
<<Query various metrics>>
@
\end{minipage}
\begin{minipage}[t]{0.5\textwidth}
\hi{Write Methods}
<<[[Storage]] public methods>>=
<<Add new vertex>>
<<Add new edge>>
<<Add new request>>
<<Add new server>>
<<Update edge speed>>
<<Update server route>>
<<Update server add to schedule>>
<<Update server remove from schedule>>
@
\hi{Utilities}
<<[[Storage]] public methods>>=
<<Initialize new empty database>>
<<Close database>>
<<Get reference to vertices cache>>
<<Get reference to edges cache>>
<<Get reference to users cache>>
<<Load data model>>
<<Load backup>>
<<Load road network from database>>
<<Load users from database>>
<<Save backup>>
<<Print SQL driver statistics>>
<<Get connection (for internal use)>>
@
\end{minipage}
}
\caption{Storage interface public methods.}
\label{fig:methods}
\end{figure}

\subsection{Motivation}
\label{sec:motivation}
Ridesharing can be formulated as a decision problem where the objective is to
determine the optimal customer-to-vehicle assignments. Optimizing a single
assignment produces a \emph{local optima} whereas optimizing the aggregated
objective over all assigments in the span of a ridesharing scenario produces
the \emph{global optima}. The global optima answers questions that are of
interest to various stakeholders, such as what is the minimum fleet size needed
for an $n$\% assignment rate or what is the maximum profit achievable in a day.

To evaluate the \emph{quality} of a ridesharing algorithm (some might say the
\emph{quality of the solution} produced by the algorithm) is to measure the
value of the objective that the algorithm can achieve over the ridesharing
scenario. A high-quality algorithm achieves near the global optima whereas a
low-quality algorithm does not.  Quality of a ridesharing algorithm is
difficult to evaluate for three reasons.
\begin{enumerate}
\item \hi{Assignment Dependence.} Assignments are not independent of each
other. If a vehicle is initially assigned to a particular customer, it may be
ineligible for some future customer due to capacity and time window
constraints. This dependence means that assignments cannot be evaluated
sequentially in isolation but must be evaluated as part of a broader system.
\item \hi{Stochastic Processes.} Stochastic processes become important over the
span of a scenario.  Travel times in the road network are uncertain due to
traffic and vehicle breakdowns. Travel routes are also uncertain, if the
vehicles are non-autonomous, because human drivers can make mistakes.  If a
vehicle is initially assigned to a customer in an area that is susceptible to
traffic or difficult to navigate, it may be ineligible for some future customer
due to time window constraints. These processes cannot be ignored because they
can affect the downstream assignments.
\item \hi{Real-Time Requests.} A ridesharing algorithm's processing time
affects downstream assignments due to the real-time nature of ridesharing
requests. As a simple example, consider an algorithm that processes requests at
a rate slower than they appear. Over time, later requests may never get
processed even if valid assignments exist for them.
\end{enumerate}

The above items are all features of ridesharing in the real world.  Thus to
evaluate quality, ridesharing algorithms can be tested on actual vehicles and
customers (Figure~\ref{fig:physical}), but this method is expensive, slow to
deploy, and out of reach for most researchers. Controlled studies to determine
the effect of certain parameters, such as presence and absence of traffic, on
algorithm quality are also difficult or impossible to perform. In contrast,
testing algorithms on a simulated environment is inexpensive, fast to deploy,
readily accessible, and controllable. The challenge then becomes to design an
environment that can faithfully reproduce these real-world features. As there
is no ``lag'' in the real world, the environment must also be highly
responsive.

\begin{figure}[h]
\centering
\includegraphics[width=100mm]{src/fig/physical}
\caption{To evaluate quality, ridesharing algorithms can be tested on physical
vehicles and customers, but this method is expensive, slow to deploy, and out
of reach for most researchers.}
\label{fig:physical}
\end{figure}

Jargo is the name of our environment for evaluating the quality of ridesharing
algorithms. It captures assignment dependence by simulating real-time motion of
vehicles and capacity, and it simulates stochastic processes by perturbing
route segment durations and locations. To simulate real-time, it executes a
ridesharing algorithm in parallel alongside new requests so that an algorithm
can be running while requests are arriving. The present document concerns the
storage interface, used by Jargo's simulation engine to read and write data
describing the state of the environment. The storage interface (more precisely
the underlying data model) is responsible for guaranteeing the integrity of the
state, in other words that impossible circumstances in the real world do not
end up in the simulation data. The following is an explanation of how the data
is organized, beginning with a description of physical ridesharing
(\S\ref{sec:ridesharing-systems}), then the mathematical model to describe
physical ridesharing (\S\ref{sec:ridesharing-formulation}), and finally the SQL
schema to store the state data (\S\ref{sec:ridesharing-data-model}).  Those
interested in the implementation code can skip directly to
\S\ref{sec:implementation-overview}.

\subsection{Ridesharing Systems}
\label{sec:ridesharing-systems}
To determine the best way to organize the state data, we first start with
examining real-world ridesharing systems.  Ridesharing involves the
\emph{users} and the \emph{rules} governing their behavior. The users can be
classified into four types, shown in Table~\ref{tab:user-types}.  We use the
term \emph{customer} to refer to both Type 1 and Type 2 users, and the term
\emph{vehicle} to refer to both Type 3 and Type 4 users.  Physical users have
the properties in Table~\ref{tab:user-properties} and obey the rules in
Table~\ref{tab:user-rules}.
\begin{table}[h]
\centering
\small
\caption{Types of ridesharing users.}
\label{tab:user-types}
\begin{tabular}{|l|l|}
\hline
Type   & Description \\
\hline
Type 1 & Single customer traveling alone \\
Type 2 & Group of customers traveling together \\
\hline
Type 3 & Ridesharing vehicle with a predefined final
    destination\footnote{For example a carpooling vehicle.} \\
Type 4 & Taxi-like vehicle continually serving customers without an
    explicit destination of its own\footnote{A Type 4 vehicle could have an
    eventual destination, for example a refueling station; but if the latest
    acceptable arrival time is outside the time span of the ridesharing
    scenario of interest, the destination is not considered. Otherwise, the
    vehicle would be classified as Type 3.}. \\
\hline
\end{tabular}
\caption{Ridesharing user properties.}
\label{tab:user-properties}
\begin{tabular}{|c|p{140mm}|}
\hline
Label & Description \\
\hline
P1 & \hi{Load.} Each user has a non-zero \emph{load}, indicating a
number of needed seats. For Type 1 users the load is 1, indicating they only
need a single seat. For Type 2 users the load exceeds 1. For Type 3 and Type 4
users the load is negative, indicating they have an availability of seats. \\
\hline
P2 & \hi{Origin and Destination.} Each user has an \emph{origin} and a
\emph{destination}, except for Type 4 users that only have an origin.  For Type
1 and Type 2, the origin indicates the initial location of the customer
and the destination indicates the desired final location.  For Type 3, the
origin and destination indicate where the vehicle's ridesharing service begins
and ends.\\
\hline
P3 & \hi{Time Window.} Each user has an \emph{early time} and a
\emph{late time}, together forming the user's \emph{time window}. For a Type 1
or Type 2 customer, the time window gives the desired departure time from the
origin and the desired arrival time at the destination.  For a Type 3 or Type 4
vehicle, the time window gives the time when service begins and the latest time
that service can end. The early time precedes the late time.\\
\hline
\end{tabular}
\caption{Rules bounding user behavior.}
\label{tab:user-rules}
\begin{tabular}{|c|p{140mm}|}
\hline
Label & Description \\
\hline
P4 & \hi{Motion.} Users are bound to a network of roads, for
example the streets of a city. Only vehicles may directly travel along the
roads, whereas customers must be serviced by a vehicle. Both customers and
vehicles may enter the system at any time and anywhere.\\
\hline
P5 & \hi{Pick-ups and Drop-offs.} For a vehicle to service a customer, it
must first travel to the customer's origin to pick up the customer, and then to
the customer's destination to drop off the customer, in that order. The
customer enters the vehicle during the pick-up and exits the vehicle during the
drop-off. These visits must occur within the customer's time window\footnote{We
limit our scope to the typical case where a customer is served by only one
vehicle (no transfers).}.\\
\hline
P6 & \hi{Vehicle Seats.} When a customer enters a vehicle, the customer
occupies a number of seats equal to the customer's load. When it exits the
vehicle, it relinquishes the seats. At no time can the number of occupied seats
exceed the number of available seats in a vehicle.\\
\hline
P7 & \hi{User States.} A customer can be in one of three states at any
time: \emph{waiting} for pick-up; \emph{in-transit} following a pick-up but
before the drop-off; or \emph{arrived} at destination. A vehicle can be either
\emph{in-service} or \emph{out-of-service}.\\
\hline
\end{tabular}
\end{table}

\subsection{Ridesharing Formulation}
\label{sec:ridesharing-formulation}
We can now try to mathematically describe the system.  Users can naturally be
described by a set of values for their P1--P3 properties.  Each vehicle can
also be associated with a sequence of values describing its past and future
motion (P4); a set of values indicating when and where pick-ups and drop-offs
have occurred (P5); and a value to indicate the number of available seats at
any given time (P6). Each customer can be associated with a value indicating
its state (P7). Moreover, the ridesharing setting, namely the road network, can
be described using sets of values indicating coordinates and distances in the
network.

Now that we know what values we have, we can try to organize the data into variables
and constants and write equations to explain the relationships. If we
organize the data into \emph{relations}, we can use selection and projection
when we write the equations. These operations will turn out to be useful for
formalizing certain concepts such as pick-up and drop-off times for a customer
or the cruising and service distance for a vehicle.

\subsubsection*{Relations}
The following briefly overviews the concept of relations and introduces some
notation.
Relations can be defined in terms of \emph{sequences} and \emph{tuples}.
A sequence is an ordered list of elements.
We will write the integer sequence from $i$ to
$j$ as $i..j$. The sequence
$$(a_i)_{i\in 1..n}=a_1,a_2,...,a_{n-1},a_n$$
will be written $a_1..a_n$ or simply $a$ (without any subscript).
The number of elements in $a$ is called the \emph{length}
of $a$ and is expressed as $|a|$.
A copy $b$ of sequence $a$ but with some elements removed is called
a \emph{subsequence}.
Sequence $b$ is called a \emph{substring} of $a$
only if some $k$ exists such that $$b=a_{1+k}..a_{|b|+k},$$
in other words the elements in $b$ form a contiguous subsequence of $a$.
We call
sequence $a$ a \emph{tuple} if each element of $a$ is labeled. A
labeled element is called a \emph{component}.
A function mapping an element based on its position in the tuple to a label
is called a \emph{labeling scheme}.
Each component also has a \emph{domain} from which the component takes its value,
for example the set of real numbers.
A tuple of length $m$ is called an $m$-tuple. A 2-tuple is called a
\emph{pair}.
A tuple definition will be written as its labels surrounded by parentheses with the
domains given. Label names will be written in \texttt{typewriter} script
to avoid confusion with positional indices.

\begin{example}
\label{ex:tuple}
The sequence $a=a_\texttt{x},a_\texttt{y}$
is a 2-tuple with components named \texttt{x} and \texttt{y}.
The labeling
scheme for $a$ maps $1\rightarrow \texttt{x}$ and $2\rightarrow \texttt{y}$, with the
integers $1$ and $2$ referring to the position of the elements. A possible definition for
$a$ could be $a:=(\texttt{x},\texttt{y}),
a_\texttt{x}\in\mathbb{R}, a_\texttt{y}\in\{\textrm{cat},\textrm{dog}\}.$
\end{example}

A set of unique $m$-tuples with the same labeling scheme is called
an \emph{$m$-ary relation}, or simply relation.
Two operators can be applied onto relations\footnote{Our model is not concerned with joins.}.
The \emph{selection operator} $\sigma_P(R)$ is a function that returns a subset
$R'\subseteq R$ such that predicate $P(R'_i)$ is true for each tuple $R'_i\in R'$.
The \emph{projection} operator $\pi_L(R)$ is a function that returns a copy
$R'$ of $R$ such that each tuple $R'_i\in R'$ is distinct, and only components
with a label in set $L$ are included.

Observe that an $m$-tuple is an $m$-ary relation with one element.
The projection operator thus naturally applies to tuples. For instance, see that for
$R=R_\texttt{x},R_\texttt{y}:=(\texttt{x},\texttt{y}),$
the $\texttt{x}$ component is extracted with
$R_\texttt{x}=\pi_\texttt{x}(R)$
and the $\texttt{y}$ component is extracted with
$R_\texttt{y}=\pi_\texttt{y}(R)$.

\subsubsection{Setting}
\label{sec:setting}
Now we begin to assign variables and constants to the ridesharing
system, starting with the setting.

\hi{Time.} Time is considered to be a positive integer $1\leq t\leq H$.  A
\emph{time horizon} $H$ is introduced to bound the system.

Time will occasionally need to be operated on.  Times cannot be added, and only
a later (greater) time can subtract an earlier (lesser) time.  The difference
is called a \emph{duration}, represented by the symbol $\delta$.  Durations can
add and subtract each other to get new durations, and times can also add and
subtract durations to get new times.

\hi{Road Network.}
The road network is considered to be a directed graph $\mathcal{G}(\mathcal{V},\mathcal{E})$.
Vertices in $\mathcal{V}$ represent points along roads in the network.
A function ${V:\mathcal{V}\rightarrow \mathbb{R}^2}$ maps vertices to
$2$-dimensional latitude and longitude coordinates in the real world.
An inverse function can be used to map-match customers and vehicles to vertices.
Edges in $\mathcal{E}$ represent road segments. The pair $(a,b)\in
\mathcal{V}^2, a\neq b$ exists in $\mathcal{E}$ only if physical traffic flows from
$V(a)$ to $V(b)$, and for all $c\in \mathcal{V}\setminus\{a,b\}$ no traffic flows from
$V(a)$ to $V(c)$ and from $V(c)$ to $V(b)$.
A function ${d:\mathcal{E}\rightarrow\mathbb{R}_{>0}}$ maps edges to positive real weights
corresponding to distance along the edge. See that the
shortest-path distances between the pairs among any three vertices satisfies the
triangle inequality.

\begin{figure}[h]
\centering
\includegraphics[width=0.8\textwidth]{src/fig/road}
\caption{Portion of a road network graph showing edges (red lines) and vertices
(blue circles) overlayed on top of Manhattan (QGIS 2.18.16, Bing Aerial).
Vertices do not have to be at an intersection (orange circles, lower right).}
\label{fig:road}
\end{figure}

\hi{Paths.}
A path $p=(p_i)_{i\in 1..n}=p_1..p_n$ is a sequence of $n$ vertices
such that any two adjacent vertices are an edge, or $(p_i,p_{i+1})\in \mathcal{E}$ for
$i\in 1..(n-1)$.
A vertex or edge can appear multiple times in a path.
The \emph{path distance} is
$$\sum_{i=1}^{n-1} d(p_i, p_{i+1}).$$
Path $p$ is a \emph{shortest path} only if it minimizes the distance out of all
possible paths from $p_1$ to $p_n$.
Multiple shortest paths are possible.

\hi{Waypoints.}
Waypoints are used to describe points in time as well as space.
A waypoint is a tuple $(\texttt{t},\texttt{v})$, with the
domain of $\texttt{t}$ as $1..H$ and the domain of $\texttt{v}$ as
$\mathcal{V}$. Waypoints can be labeled in a way that will be
discussed later.

\hi{Routes.}
Routes are formed by a sequence of waypoints. A route
$w=(w_i)_{i\in 1..n}=w_1..w_n=(t_1,v_1)..(t_n,v_n)$
is defined as a sequence of $n$ waypoints such that
$t_1..t_n$ is strictly increasing and $v_1..v_n$ is a path.
%In other words it is a binary relation on time and $\mathcal{V}$.
In the spatial dimension, function
$$D(w)=\sum_{i=1}^{n-1}d(\pi_\texttt{v}(w_i),\pi_\texttt{v}(w_{i+1}))$$
gives the \emph{route distance}, analogous to path distance.
% Abandoned: wordy. Projection $\pi_\texttt{v}(w_i)$ returns the vertex component of waypoint $w_i$.
In the time dimension, function
$$\delta(w)=\pi_\texttt{t}(w_n)-\pi_\texttt{t}(w_1)$$
gives the \emph{route duration}.
%The \emph{distance} of $w$ is $D(\pi_\texttt{v}(w))$.
%The \emph{duration} of $w$ is $t_n$.
Given a time $t$,
\begin{align*}
w_{\leq t}=\textrm{sort}(\sigma_{\texttt{t}\leq t}(w))\quad\textrm{and}\quad
w_{>t}=\textrm{sort}(\sigma_{\texttt{t}>t}(w))
\end{align*}
give the \emph{traveled route} denoted $w_{\leq t}$, and the \emph{remaining
route} denoted $w_{>t}$. As the selection operator imposes no ordering on the resulting
set, a $\textrm{sort}(...)$ function is introduced to
sort a set of waypoints by time in ascending order, returning a sequence.
% From now on, any selection or projection on time is assumed to be sorted
% in this manner.
For two adjacent waypoints $w_i$ and~$w_{i+1}$, function
$$\nu(w_i,w_{i+1})=\frac{d(\pi_\texttt{v}(w_i),\pi_\texttt{v}(w_{i+1}))}
{\pi_\texttt{t}(w_{i+1})-\pi_\texttt{t}(w_i)}$$ gives the
\emph{waypoint rate}, or more intuitively the \emph{speed}.
% The unit of speed depends on the units of $d$ and time and do not have to be
% a physical velocity, such as meters per second.
As $d$ only applies to edges, $\nu$ only applies to adjacent waypoints.
Speeds can be bounded above by a value $\nu^\textrm{max}(v_i,v_{i+1})$ on each edge,
for example to describe road speed limits.
%The speed limit can be different
%on different edges, but to simplify the notation, let $\nu_{max}$ denote the limit for any edge.
%Note that duration $t_n$ and distance $D(\pi_\texttt{v}(w))$ are
%convertible through the speeds along each of the edges.

\subsubsection{Requests and Servers}
\label{sec:requests-and-servers}
Now we define the requests and servers.
The basic entity representing a ridesharing participant is the \emph{user}.  A
user is classified as a \emph{request} if it represents a Type~1 or Type~2
customer, or classified as a \emph{server} if it represents a Type~3 or Type~4
vehicle. As only vehicles can move about (P4), only servers are associated with
routes in order to describe the motions. Later, \emph{schedules} describing
pick-up and drop-off events will be defined on the routes.

\hi{User Relation}
A user $u$ is a 5-tuple defined by
${u:=(\texttt{q},\texttt{e},\texttt{l},\texttt{o},\texttt{d})}$.  The
\texttt{q} component corresponds to the user load; the \texttt{e} and
\texttt{l} components correspond to the user early and late times; the
\texttt{o} and \texttt{d} components correspond to the user origin and
destination.
From P1--P4, the domain of \texttt{q} is the non-zero integers; the domain of \texttt{e} is
$1..(H-1)$ and the domain of \texttt{l} is $(u_\texttt{e}+1)..H$; the domains
of \texttt{o} and \texttt{d} are both $\mathcal{V}$.
For a Type 4 vehicle, the destination can be set to a dummy vertex with edge
weight equal to 0 to every other vertex in the road network.

The set of all users forms the 5-ary relation $\mathcal{U}$, called
the \emph{user relation}.
The set
$\mathcal{U}_\texttt{o}=\pi_\texttt{o}(\mathcal{U})$ contains all origins and
$\mathcal{U}_\texttt{d}=\pi_\texttt{d}(\mathcal{U})$ contains all destinations.
From P1, a user can be classified as either a request or a server based on its load.

From now on as a convenience, the notation $d_u$ will be used to denote the distance of the
shortest path from $u_\texttt{o}$ to $u_\texttt{d}$ on graph $\mathcal{G}$, and
the notation $\delta_u$ will be used to denote the shortest travel duration
along $d_u$ using the speed limits $\nu^\textrm{max}$ along the shortest-path edges.

\hi{Requests.}
A request represents a Type 1 or Type 2 customer.
According to P1,
relation $\mathcal{R}\subseteq\mathcal{U}$,
$$\mathcal{R}=\sigma_{\texttt{q}>0}(\mathcal{U}),$$
% Abandoned: $$\mathcal{R}=\{r\in \mathcal{U}\mid r_\texttt{q}>0\},$$
forms the set of all requests by taking users with positive loads. The set
$\mathcal{R}_\texttt{o}=\pi_\texttt{o}(\mathcal{R})$ is the set of all request origins and
$\mathcal{R}_\texttt{d}=\pi_\texttt{d}(\mathcal{R})$ is the set of all request destinations.
%Abandoned: "corresponding" vertices
%Abandoned: Vertex $v$ is a \emph{pickup} if $v\in \mathcal{R}_o$ and it is a
%\emph{dropoff} if $v\in \mathcal{R}_d$.

\hi{Servers.}
Likewise, a server represents a Type 3 or Type 4 vehicle.
From P1, the relation $\mathcal{S}=\mathcal{U}\setminus\mathcal{R}$, or
$$\mathcal{S}=\sigma_{\texttt{q}<0}(\mathcal{U}),$$
% Abandoned: $$\mathcal{S}=\{s\in \mathcal{U}\mid s_\texttt{q}<0\},$$
forms the set of all servers. The set
$\mathcal{S}_\texttt{o}=\pi_\texttt{o}(\mathcal{S})$ is the set of all server origins and
$\mathcal{S}_\texttt{d}=\pi_\texttt{d}(\mathcal{S})$ is the set of all server destinations.
%Abandoned: The vehicle has a speed $\nu(a,b)$ along edge $(a,b)$. For
%simplicity, denote the speed as $\nu$ for all vehicles and all edges.

\hi{Routes and Schedules}
To encode vehicle motions, each server $s\in\mathcal{S}$ is associated with a
route and a schedule.  A server's route is a representation of the corresponding
vehicle's motion through the road network while a server's schedule
encodes the times and locations of customer pick-ups and drop-offs.
The schedule describes the events along the route and not any new motion,
therefore it is a subsequence of the server's route.

\hi{Server Routes.}
Let $w$ be the route for server $s$. As time
advances, the traveled route $w_{\leq t}$ encodes the server's past
motion while the remaining route $w_{>t}$ encodes the future motion.
From P2 and P3, the route is subject to two rules:
\begin{enumerate}
\item[R1.] The time component of the first waypoint equals the server's early time,
  and the time component of the last waypoint is not greater than the server's late time,
  or $\pi_\texttt{t}(w_1)=s_\texttt{e}$ and $\pi_\texttt{t}(w_{|w|})\leq s_\texttt{l}$;
\item[R2.] The vertex components of the first and last waypoints equal the
  server's origin and destination respectively, or
  $\pi_\texttt{v}(w_1)=s_\texttt{o}$ and $\pi_\texttt{v}(w_{|w|})=s_\texttt{d}$.
\end{enumerate}

\hi{Server Schedules.}
A server's schedule
$$b=(b_j)_{j\in 1..m}=(w_{i_j})_{j\in 1..m}=(t_{i_1},v_{i_1})..(t_{i_m},v_{i_m})$$
is a subsequence of the server's route $w$, with $m\leq |w|$ waypoints.
First:
\begin{enumerate}
\item[R3.] The first and last waypoints $b_1$ and $b_m$ equal the first and last
waypoints of $w$, or ${b_1=w_1}$ and ${b_m=w_{|w|}}$.
\end{enumerate}
This rule will help later when defining departure and arrival times.
Second, from P5:
\begin{enumerate}
\item[R4.] For each waypoint $b_j$ for $j\in 2..(m-1)$, the vertex component is either a
request origin or request destination, or $\pi_\texttt{v}(b_j)\in
\mathcal{R}_\texttt{o}\cup\mathcal{R}_\texttt{d}$.
\end{enumerate}
In other words, each entry or exit must occur at a customer origin or destination.

A schedule formalizes the notion of shared travel with other users, as
multiple entries and exits can overlap within the same server route.
At time $t$, the \emph{traveled schedule} denoted $b_{\leq t}$ encodes the past entries and exits and is given by
$\sigma_{\texttt{t}\leq t}(b)$. Likewise, the \emph{remaining schedule} denoted
$b_{>t}$ encodes the future entries and exits and is given by $\sigma_{\texttt{t}>t}(b)$.

\hi{Schedule Labels.}
Each waypoint in schedule $b$ has a set of labels in order to identify which
customers are entering and exiting the vehicle at the waypoint's time and location.
A labeling scheme can be applied to $b$ to determine each of the labels. The
set of all possible labels depends on the locations of the waypoints. Let
$$\mathcal{R}'=\sigma_{\texttt{o}\in\pi_\texttt{v}(b)\lor \texttt{d}\in\pi_\texttt{v}(b)}(\mathcal{R})$$
%Abandoned: $$\mathcal{R}'=\{r\in \mathcal{R}\mid
%     r_\texttt{o}\in\pi_\texttt{v}(b)\vee r_\texttt{d}\in\pi_\texttt{v}(b)\}$$
give the set of requests whose origin or destination is found
in at least one waypoint in $b$. The labeling scheme
\begin{equation*}
L:b\rightarrow \mathbb{P}(\mathcal{R}'\cup\{s\})
\end{equation*}
maps elements of $b$ to elements of the power set of $\mathcal{R}'\cup\{s\}$.
By using the power set $\mathbb{P}$,
a waypoint can have multiple labels, representing the case where multiple customers
enter or exit the vehicle at the waypoint.
The labeling scheme is subject to the following labeling rules:
\begin{enumerate}
\item[R5.] No waypoint can be labeled with $r\in\mathcal{R}'$ if a schedule for another server
already contains waypoints labeled with $r$;
\item[R6.] A waypoint $b_j\in b$ can be labeled with $r$ only if
$\pi_\texttt{v}(b_j)=r_\texttt{o}$ or $\pi_\texttt{v}(b_j)=r_\texttt{d}$;
\item[R7.] If $b_j$ is to be labeled with $r$ and $\pi_\texttt{v}(b_j)=r_\texttt{o}$, then
a second waypoint $b_{j'}$ such that $j'>j$ and
$\pi_\texttt{v}(b_{j'})=r_\texttt{d}$ must also be labeled with $r$;
\item[R8.] The time components of $b_j$ and $b_{j'}$ must be within request $r$'s time window,
formally $r_\texttt{e}\leq \pi_\texttt{t}(b_j)$ and $\pi_\texttt{t}(b_{j'})\leq r_\texttt{l}$;
\item[R9.] The number of waypoints labeled with $r$ must be exactly 0 or 2;
\item[R10.] The first and last waypoints must contain the schedule's server $s$
in their labels, and no other waypoint can be labeled with $s$.
\end{enumerate}
Rules R5--R9 express P5.  Rule R10 can be interpreted to mean that a vehicle
must ``serve itself'' at its own origin and destination.  This last rule
helps to define later concepts.

\hi{Server Relation}
By combining the routes, schedules, and labels into
a set of $(\texttt{s},\texttt{t},\texttt{v},\texttt{L})$ tuples, a
4-ary relation $\mathcal{X}$ can be formed. This relation is called the
\emph{server relation} and as will be shown soon, it is the basis for computing many common ridesharing metrics.
Each tuple associates the waypoint in the \texttt{t} and \texttt{v} components with the server
in the \texttt{s} component, along with the labels in the \texttt{L} component.
% The domain of $\texttt{s}$ is $\mathcal{S}$; the domain of $\texttt{t}$ is
% $1..H$; the domain of $\texttt{v}$ is $\mathcal{V}$; the domain of $\texttt{L}$
% is the power set $\mathbb{P}(\mathcal{U})$.

A server's route can be recovered by extracting \texttt{t} and \texttt{v}
components and sorting by time, or formally for a given server $s$, its route
is given by
$$W(\mathcal{X},s)=\textrm{sort}(\pi_{\texttt{t},\texttt{v}}(\sigma_{\texttt{s}=s}(\mathcal{X}))).$$
Similarly, a server's schedule can be recovered by
extracting only those waypoints that are labeled, formally
$$B(\mathcal{X},s)=\textrm{sort}(\pi_{\texttt{t},\texttt{v}}(\sigma_{\texttt{s}=s\land |\texttt{L}|>0}(\mathcal{X}))).$$

The server relation can be used to define the remaining physical concepts, P6 and P7.

\hi{Request Status.}
Given a request $r$, the function
\begin{equation}
\label{eq:status}
\textrm{status}(\mathcal{X},r,t)=|\sigma_{\texttt{t}\leq t\land
r\in\texttt{L}}(\mathcal{X})|
\end{equation}
gives the count of the tuples labeled with $r$
before or on a given time. From the labeling rules, the count can be only 0, 1,
or 2. See that these counts correspond to request waiting, in-transit, and arrived states
from P7, respectively.

Given a server $s$, knowing the in-transit requests for $s$ can be useful for
pricing and other rider-related
metrics. %~\cite{DBLP:conf/sigmod/ChengX017,DBLP:conf/dexa/ShiLZG17,DBLP:conf/ijcai/SantosX13}.
These requests can be easily found by
$$\mathcal{Q}(\mathcal{X},s,t)=\{r\in\mathcal{R}\mid\textrm{status}(\mathcal{X},r,t)=1
\land\pi_\texttt{s}(\sigma_{r\in\texttt{L}}(\mathcal{X}))=s\}.$$

\hi{Load Burden.}
The \emph{load burden} on $s$ can be computed using the in-transit requests by
\begin{equation}
\label{eq:load}
Q(\mathcal{X},s,t)=\sum_{r\in\mathcal{Q}(\mathcal{X},s,t)}r_\texttt{q}.
\end{equation}
From P6, server routes are subject to the additional rule:
\begin{enumerate}
\item[R11.] $Q(\mathcal{X},s,t)\leq -s_\texttt{q}$ must be true for all $s$ and $t$.
\end{enumerate}

\subsubsection{Ridesharing Metrics}
\label{sec:ridesharing-metrics}
As a benefit from using relations, a variety of metrics can now be measured by
simple operations on $\mathcal{U}$ and $\mathcal{X}$.  The following lists
common metrics found in existing ridesharing studies, but others may be possible.

\hi{Assignments.}
Server $s$ is said to be \emph{assigned to} request $r$ at time $t$ only if
$\textrm{status}(\mathcal{X},r,t)=2$. That is, the request's status is arrived at time $t$.
The set of $(s,r)$ pairs
where this property is true is called the set of \emph{assignments}, formally
\begin{equation}
\label{eq:assignments}
\textit{assignments }A(\mathcal{X},t)=
\{(s,r)\in\mathcal{S}\times \mathcal{R} \mid \textrm{status}(\mathcal{X},r,t)=2\}.
\end{equation}
Using the assignments,
\begin{align}
\label{eq:assigned-requests}
\textit{assigned requests }R^\textrm{ok}(\mathcal{X},t)&=\pi_\texttt{r}(A(\mathcal{X},t))\textrm{, and}\\
\label{eq:unassigned-requests}
\textit{unassigned requests }R^\textrm{ko}(\mathcal{X},t)&=\mathcal{R}\setminus\mathcal{R}^\textrm{ok}(\mathcal{X},t).
\end{align}
The server assigned to $r$ can be obtained with
\begin{equation}
S(\mathcal{X},r,t)=\{s\in\mathcal{S}\mid\textrm{status}(\mathcal{X},r,t)=2\},
\end{equation}
guaranteed to return only one server due to R5.
Likewise, the set of requests assigned to $s$ can be obtained with
\begin{equation}
R(\mathcal{X},s,t)=\{r\in\mathcal{R}\mid\textrm{status}(\mathcal{X},r,t)=2\}.
\end{equation}

\hi{Service rate.}
The \emph{service rate} is the number of assigned requests over the number of all requests, or
\begin{equation}
\label{eq:service-rate}
\textit{service rate }\mu(\mathcal{X},t)=\frac{|R^\textrm{ok}(\mathcal{X},t)|}{|\mathcal{R}|}.
\end{equation}

\hi{Distances.}
The \emph{base distance} is the sum of the shortest-path distances for all users, or
\begin{equation}
\label{eq:base-distance}
\textit{base distance }D^\textrm{base}(\mathcal{U})=\sum_{u\in U}d_u.
\end{equation}
The \emph{travel distance} for one server $s$ is the distance of its route,
$D(W(\mathcal{X},s))$,
and the \emph{travel duration} can be found with
$\delta(W(\mathcal{X},s))$.

For a server with route $w$, travel distance $D(w)$ can be partitioned into
\emph{cruising distance} $D_0(w)$ and
\emph{service distance} $D_1(w)$.
The cruising distance sums the distance along portions where the load burden is zero.
The service distance sums the distance along portions of $w$ where the
load burden is non-zero.
Formally, partition $w$ into a set of substrings $\Omega(w)$ such that each waypoint
in $w$ is a member of exactly one substring and that for all substrings $\omega\in \Omega$,
\begin{align}
\label{eq:slack}\textrm{either }Q(\mathcal{X},s,t)&=0\textrm{ is true for all }t\in \pi_\texttt{t}(\omega),\\
\label{eq:block}\textrm{or }Q(\mathcal{X},s,t)&>0\textrm{ is true for all }t\in \pi_\texttt{t}(\omega).
\end{align}
%Observe that Eqs.~\ref{eq:slack}~and~\ref{eq:block}
%formalize concepts similar to the intuitive
%\emph{slack periods} and \emph{schedule blocks} in~\cite{jaw:1986}.
The equations can be used to partition $\Omega(w)$ into two subsets,
\begin{align*}
\Omega_0(w)&=\{\omega\in \Omega(w)\mid \omega\textrm{ satisfies Eq.~\ref{eq:slack}}\}\textrm{ and }\\
\Omega_1(w)&=\{\omega\in \Omega(w)\mid \omega\textrm{ satisfies Eq.~\ref{eq:block}}\}.
\end{align*}
The distances of each of the substrings in each subset can be summed
to get
$$D_0(w)=\sum_{\omega\in \Omega_0(w)} D(\omega)\quad\textrm{and}\quad
  D_1(w)=\sum_{\omega\in \Omega_1(w)} D(\omega).$$
These distances are written as
\begin{align}
\label{eq:cruising-distance}
\textit{cruising distance }D^\textrm{cruise} (\mathcal{X},s)&=D_0(W(\mathcal{X},s)),\textrm{ and}\\
\label{eq:service-distance}
\textit{service distance } D^\textrm{service}(\mathcal{X},s)&=D_1(W(\mathcal{X},s)).
\end{align}

\hi{Detours and Delays.}
In physical terms, the \emph{detour route} for a customer is the portion of a vehicle's
route between when it visits the customer's origin and destination. Formally, let
%\item $d_r$ be the distance of the shortest path from $r_\texttt{o}$ to $r_\texttt{d}$;
$w=W(\mathcal{X},S(\mathcal{X},r,H))$ be the route of the server assigned to $r$.
The detour route $\Delta W(\mathcal{X},r)$ is an $m$-length substring of $w$ given by
$\Delta W(\mathcal{X},r)=w_{1+k}..w_{m+k}$ such that for some $k$,
\begin{itemize}
\item $\Delta W(\mathcal{X},r)$ begins at $r_\texttt{o}$, or $\pi_\texttt{v}(w_{1+k})=r_\texttt{o}$,
\item $\Delta W(\mathcal{X},r)$ ends at $r_\texttt{d}$, or $\pi_\texttt{v}(w_{m+k})=r_\texttt{d}$, and
\item the first and last waypoints of $\Delta W(\mathcal{X},r)$ are labeled with $r$, or $r\in\pi_\texttt{L}(w_{1+k})\cap\pi_\texttt{L}(w_{m+k})$.
\end{itemize}
Observe that due to the labeling rules, only one value of $k$ can satisfy these
conditions. The first and last waypoints $w_{1+k}$ and $w_{m+k}$ can be found by
the equations on users,
\begin{align}
\label{eq:pickup}
\textrm{pickup}(\mathcal{X},u)&=\pi_{\texttt{t},\texttt{v}}(\sigma_{\texttt{v}=u_\texttt{o}\land u\in\texttt{L}}(\mathcal{X}))\textrm{, and}\\
\label{eq:dropoff}
\textrm{dropoff}(\mathcal{X},u)&=\pi_{\texttt{t},\texttt{v}}(\sigma_{\texttt{v}=u_\texttt{d}\land u\in\texttt{L}}(\mathcal{X})),
\end{align}
by substituting $r$ for $u$.
Note that if a server is substituted for $u$, these equations give the start and
end waypoints of the server's route due to R3 and R10.
These two equations can also be used to give two times for
any user,
\begin{align}
\label{eq:departure-time}
\textit{departure time }t^\textrm{depart}(\mathcal{X},u)&=\pi_\texttt{t}(\textrm{pickup}(\mathcal{X},u))\textrm{, and}\\
\label{eq:arrival-time}
\textit{arrival time }t^\textrm{arrive}(\mathcal{X},u)&=\pi_\texttt{t}(\textrm{dropoff}(\mathcal{X},u)).
\end{align}
In the real world, the time until a vehicle picks up a customer can be of interest.
This \emph{pick-up delay} can be found with
\begin{equation}
\label{eq:pick-up delay}
\textit{pick-up delay }\delta^\textrm{pickup}(\mathcal{X},r)=\pi_\texttt{t}(\textrm{pickup}(\mathcal{X},r))-r_\texttt{e}.
\end{equation}

The detour route $\Delta W(\mathcal{X},r)$ can only apply to assigned requests. If
a detour route exists, then
the \emph{transit} distance and duration are
\begin{align}
\label{eq:transit-distance}
\textit{transit distance }D^\textrm{transit}(\mathcal{X},r)&=D(\Delta W(\mathcal{X},r))\textrm{, and}\\
\label{eq:transit-duration}
\textit{transit duration }\delta^\textrm{transit}(\mathcal{X},r)&=\delta(\Delta W(\mathcal{X},r)).
\end{align}
Similarly, the \emph{detour} distance and duration are
\begin{align}
\label{eq:detour-distance}
\textit{detour distance }D^\textrm{detour}(\mathcal{X},r)&=D^\textrm{transit}(\mathcal{X},r)-d_r\textrm{, and}\\
\label{eq:detour-duration}
\textit{detour duration }\delta^\textrm{detour}(\mathcal{X},r)&=\delta^\textrm{transit}(\mathcal{X},r)-\delta_r.
\end{align}
Finally, the \emph{travel duration} is the sum of the pick-up and transit durations,
\begin{equation}
\label{eq:travel-duration}
\textit{travel duration }\delta^\textrm{travel}(\mathcal{X},r)=\delta^\textrm{pickup}(\mathcal{X},r)+\delta^\textrm{transit}(\mathcal{X},r)
=\pi_\texttt{t}(\textrm{dropoff}(\mathcal{X},r))-r_\texttt{e}.
\end{equation}

\hi{Utilization.}
The percentage of servers that are assigned to at least one request is given by
\begin{equation}
\label{eq:server-utilization}
\textit{server utilization }\rho^\textrm{server}(\mathcal{X})=\frac{|\pi_\texttt{s}(\mathcal{A}(\mathcal{X}))|}{|\mathcal{S}|}.
\end{equation}
The distance utilization is
\begin{equation}
\label{eq:distance-utilization}
\textit{distance utilization }\rho^\textrm{distance}(\mathcal{X})=
\frac{\sum_{s\in\mathcal{S}}D^\textrm{service}(\mathcal{X},s)}
{\sum_{s\in\mathcal{S}}D(\mathcal{X},s)}.
\end{equation}

\subsection{Ridesharing Data Model}
\label{sec:ridesharing-data-model}
The simple constraints allowed by the SQL standard\footnote{ISO/IEC 9075}
(\texttt{CHECK}, \texttt{UNIQUE}, \texttt{NOT NULL}, \texttt{FOREIGN KEY}) are
unable to express the complex ridesharing properties
(\S\ref{sec:ridesharing-systems}, P1--P7) and rules
(\S\ref{sec:ridesharing-formulation}, R1--R11), and consequently a direct
``translation'' of the ridesharing relations into SQL is not possible without
either making code extensions to SQL or reorganizing the relational ridesharing
model.

The following schema can be implemented entirely in standard SQL without any
code extensions while staying faithful to the model.  In this schema,
\textit{tables} capture the descriptive elements of the model and
\textit{views} express the analytical measures.  Tables are further organized
into \emph{property}, \emph{solution}, and \emph{constraint} tables.  Property
tables store the road network $\mathcal{G}$ (\S\ref{sec:setting}) and the user
relation $\mathcal{U}$ (\S\ref{sec:requests-and-servers}).  Solution tables
store the server relation $\mathcal{X}$ (\S\ref{sec:requests-and-servers}).
Constraint tables store copies of data from other tables for validation
purposes.  The views are mostly defined on the constraint tables.

Diagrams of the SQL tables are included in this section. In the diagrams,
primary keys are indicated in italics. Elsewhere, column names are
distinguished by \textsf{sans serif} script.  Parentheses are used to logically
group together columns.  A parent table next to a group of columns indicates
foreign key. In SQL, foreign keys must reference their values from the primary
key of the parent table. Many of the table diagrams contain duplicate columns
(for example, \textsf{sid} shows up three times in Table W).  These duplicates
are included for illustrating the foreign key relationships, but in practice
the duplicates are implemented as single columns participating in multiple
foreign keys.

As a feature of literate programming, actual SQL statements used by the storage
interface are also shown. References in the text to named constraints in the
SQL will be written in [[typewriter]] script.

\subsubsection{Table V and E (Road Network Tables)}
Each vertex $v\in\mathcal{V}$ is stored in Table V along with its coordinates
$V(v)$ while each edge $(a,b)\in\mathcal{E}$ is stored in Table E along with
its weight $d(a,b)$ and speed limit $\nu^\textrm{max}(a,b)$.  Table V thus has
three columns, storing $v$ in primary key column \textsf{v} ([[P1]]) and its
coordinates in column \textsf{lng} and \textsf{lat}.  Likewise, Table E has
four columns, storing $a$ and $b$ in column \textsf{v1} and \textsf{v2},
$d(a,b)$ in column \textsf{dd}, and $\nu^\textrm{max}(a,b)$ in column
\textsf{nu}.  The four columns together form the primary key ([[P2]]) in order
to be referenced by later tables.  Foreign keys on \textsf{v1} ([[F1]]) and
\textsf{v2} ([[F2]]) referencing Table V validate that $a$ and $b$ are actual
vertices.
\begin{table}[h]
\centering
\small
\begin{tabular}{|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{2}{|c|}{Table V (Vertices)}\\
\hline
\rowcolor{TableHeader}
Column & Description\\
\hline
\textit{v} & Vertex $v\in\mathcal{V}$\\
\hline
lng & \multirow{2}{*}{Vertex coordinate $V(v)$}\\
lat & \\
\hline
\end{tabular}
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{Table E (Edges)}\\
\hline
\rowcolor{TableHeader}
Column & Parent & Description\\
\hline
\textit{v1} & Table V & \multirow{2}{*}{Edge $(a, b)\in\mathcal{E}$} \\
\cline{2-2}
\textit{v2} & Table V & \\
\hline
\textit{dd} & & Weight $d(a,b)$\\
\hline
\textit{nu} & & Max. speed $\nu^\textrm{max}(a,b)$\\
\hline
\end{tabular}
\end{table}
<<Create Table V statement>>=
"CREATE TABLE V ("
  + "v   int  CONSTRAINT P1 PRIMARY KEY,"
  + "lng int  CONSTRAINT C1 NOT NULL,"
  + "lat int  CONSTRAINT C2 NOT NULL,"
  + "CONSTRAINT C3 CHECK (lng BETWEEN -1800000000 AND 1800000000),"
  + "CONSTRAINT C4 CHECK (lat BETWEEN  -900000000 AND  900000000)"
  + ")"
@ We consider vertex 0 to be a dummy vertex where any edged formed by 0 has no
weight. To implement the dummy vertex, we add a constraint ([[C11]]) that
\textsf{dd} must be 0 if either \textsf{v1} or \textsf{v2} is 0.
<<Create Table E statement>>=
"CREATE TABLE E ("
  + "v1  int  CONSTRAINT C5 NOT NULL,"
  + "v2  int  CONSTRAINT C6 NOT NULL,"
  + "dd  int  CONSTRAINT C7 NOT NULL,"
  + "nu  int  CONSTRAINT C8 NOT NULL,"
  + "CONSTRAINT F1 FOREIGN KEY (v1) REFERENCES V (v),"
  + "CONSTRAINT F2 FOREIGN KEY (v2) REFERENCES V (v),"
  + "CONSTRAINT P2 PRIMARY KEY (v1, v2, dd, nu),"
  + "CONSTRAINT C9 CHECK (nu >= 0),"
  + "CONSTRAINT C10 CHECK (v1 <> v2),"
  + "CONSTRAINT C11 CHECK ("
  + "  CASE WHEN v1 = 0 OR v2 = 0"
  + "    THEN dd = 0"
  + "    ELSE dd > 0"
  + "  END"
  + ")"
  + ")"
@

\subsubsection{Table UQ, UE, UL, UO, UD, and UB (User Tables)}
To allow other tables to reference specific user components, the user relation
is partitioned into five 2-column tables, UQ, UE, UL, UO, and UD, by taking
projections on the respective \texttt{q}, \texttt{e}, \texttt{l}, \texttt{o},
and \texttt{d} components. Each row is a key-value pair, storing a unique
\textsf{uid} for user identification as the key alongside the component value,
and each row is also its own primary key.  A sixth table UB is introduced to
store base costs for computing $D^\textrm{base}$ and $\rho^\textrm{distance}$
(\S\ref{sec:ridesharing-metrics}).  Table UO and UD can be referenced to Table
V to validate against property P2 and rule P4.
\begin{table}[h]
\centering
\small
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{User Tables}\\
\hline
\rowcolor{TableHeader}
Table & Columns & Description \\
\hline
UQ & \textit{uid}, \textit{val} & User load $u_\texttt{q}$ \\
UE & \textit{uid}, \textit{val} & User early time $u_\texttt{e}$ \\
UL & \textit{uid}, \textit{val} & User late time $u_\texttt{l}$ \\
UO & \textit{uid}, \textit{val} & User origin $u_\texttt{o}$ \\
UD & \textit{uid}, \textit{val} & User destination $u_\texttt{d}$ \\
UB & \textit{uid}, \textit{val} & User base cost $d_u$ \\
\hline
\end{tabular}
\end{table}
<<Create Table UQ statement>>=
"CREATE TABLE UQ ("
  + "uid int  CONSTRAINT C12 NOT NULL,"
  + "uq  int  CONSTRAINT C13 NOT NULL,"
  + "CONSTRAINT C14 UNIQUE (uid),"
  + "CONSTRAINT C15 CHECK (uq != 0),"
  + "CONSTRAINT P3 PRIMARY KEY (uid, uq)"
  + ")"
@
<<Create Table UE statement>>=
"CREATE TABLE UE ("
  + "uid int  CONSTRAINT C16 NOT NULL,"
  + "ue  int  CONSTRAINT C17 NOT NULL,"
  + "CONSTRAINT C18 CHECK (ue BETWEEN 0 AND 86400000),"
  + "CONSTRAINT C19 UNIQUE (uid),"
  + "CONSTRAINT P4 PRIMARY KEY (uid, ue)"
  + ")"
@
<<Create Table UL statement>>=
"CREATE TABLE UL ("
  + "uid int  CONSTRAINT C20 NOT NULL,"
  + "ul  int  CONSTRAINT C21 NOT NULL,"
  + "CONSTRAINT C22 UNIQUE (uid),"
  + "CONSTRAINT C23 CHECK (ul BETWEEN 0 AND 86400000),"
  + "CONSTRAINT P5 PRIMARY KEY (uid, ul)"
  + ")"
@
<<Create Table UO statement>>=
"CREATE TABLE UO ("
  + "uid int  CONSTRAINT C24 NOT NULL,"
  + "uo  int  CONSTRAINT C25 NOT NULL,"
  + "CONSTRAINT F3 FOREIGN KEY (uo) REFERENCES V (v),"
  + "CONSTRAINT C26 UNIQUE (uid),"
  + "CONSTRAINT P6 PRIMARY KEY (uid, uo)"
  + ")"
@
<<Create Table UD statement>>=
"CREATE TABLE UD ("
  + "uid int  CONSTRAINT C27 NOT NULL,"
  + "ud  int  CONSTRAINT C28 NOT NULL,"
  + "CONSTRAINT F4 FOREIGN KEY (ud) REFERENCES V (v),"
  + "CONSTRAINT C29 UNIQUE (uid),"
  + "CONSTRAINT P7 PRIMARY KEY (uid, ud)"
  + ")"
@
<<Create Table UB statement>>=
"CREATE TABLE UB ("
  + "uid int  CONSTRAINT C30 NOT NULL,"
  + "ub  int  CONSTRAINT C31 NOT NULL,"
  + "CONSTRAINT C32 CHECK (ub >= 0),"
  + "CONSTRAINT C33 UNIQUE (uid),"
  + "CONSTRAINT P8 PRIMARY KEY (uid, ub)"
  + ")"
@

\subsubsection{Table W (Routes Table)}
Table W has eight columns, \textsf{sid}, \textsf{se}, \textsf{t1}, \textsf{v1},
\textsf{t2}, \textsf{v2}, \textsf{dd}, and \textsf{nu}.  The \texttt{s},
\texttt{t}, and \texttt{v} components of $\mathcal{X}$ are stored in the
(\textsf{sid}, \textsf{t2}, \textsf{v2}) columns.  By definition, the sequence
of vertices in a route must form a path and the speed of adjacent waypoints
cannot exceed the limit $\nu^\textrm{max}$.  To enforce these rules, the
\emph{predecessor} waypoint is stored in the (\textsf{sid}, \textsf{t1},
\textsf{v1}) columns.  The (\textsf{v1}, \textsf{v2}) columns can thus identify
an edge. Columns \textsf{dd} and \textsf{nu} are added to store the weight and
speed limit on the edge, and (\textsf{v1}, \textsf{v2}, \textsf{dd},
\textsf{nu}) is referenced by foreign key to Table E ([[F19]]) to validate the
values. A row-level \texttt{CHECK} constraint ([[C56]]) validates that the
speed $\textsf{dd}/(\textsf{t2}-\textsf{t1})$ is not greater than the maximum
free-flow speed, \textsf{nu}.
\begin{table}[h]
\centering
\small
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{Table W (Routes)} \\
\hline
\rowcolor{TableHeader}
Col. & Parent & Description \\
\hline
\textit{sid} & Table S & Identification for server $s\in\mathcal{S}$ \\
\hline
sid & \multirow{2}{*}{Table UE} & \multirow{2}{*}{Server early time $s_\texttt{e}$} \\
se & & \\
\hline
sid & \multirow{3}{*}{Table W} & \multirow{3}{*}{Predecessor waypoint $w_{i-1}$} \\
t1 & & \\
v1 & & \\
\hline
\textit{t2} & & \multirow{2}{*}{Waypoint $w_i$} \\
\textit{v2} & & \\
\hline
v1 & \multirow{4}{*}{Table E} & \multirow{4}{*}{Properties of edge $(\pi_\texttt{v}(w_{i-1}),\pi_\texttt{v}(w_i))$} \\
v2 & & \\
dd & & \\
nu & & \\
\hline
\end{tabular}
\end{table}
The below items are easily implemented in SQL and establish that each
(\textsf{sid}, \textsf{t1}, \textsf{v1}) is indeed the predecessor to
(\textsf{sid}, \textsf{t2}, \textsf{v2}) in the same row:
\begin{enumerate}
\item The predecessor (\textsf{sid}, \textsf{t1}, \textsf{v1}) must reference
an existing waypoint (\textsf{sid}, \textsf{t2}, \textsf{v2}) from the table
([[F20]]);
\item Out of all rows, (\textsf{sid}, \textsf{t1}) must be unique and
(\textsf{sid}, \textsf{t2}) must be unique ([[C54]], [[C55]]);
\item Column \textsf{t2} and \textsf{v2} cannot be null ([[C52]], [[C53]]);
\item Unless \textsf{t2} is equal to the server's early time, \textsf{t1}
cannot be null and it must be less than \textsf{t2}, otherwise \textsf{t1},
\textsf{v1}, \textsf{dd}, and \textsf{nu} must all be null ([[C56]]).
\end{enumerate}
The (\textsf{sid}, \textsf{t2}, \textsf{v2}) columns are the primary key
([[P11]]) in order to allow the self-referencing foreign key in the first item.
The last item handles the case where the first waypoint in a server's route has
no predecessor. Only in this case are \textsf{t1}, \textsf{v1}, \textsf{dd},
and \textsf{nu} are allowed to be null.  From rule R1, the first waypoint is
detected by checking if \textsf{t2} is equal to the server's early time, stored
in column \textsf{se}. The (\textsf{sid}, \textsf{se}) columns are referenced
to UE to validate the early time ([[F18]]).
<<Create Table W statement>>=
"CREATE TABLE W ("
  + "sid int  CONSTRAINT C50 NOT NULL,"
  + "se  int  CONSTRAINT C51 NOT NULL,"
  + "t1  int  ,"
  + "v1  int  ,"
  + "t2  int  CONSTRAINT C52 NOT NULL,"
  + "v2  int  CONSTRAINT C53 NOT NULL,"
  + "dd  int ,"
  + "nu  int ,"
  + "CONSTRAINT P11 PRIMARY KEY (sid, t2, v2),"
  + "CONSTRAINT F17 FOREIGN KEY (sid) REFERENCES S,"
  + "CONSTRAINT F18 FOREIGN KEY (sid, se) REFERENCES UE (uid, ue),"
  + "CONSTRAINT F19 FOREIGN KEY (v1, v2, dd, nu) REFERENCES E INITIALLY DEFERRED,"
  + "CONSTRAINT F20 FOREIGN KEY (sid, t1, v1) REFERENCES W (sid, t2, v2) INITIALLY DEFERRED,"
  + "CONSTRAINT C54 UNIQUE (sid, t1),"
  + "CONSTRAINT C55 UNIQUE (sid, t2),"
  + "CONSTRAINT C56 CHECK ("
  + "  CASE WHEN t1 IS NULL"
  + "    THEN t2 = se AND v1 IS NULL AND dd IS NULL AND nu IS NULL"
  + "    ELSE dd/(t2-t1) <= nu AND t1 < t2"
  + "  END"
  + ") INITIALLY DEFERRED"
  + ")"
@

\subsubsection{Table PD (Labels Table)}
Table PD (for ``pick-ups and drop-offs'') contains four columns, \textsf{sid},
\textsf{t2}, \textsf{v2}, and \textsf{rid}.  The (\textsf{sid}, \textsf{t2},
\textsf{v2}) columns reference Table W ([[F23]]), and the \textsf{rid} column
indicates the label on that waypoint.  Each row is its own primary key
([[P12]]) in order to be referenced by the CPD constraint table.  A waypoint
can have multiple labels simply by listing the waypoint multiple times with
different values of \textsf{rid}.
\begin{table}[h]
\centering
\small
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{Table PD (Pick-up and Drop-off Labels)}\\
\hline
\rowcolor{TableHeader}
Col. & Parent & Description \\
\hline
\textit{sid} & \multirow{3}{*}{Table W} & \multirow{3}{*}{Waypoint $w_i$ (schedule element $b_j$)} \\
\textit{t2} & & \\
\textit{v2} & & \\
\hline
\textit{rid} & Table R & Identification for request $r\in\mathcal{R}$ \\
\hline
\end{tabular}
\end{table}
<<Create Table PD statement>>=
"CREATE TABLE PD ("
  + "sid int  CONSTRAINT C57 NOT NULL,"
  + "t2  int  CONSTRAINT C58 NOT NULL,"
  + "v2  int  CONSTRAINT C59 NOT NULL,"
  + "rid int  CONSTRAINT C60 NOT NULL,"
  + "CONSTRAINT P12 PRIMARY KEY (sid, t2, v2, rid),"
  + "CONSTRAINT F21 FOREIGN KEY (sid) REFERENCES S,"
  + "CONSTRAINT F22 FOREIGN KEY (rid) REFERENCES R,"
  + "CONSTRAINT F23 FOREIGN KEY (sid, t2, v2) REFERENCES W INITIALLY DEFERRED"
  + ")"
@

\subsubsection{Table S and R (User Constraint Tables)}
Table S and Table R enforce the remaining user constraints.  Both tables have
six columns, one for each of \textsf{uq}, \textsf{ue}, \textsf{ul},
\textsf{uo}, \textsf{ud}, and \textsf{ub}, to store user data. A seventh column
stores the user identifier as the primary key. The identifier is stored in the
\textsf{sid} column for Table S and the \textsf{rid} column for Table R.  Each
(\textsf{sid}, column) or (\textsf{rid}, column) pair references the
corresponding user property table, for example (\textsf{sid}, \textsf{uq})
references Table UQ.
% An application must populate S and R for the \textsf{sid} and \textsf{rid} foreign keys in W and PD.

Properties P1 and P3 that could not be enforced in the user tables are now
enforced through simple constraints on S and R.  A \texttt{CHECK} constraint
validates that \textsf{uq} is less than 0 in Table S ([[C40]]), and another
\texttt{CHECK} constraint validates it is greater than 0 in Table R ([[C48]]),
corresponding to servers and requests (property P1). Likewise, a \texttt{CHECK}
constraint validates that \textsf{ue} is less than \textsf{ul} ([[C41]],
[[C49]]) (property P3). None of the columns can be null to prevent incomplete
users.
\begin{table}[h]
\centering
\small
\begin{tabular}{|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{2}{|c|}{User Constraint Tables}\\
\hline
\rowcolor{TableHeader}
Table & Columns \\
\hline
Table S & \textit{sid}, sq, se, sl, so, sd, sb \\
Table R & \textit{rid}, rq, re, rl, ro, rd, rb \\
\hline
\end{tabular}
\end{table}
<<Create Table S statement>>=
"CREATE TABLE S ("
  + "sid int  CONSTRAINT P9 PRIMARY KEY,"
  + "sq  int  CONSTRAINT C34 NOT NULL,"
  + "se  int  CONSTRAINT C35 NOT NULL,"
  + "sl  int  CONSTRAINT C36 NOT NULL,"
  + "so  int  CONSTRAINT C37 NOT NULL,"
  + "sd  int  CONSTRAINT C38 NOT NULL,"
  + "sb  int  CONSTRAINT C39 NOT NULL,"
  + "CONSTRAINT C40 CHECK (sq < 0),"
  + "CONSTRAINT F5 FOREIGN KEY (sid, sq) REFERENCES UQ (uid, uq),"
  + "CONSTRAINT F6 FOREIGN KEY (sid, se) REFERENCES UE (uid, ue),"
  + "CONSTRAINT F7 FOREIGN KEY (sid, sl) REFERENCES UL (uid, ul),"
  + "CONSTRAINT F8 FOREIGN KEY (sid, so) REFERENCES UO (uid, uo),"
  + "CONSTRAINT F9 FOREIGN KEY (sid, sd) REFERENCES UD (uid, ud),"
  + "CONSTRAINT F10 FOREIGN KEY (sid, sb) REFERENCES UB (uid, ub),"
  + "CONSTRAINT C41 CHECK (se < sl)"
  + ")"
@
<<Create Table R statement>>=
"CREATE TABLE R ("
  + "rid int  CONSTRAINT P10 PRIMARY KEY,"
  + "rq  int  CONSTRAINT C42 NOT NULL,"
  + "re  int  CONSTRAINT C43 NOT NULL,"
  + "rl  int  CONSTRAINT C44 NOT NULL,"
  + "ro  int  CONSTRAINT C45 NOT NULL,"
  + "rd  int  CONSTRAINT C46 NOT NULL,"
  + "rb  int  CONSTRAINT C47 NOT NULL,"
  + "CONSTRAINT C48 CHECK (rq > 0),"
  + "CONSTRAINT F11 FOREIGN KEY (rid, rq) REFERENCES UQ (uid, uq),"
  + "CONSTRAINT F12 FOREIGN KEY (rid, re) REFERENCES UE (uid, ue),"
  + "CONSTRAINT F13 FOREIGN KEY (rid, rl) REFERENCES UL (uid, ul),"
  + "CONSTRAINT F14 FOREIGN KEY (rid, ro) REFERENCES UO (uid, uo),"
  + "CONSTRAINT F15 FOREIGN KEY (rid, rd) REFERENCES UD (uid, ud),"
  + "CONSTRAINT F16 FOREIGN KEY (rid, rb) REFERENCES UB (uid, ub),"
  + "CONSTRAINT C49 CHECK (re < rl)"
  + ")"
@

\subsubsection{Table CW (Route Endpoint Constraints Table)}
Table CW stores the start and end waypoints of each server route.  The table
has nine columns, \textsf{sid}, \textsf{se}, \textsf{sl}, \textsf{so},
\textsf{sd}, \textsf{ts}, \textsf{vs}, \textsf{te}, and \textsf{ve}.  The start
waypoint is stored in (\textsf{sid}, \textsf{ts}, \textsf{vs}) and the end
waypoint is stored in (\textsf{sid}, \textsf{te}, \textsf{ve}). Both of these
groups reference the (\textsf{sid}, \textsf{t2}, \textsf{v2}) columns in Table
W ([[F29]], [[F30]]).  The \textsf{sid} column is set to be \texttt{UNIQUE}
([[C70]]) to prevent a server from being listed multiple times and having
``multiple'' start and end waypoints.  Rule R1 is enforced by adding the
server's early and late times into columns \textsf{se} and \textsf{sl},
referencing (\textsf{sid}, \textsf{se}) to UE ([[F25]]) and (\textsf{sid},
\textsf{sl}) to UL ([[F26]]).  A \texttt{CHECK} constraint validates the start
time \textsf{ts} equals \textsf{se} ([[C71]]) and another one validates the end
time \textsf{te} is not beyond \textsf{sl} ([[C72]]).  Rule 2 is enforced by
adding the server's origin and destination into columns \textsf{so} and
\textsf{sd}, referencing (\textsf{sid}, \textsf{so}) to UO ([[F27]]) and
(\textsf{sid}, \textsf{sd}) to UD ([[F28]]).  Likewise, constraint [[C71]]
validates the start location \textsf{vs} equals \textsf{so} and [[C72]]
validates the end location \textsf{ve} equals \textsf{sd}.
\begin{table}[h]
\centering
\small
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{Table CW (Route Endpoint Constraints)}\\
\hline
\rowcolor{TableHeader}
Col. & Parent & Description\\
\hline
sid & \multirow{2}{*}{Table UE} & \multirow{2}{*}{Server early time $s_\texttt{e}$} \\
se & & \\
\hline
sid & \multirow{2}{*}{Table UL} & \multirow{2}{*}{Server late time $s_\texttt{l}$} \\
sl & & \\
\hline
sid & \multirow{2}{*}{Table UO} & \multirow{2}{*}{Server origin $s_\texttt{o}$} \\
so & &\\
\hline
sid & \multirow{2}{*}{Table UD} & \multirow{2}{*}{Server destination $s_\texttt{d}$} \\
sd & & \\
\hline
\textit{sid} & \multirow{3}{*}{Table W} & \multirow{3}{*}{Server $\textrm{pickup}(\mathcal{X},s)$}\\
\textit{ts} & & \\
vs & & \\
\hline
sid & \multirow{3}{*}{Table W} & \multirow{3}{*}{Server $\textrm{dropoff}(\mathcal{X},s)$}\\
\textit{te} & & \\
ve & & \\
\hline
\end{tabular}
\end{table}
<<Create Table CW statement>>=
"CREATE TABLE CW ("
  + "sid int  CONSTRAINT C61 NOT NULL,"
  + "se  int  CONSTRAINT C62 NOT NULL,"
  + "sl  int  CONSTRAINT C63 NOT NULL,"
  + "so  int  CONSTRAINT C64 NOT NULL,"
  + "sd  int  CONSTRAINT C65 NOT NULL,"
  + "ts  int  CONSTRAINT C66 NOT NULL,"
  + "vs  int  CONSTRAINT C67 NOT NULL,"
  + "te  int  CONSTRAINT C68 NOT NULL,"
  + "ve  int  CONSTRAINT C69 NOT NULL,"
  + "CONSTRAINT C70 UNIQUE (sid),"
  + "CONSTRAINT P13 PRIMARY KEY (sid, ts, te),"
  + "CONSTRAINT F24 FOREIGN KEY (sid) REFERENCES S,"
  + "CONSTRAINT F25 FOREIGN KEY (sid, se) REFERENCES UE (uid, ue),"
  + "CONSTRAINT F26 FOREIGN KEY (sid, sl) REFERENCES UL (uid, ul),"
  + "CONSTRAINT F27 FOREIGN KEY (sid, so) REFERENCES UO (uid, uo),"
  + "CONSTRAINT F28 FOREIGN KEY (sid, sd) REFERENCES UD (uid, ud),"
  + "CONSTRAINT F29 FOREIGN KEY (sid, ts, vs) REFERENCES W (sid, t2, v2) INITIALLY DEFERRED,"
  + "CONSTRAINT F30 FOREIGN KEY (sid, te, ve) REFERENCES W (sid, t2, v2) INITIALLY DEFERRED,"
  + "CONSTRAINT C71 CHECK (ts = se AND vs = so),"
  + "CONSTRAINT C72 CHECK (te <= sl AND ve = sd),"
  + "CONSTRAINT C73 CHECK (ts < te)"
  + ")"
@

\subsubsection{Table CPD (Label Constraints Table)}
Table CPD enforces the pick-up and drop-off rules R5--R9. It contains twelve
columns, \textsf{sid}, \textsf{ts}, \textsf{te}, \textsf{tp}, \textsf{vp},
\textsf{td}, \textsf{vd}, \textsf{rid}, \textsf{re}, \textsf{rl}, \textsf{ro},
and \textsf{rd}.  The (\textsf{sid}, \textsf{tp}, \textsf{vp}, \textsf{rid})
and (\textsf{sid}, \textsf{td}, \textsf{vd}, \textsf{rid}) groups reference
rows in Table PD ([[F34]], [[F35]]) and represent pick-up and drop-off
waypoints, respectively.  Rules R5 and R9 are enforced by setting \textsf{rid}
to \texttt{UNIQUE} ([[C86]]), in other words any request identified in
\textsf{rid} has only one pick-up and drop-off pair.  Rule R6 is enforced by
adding columns for the request origin \textsf{ro} and destination \textsf{rd}
and validating that pick-up vertex \textsf{vp} equals \textsf{ro} ([[C89]]) and
drop-off vertex \textsf{vd} equals \textsf{rd} ([[C90]]). The (\textsf{rid},
\textsf{ro}) columns are referenced to UO ([[F38]]) and (\textsf{rid},
\textsf{rd}) are referenced to UD ([[F39]]).  Rules R7 and R8 are enforced by
simple \texttt{CHECK} constraints. Both \textsf{tp} and \textsf{td} are
validated to be between request early time \textsf{re} and late time
\textsf{rl} ([[C89]], [[C90]]). The (\textsf{rid}, \textsf{re}) and
(\textsf{rid}, \textsf{rl}) columns are added and referenced to UE and UL
([[F36]], [[F37]]) for this purpose.

So far, nothing prevents \textsf{tp} and \textsf{td} from falling outside the
server's start and end times. These times are thus added into (\textsf{sid},
\textsf{ts}, \textsf{te}) columns, referenced to Table CW ([[F33]]).  Then,
\texttt{CHECK} constraints can validate that \textsf{tp} and \textsf{td} are
within the start time \textsf{ts} and the end time \textsf{te} ([[C87]],
[[C88]]).
\begin{table}[t]
\centering
\small
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{Table CPD (Pick-up and Drop-off Constraints)}\\
\hline
\rowcolor{TableHeader}
Col. & Parent & Description \\
\hline
sid & \multirow{3}{*}{Table CW} & \multirow{3}{48mm}{Server start and end times $\pi_\texttt{t}(\textrm{pickup}(\mathcal{X},s))$, $\pi_\texttt{t}(\textrm{dropoff}(\mathcal{X},s))$} \\
ts & & \\
te & & \\
\hline
\textit{sid} & \multirow{4}{*}{Table PD} & \multirow{4}{*}{Request $\textrm{pickup}(\mathcal{X},r)$} \\
\textit{tp} & & \\
vp & & \\
rid & & \\
\hline
sid & \multirow{4}{*}{Table PD} & \multirow{4}{*}{Request $\textrm{dropoff}(\mathcal{X},r)$} \\
\textit{td} & & \\
vd & & \\
\textit{rid} & & \\
\hline
rid & \multirow{2}{*}{Table UE} & \multirow{2}{*}{Request early time $r_\texttt{e}$} \\
re & & \\
\hline
rid & \multirow{2}{*}{Table UL} & \multirow{2}{*}{Request late time $r_\texttt{l}$} \\
rl & & \\
\hline
rid & \multirow{2}{*}{Table UO} & \multirow{2}{*}{Request origin $r_\texttt{o}$} \\
ro & & \\
\hline
rid & \multirow{2}{*}{Table UD} & \multirow{2}{*}{Request destination $r_\texttt{d}$} \\
rd & & \\
\hline
\end{tabular}
\end{table}
<<Create Table CPD statement>>=
"CREATE TABLE CPD ("
  + "sid int  CONSTRAINT C74 NOT NULL,"
  + "ts  int  CONSTRAINT C75 NOT NULL,"
  + "te  int  CONSTRAINT C76 NOT NULL,"
  + "tp  int  CONSTRAINT C77 NOT NULL,"
  + "vp  int  CONSTRAINT C78 NOT NULL,"
  + "td  int  CONSTRAINT C79 NOT NULL,"
  + "vd  int  CONSTRAINT C80 NOT NULL,"
  + "rid int  CONSTRAINT C81 NOT NULL,"
  + "re  int  CONSTRAINT C82 NOT NULL,"
  + "rl  int  CONSTRAINT C83 NOT NULL,"
  + "ro  int  CONSTRAINT C84 NOT NULL,"
  + "rd  int  CONSTRAINT C85 NOT NULL,"
  + "CONSTRAINT C86 UNIQUE (rid),"
  + "CONSTRAINT P14 PRIMARY KEY (sid, tp, td, rid),"
  + "CONSTRAINT F31 FOREIGN KEY (sid) REFERENCES S,"
  + "CONSTRAINT F32 FOREIGN KEY (rid) REFERENCES R,"
  + "CONSTRAINT F33 FOREIGN KEY (sid, ts, te) REFERENCES CW (sid, ts, te) "
  + "  INITIALLY DEFERRED,"
  + "CONSTRAINT F34 FOREIGN KEY (sid, tp, vp, rid) REFERENCES PD (sid, t2, v2, rid) "
  + "  INITIALLY DEFERRED,"
  + "CONSTRAINT F35 FOREIGN KEY (sid, td, vd, rid) REFERENCES PD (sid, t2, v2, rid) "
  + "  INITIALLY DEFERRED,"
  + "CONSTRAINT F36 FOREIGN KEY (rid, re) REFERENCES UE (uid, ue),"
  + "CONSTRAINT F37 FOREIGN KEY (rid, rl) REFERENCES UL (uid, ul),"
  + "CONSTRAINT F38 FOREIGN KEY (rid, ro) REFERENCES UO (uid, uo),"
  + "CONSTRAINT F39 FOREIGN KEY (rid, rd) REFERENCES UD (uid, ud),"
  + "CONSTRAINT C87 CHECK (tp BETWEEN ts AND td) INITIALLY DEFERRED,"
  + "CONSTRAINT C88 CHECK (td BETWEEN tp AND te) INITIALLY DEFERRED,"
  + "CONSTRAINT C89 CHECK (tp >= re AND vp = ro) INITIALLY DEFERRED,"
  + "CONSTRAINT C90 CHECK (td <= rl AND vd = rd) INITIALLY DEFERRED"
  + ")"
@

\subsubsection{Table CQ (Load Constraints Table)}
Table CQ enforces the load rule R11. It has fourteen columns, \textsf{sid},
\textsf{sq}, \textsf{se}, \textsf{t1}, \textsf{t2}, \textsf{v2}, \textsf{q1},
\textsf{q2}, \textsf{rid}, \textsf{rq}, \textsf{tp}, \textsf{td}, \textsf{o1},
and \textsf{o2}.  From Eq.~\ref{eq:load}, the load burden only changes at the
times of waypoints labeled with a request. It increases when a waypoint
corresponds to a customer pick-up and decreases when the waypoint corresponds
to a customer drop-off. Each load-changing waypoint is stored in (\textsf{sid},
\textsf{t2}, \textsf{v2}, \textsf{rid}) and referenced to PD ([[F46]]).  To
determine if the waypoint is a customer pick-up or drop-off, the pick-up and
drop-off times for \textsf{rid} are stored in (\textsf{sid}, \textsf{tp},
\textsf{td}, \textsf{rid}) and referenced to CPD ([[F47]]).  If
$\textsf{t2}=\textsf{tp}$, then the waypoint represents a pick-up, otherwise it
represents a drop-off. The load of the server and request are stored in
(\textsf{sid}, \textsf{sq}) and (\textsf{rid}, \textsf{rq}), referenced to UQ
([[F44]], [[F45]]).

To validate if the load burden is always within a server's capacity, CQ must
keep track of every load change. It does so by storing the \emph{predecessor}
load in columns (\textsf{sid}, \textsf{t1}, \textsf{q1}, \textsf{o1}) next to
the current load in columns (\textsf{sid}, \textsf{t2}, \textsf{q2},
\textsf{o2}).  If the waypoint in the row is a pick-up, CQ validates that
$\textsf{q1}+\textsf{rq}=\textsf{q2}$, otherwise that
$\textsf{q1}-\textsf{rq}=\textsf{q2}$ ([[C98]]). As repetitive load changes can
occur at a single waypoint due to multiple pick-ups and drop-offs, the
\textsf{o1} and \textsf{o2} columns are introduced to store a unique
\emph{order number}. This number increments by 1 for each pick-up or drop-off
per server and can be handled by the application. Similar rules for
establishing predecessor waypoints in Table W can be used to establish
predecessor loads in CQ.  Subsequently, (\textsf{sid}, \textsf{t2},
\textsf{q2}, \textsf{o2}) is set to be the primary key ([[P15]]) in order to
allow a self-referencing foreign key on (\textsf{sid}, \textsf{t1},
\textsf{q1}, \textsf{o1}) ([[F42]]), and the server early time is stored in
(\textsf{sid}, \textsf{se}) and referenced to UE ([[F43]]) in order to detect
the first load change.
\begin{table}[t]
\centering
\small
\begin{tabular}{|c|c|l|}
\hline
\rowcolor{TableTitle}
\multicolumn{3}{|c|}{Table CQ (Load Constraints)}\\
\hline
\rowcolor{TableHeader}
Col. & Parent & Description \\
\hline
sid & \multirow{2}{*}{Table UQ} & \multirow{2}{*}{Server load $s_q$} \\
sq & & \\
\hline
sid & \multirow{2}{*}{Table UE} & \multirow{2}{*}{Server early time $s_e$} \\
se & & \\
\hline
sid & \multirow{4}{*}{Table CQ} & \multirow{4}{48mm}{Load burden $\mathcal{Q}(\mathcal{X},s,\textrm{t1})$ up to order o1} \\
t1 & & \\
q1 & & \\
o1 & & \\
\hline
\textit{sid}& & \multirow{3}{48mm}{Load burden $\mathcal{Q}(\mathcal{X},s,\textrm{t2})$ up to order o2} \\
\textit{t2} & & \\
\textit{q2} & & \\
\textit{o2} & & \\
\hline
sid & \multirow{4}{*}{Table PD} & \multirow{4}{48mm}{Request pick-up or delivery waypoint} \\
t2 & & \\
v2 & & \\
rid& & \\
\hline
sid & \multirow{4}{*}{Table CPD} & \multirow{4}{48mm}{Request pick-up and delivery times $\pi_\texttt{t}(\textrm{pickup}(\mathcal{X},r))$, $\pi_\texttt{t}(\textrm{dropoff}(\mathcal{X},r))$} \\
tp & & \\
td & & \\
rid& & \\
\hline
rid & \multirow{2}{*}{Table UQ} & \multirow{2}{*}{Request load $r_q$} \\
rq & & \\
\hline
\end{tabular}
\end{table}
<<Create Table CQ statement>>=
"CREATE TABLE CQ ("
  + "sid int  CONSTRAINT C91 NOT NULL,"
  + "sq  int  CONSTRAINT C92 NOT NULL,"
  + "se  int  CONSTRAINT C93 NOT NULL,"
  + "t1  int  ,"
  + "t2  int  CONSTRAINT C94 NOT NULL,"
  + "v2  int  ,"
  + "q1  int  ,"
  + "q2  int  CONSTRAINT C95 NOT NULL,"
  + "rid int  ,"
  + "rq  int  ,"
  + "tp  int  ,"
  + "td  int  ,"
  + "o1  int  ,"
  + "o2  int  CONSTRAINT C96 NOT NULL,"
  + "CONSTRAINT C97 CHECK (o2 > 0),"
  + "CONSTRAINT P15 PRIMARY KEY (sid, t2, q2, o2),"
  + "CONSTRAINT F40 FOREIGN KEY (sid) REFERENCES S,"
  + "CONSTRAINT F41 FOREIGN KEY (rid) REFERENCES R,"
  + "CONSTRAINT F42 FOREIGN KEY (sid, t1, q1, o1) REFERENCES CQ (sid, t2, q2, o2)"
  + "  INITIALLY DEFERRED,"
  + "CONSTRAINT F43 FOREIGN KEY (sid, se) REFERENCES UE (uid, ue),"
  + "CONSTRAINT F44 FOREIGN KEY (sid, sq) REFERENCES UQ (uid, uq),"
  + "CONSTRAINT F45 FOREIGN KEY (rid, rq) REFERENCES UQ (uid, uq),"
  + "CONSTRAINT F46 FOREIGN KEY (sid, t2, v2, rid) REFERENCES PD INITIALLY DEFERRED,"
  + "CONSTRAINT F47 FOREIGN KEY (sid, tp, td, rid) REFERENCES CPD INITIALLY DEFERRED,"
  + "CONSTRAINT C98 CHECK ("
  + "  CASE WHEN t1 IS NULL"
  + "    THEN t2 = se AND q1 IS NULL AND q2 = sq AND o1 IS NULL AND o2 = 1"
  + "        AND rid IS NULL AND rq IS NULL AND tp IS NULL AND td IS NULL"
  + "    ELSE q2 <= 0 AND o2 = o1 + 1"
  + "  END"
  + ") INITIALLY DEFERRED,"
  + "CONSTRAINT  C99 CHECK (CASE WHEN t2 = tp THEN q2 = q1 + rq END) INITIALLY DEFERRED,"
  + "CONSTRAINT C100 CHECK (CASE WHEN t2 = td THEN q2 = q1 - rq END) INITIALLY DEFERRED,"
  + "CONSTRAINT C101 UNIQUE (t2, v2, rid)"
  + ")"
@

\subsubsection{View r\_user (User Relation)}
The user relation $\mathcal{U}$ can be formed by a union of Table S and R.
<<Create View r\_user statement>>=
"CREATE VIEW r_user (uid, uq, ue, ul, uo, ud, ub) AS "
  + "SELECT * from S UNION SELECT * from R"
@

\subsubsection{View r\_server (Server Relation)}
The server relation $\mathcal{X}$ can be constructed by joining the routes in
Table W with the labels in CW and PD.
<<Create View r\_server statement>>=
"CREATE VIEW r_server (sid, t, v, Ls, Lr) AS "
  + "SELECT W.sid, W.t2, W.v2, CW.sid, PD.rid "
  + "FROM W LEFT OUTER JOIN CW ON W.sid = CW.sid AND (W.t2 = CW.ts OR W.t2 = CW.te) "
  + "  LEFT OUTER JOIN PD ON W.sid = PD.sid AND W.t2 = PD.t2"
@

\subsubsection{View f\_distance\_blocks (Distance Partitions)}
The cruising and service distances $D^\textrm{cruise}$ and $D^\textrm{service}$
require an auxilliary view. This view joins Table W with
CQ in such a way that the distances in column \textsf{dd} of W
can be aggregated based on whether there is load burden at the time of the
waypoint.
<<Create View f\_distance\_blocks statement>>=
"CREATE VIEW f_distance_blocks (sid, val, dtype) AS "
  + "SELECT d.sid, SUM (d.dd), d.dtype FROM ("
  + "  SELECT c.sid, c.dd, c.q2=c.sq as dtype FROM ("
  + "    SELECT b.sid, b.dd, b.q2, b.sq FROM ("
  + "      SELECT W.sid, W.t2, COALESCE (W.dd, 0) as dd, CQ.q2, CQ.sq, CQ.o2 "
  + "      FROM W LEFT OUTER JOIN CQ ON W.sid = CQ.sid AND W.t2 > CQ.t2"
  + "    ) AS b JOIN ("
  + "      SELECT W.sid, W.t2, MAX (CQ.o2) AS oprev "
  + "      FROM W LEFT OUTER JOIN CQ ON W.sid = CQ.sid AND W.t2 > CQ.t2 "
  + "      GROUP BY W.sid, W.t2"
  + "    ) AS a "
  + "    ON b.sid = a.sid AND b.t2 = a.t2 AND b.o2 = a.oprev"
  + "  ) AS c"
  + ") AS d "
  + "GROUP BY d.sid, d.dtype"
@ Cruising and service distances are obtained by querying
f\_distance\_blocks where \textsf{dtype} is true or false, respectively.

\subsubsection{View f\_status (Request Status)}
Request status can also be obtained using an auxilliary view.  This view lists
the count of occurrences of a request in column \textsf{rid} of CQ,
corresponding to the request status.  Table CQ is used to get the counts over
time.  If the count is 0, it will not appear in the aggregation and the status
for the request is ``waiting''.
<<Create View f\_status statement (Eq.~\ref{eq:status})>>=
"CREATE VIEW f_status (t, sid, rid, val) AS "
  + "SELECT a.t2, a.sid, a.rid, COUNT (b.rid) "
  + "FROM CQ AS a INNER JOIN CQ AS b ON a.t2 >= b.t2 "
  + "WHERE a.rid IS NOT NULL AND b.rid IS NOT NULL AND a.rid = b.rid "
  + "GROUP BY a.t2, a.sid, a.rid"
@

\subsubsection{Analytical Views}
Most of the analytical measures in \S\ref{sec:ridesharing-metrics} can
be expressed using simple statements.

To list all assignments $\mathcal{A}$:
<<Create View assignments statement (Eq.~\ref{eq:assignments})>>=
"CREATE VIEW assignments (t, sid, rid) AS "
  + "SELECT t, sid, rid FROM f_status WHERE val = 2 ORDER BY t ASC"
@
To list assigned requests $\mathcal{R^\textrm{ok}}$:
<<Create View assignments\_r statement (Eq.~\ref{eq:assigned-requests})>>=
"CREATE VIEW assignments_r (t, rid) AS "
  + "SELECT t, rid FROM assignments"
@
To list service rate $\mu$:
<<Create View service\_rate statement (Eq.~\ref{eq:service-rate})>>=
"CREATE VIEW service_rate (val) AS "
  + "SELECT CAST(CAST(A.NUM AS FLOAT) / CAST(A.DENOM AS FLOAT) * 10000 as INT)"
  + "FROM ( "
  + "SELECT (SELECT COUNT(*) FROM assignments_r) AS NUM, "
  + "       (SELECT COUNT(*) FROM R) AS DENOM "
  + "       FROM assignments_r FETCH FIRST ROW ONLY "
  + ") A"
@
To list base distance $D^\textrm{base}$:
<<Create View dist\_base statement (Eq.~\ref{eq:base-distance})>>=
"CREATE VIEW dist_base (val) AS "
  + "SELECT SUM (ub) FROM UB"
@
To list travel distances $D$ of all servers:
<<Create View dist\_s\_travel statement>>=
"CREATE VIEW dist_s_travel (sid, val) AS "
  + "SELECT W.sid, SUM (COALESCE (dd, 0)) "
  + "FROM W JOIN CW ON w.sid = cw.sid AND (t2 BETWEEN ts AND te) "
  + "GROUP BY W.sid"
@
To list cruising distances $D^\textrm{cruise}$ of all servers:
<<Create View dist\_s\_cruising statement (Eq.~\ref{eq:cruising-distance})>>=
"CREATE VIEW dist_s_cruising (sid, val) AS "
  + "SELECT sid, val FROM f_distance_blocks WHERE dtype = true"
@
To list service distances $D^\textrm{service}$ of all servers:
<<Create View dist\_s\_service statement (Eq.~\ref{eq:service-distance})>>=
"CREATE VIEW dist_s_service (sid, val) AS "
  + "SELECT sid, val FROM f_distance_blocks WHERE dtype = false"
@
To list base distances $d$ of all servers:
<<Create View dist\_s\_base statement>>=
"CREATE VIEW dist_s_base (val) AS "
  + "SELECT SUM (sb) FROM S"
@
To list base distances $d$ of all requests:
<<Create View dist\_r\_base statement>>=
"CREATE VIEW dist_r_base (val) AS "
  + "SELECT SUM (rb) FROM R"
@
To list base distances $d$ of all unassigned requests:
<<Create View dist\_r\_unassigned statement>>=
"CREATE VIEW dist_r_unassigned (val) AS "
  + "SELECT SUM (rb) FROM R LEFT JOIN assignments_r "
  + "  ON R.rid = assignments_r.rid "
  + "WHERE assignments_r.rid IS NULL"
@
To list detour distances $D^\textrm{detour}$ of all requests:
<<Create View dist\_r\_detour statement (Eq.~\ref{eq:detour-distance})>>=
"CREATE VIEW dist_r_detour (rid, val) AS "
  + "SELECT rid, val-ub FROM UB JOIN dist_r_transit ON uid = rid"
@
To list transit distances $D^\textrm{transit}$ of all requests:
<<Create View dist\_r\_transit statement (Eq.~\ref{eq:transit-distance})>>=
"CREATE VIEW dist_r_transit (rid, val) AS "
  + "SELECT rid, SUM (COALESCE (dd, 0)) "
  + "FROM CPD JOIN W ON CPD.sid = W.sid AND CPD.tp < W.t2 AND W.t2 <= CPD.td "
  + "GROUP BY rid"
@
To list travel duration $\delta$ of all servers:
<<Create View dur\_s\_travel statement>>=
"CREATE VIEW dur_s_travel (sid, val) AS "
  + "SELECT sid, te - ts FROM CW"
@
To list pick-up delay $\delta^\textrm{pickup}$ of all requests:
<<Create View dur\_r\_pickup statement (Eq.~\ref{eq:pick-up delay})>>=
"CREATE VIEW dur_r_pickup (rid, val) AS "
  + "SELECT rid, tp - re FROM CPD"
@
To list transit durations $\delta^\textrm{transit}$ of all requests:
<<Create View dur\_r\_transit statement (Eq.~\ref{eq:transit-duration})>>=
"CREATE VIEW dur_r_transit (rid, val) AS "
  + "SELECT rid, td - tp FROM CPD"
@
To list travel durations $\delta^\textrm{travel}$ of all requests:
<<Create View dur\_r\_travel statement (Eq.~\ref{eq:travel-duration})>>=
"CREATE VIEW dur_r_travel (rid, val) AS "
  + "SELECT rid, td - re FROM CPD"
@
To list departure times $t^\textrm{depart}$ of all requests:
<<Create View t\_r\_depart statement (Eq.~\ref{eq:departure-time})>>=
"CREATE VIEW t_r_depart (rid, val) AS "
  + "SELECT rid, tp FROM CPD"
@
To list departure times $t^\textrm{depart}$ of all servers:
<<Create View t\_s\_depart statement (Eq.~\ref{eq:departure-time})>>=
"CREATE VIEW t_s_depart (sid, val) AS "
  + "SELECT sid, ts FROM CW"
@
To list arrival times $t^\textrm{arrive}$ of all requests:
<<Create View t\_r\_arrive statement (Eq.~\ref{eq:arrival-time})>>=
"CREATE VIEW t_r_arrive (rid, val) AS "
  + "SELECT rid, td FROM CPD"
@
To list arrival times $t^\textrm{arrive}$ of all servers:
<<Create View t\_s\_arrive statement (Eq.~\ref{eq:arrival-time})>>=
"CREATE VIEW t_s_arrive (sid, val) AS "
  + "SELECT sid, te FROM CW"
@

% =============================================================================

\section{Implementation Overview}
\label{sec:implementation-overview}
The remaining sections are concerned with producing the Java code.  The code
consists of the \emph{preamble} (\S\ref{sec:preamble}) and the \emph{class
definition} (\S\ref{sec:class-definition}).
<<Storage.java>>=
<<Storage.java preamble>>
<<[[Storage]] definition>>
@

\subsection{Preamble}
\label{sec:preamble}
The preamble declares the package and imports dependencies.
<<Storage.java preamble>>=
package com.github.jargors;
@
We import:
\begin{itemize}
\item various Jargo exceptions for exception handling;
<<Storage.java preamble>>=
import com.github.jargors.exceptions.DuplicateVertexException;
import com.github.jargors.exceptions.DuplicateEdgeException;
import com.github.jargors.exceptions.DuplicateUserException;
import com.github.jargors.exceptions.EdgeNotFoundException;
import com.github.jargors.exceptions.UserNotFoundException;
import com.github.jargors.exceptions.VertexNotFoundException;
@ \item parts of the JDBC~API from [[java.sql]], for communication with Derby;
<<Storage.java preamble>>=
import java.sql.CallableStatement;   import java.sql.Connection;
import java.sql.DriverManager;       import java.sql.PreparedStatement;
import java.sql.ResultSet;           import java.sql.SQLException;
import java.sql.Statement;           import java.sql.Types;
@ \item Apache DBCP2 and Pool2, for connection pooling;
<<Storage.java preamble>>=
import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnection;
import org.apache.commons.dbcp2.PoolableConnectionFactory;
import org.apache.commons.dbcp2.PoolingDriver;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
@ \item standard map classes for caching various items.
<<Storage.java preamble>>=
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
@
\end{itemize}

\subsection{Class Definition}
\label{sec:class-definition}
The storage interface consists of member variables, a constructor, public
methods, and private methods.
<<[[Storage]] definition>>=
public class Storage {
  <<[[Storage]] member variables>>
  <<[[Storage]] constructor>>
  <<[[Storage]] public methods>>
  <<[[Storage]] private methods>>
}
@

\subsection{Member Variables}
\label{sec:member-variables}
The storage interface caches static data to avoid unnecessary database queries.
\begin{itemize}
\item The [[lu_rstatus]] map stores a boolean flag for each request indicating
whether the request is assigned or not. While the map elements are not static,
the elements do not change often. Guaranteeing consistency of the map is easy
because only [[Storage]] can update assignment changes to the database.
Whenever it successfully does an update, we simply update the map at the same
time.
<<[[Storage]] member variables>>=
private Map<Integer, Boolean> lu_rstatus = new HashMap<>();  //*
@ %def lu_rstatus
\item The other maps store static data values. References to these maps may be
held by other threads. To avoid accidental corruption due to concurrent access,
we use [[ConcurrentHashMap]].
<<[[Storage]] member variables>>=
private ConcurrentHashMap<String, String> lu_pstr     = new ConcurrentHashMap<>();
private ConcurrentHashMap<Integer, int[]> lu_vertices = new ConcurrentHashMap<>();
private ConcurrentHashMap<Integer,
    ConcurrentHashMap<Integer, int[]>>    lu_edges    = new ConcurrentHashMap<>();
private ConcurrentHashMap<Integer, int[]> lu_users    = new ConcurrentHashMap<>();
@ %def lu_pstr lu_vertices lu_edges lu_users
\end{itemize}

The storage interface also contains configuration settings and JDBC objects.
\begin{itemize}
\item Parameter
[[STATEMENTS_MAX_COUNT]] gives maximum number of simultaneous prepared
statements. Parameter [[REQUEST_TIMEOUT]] sets how long a client is allowed to
try to match a request, in other words if request $r$ is not assigned within
$\pi_\texttt{e}(r)+\texttt{REQUEST\_TIMEOUT}$, then it is not tried again.
The remaining parameters configure the Derby database connection.
<<[[Storage]] member variables>>=
private final int    STATEMENTS_MAX_COUNT   = 20;
private final int    REQUEST_TIMEOUT        = 30;
private       String CONNECTIONS_URL        = "jdbc:derby:memory:jargo;create=true";
private final String CONNECTIONS_DRIVER_URL = "jdbc:apache:commons:dbcp:";
private final String CONNECTIONS_POOL_NAME  = "jargo";
private final String CONNECTIONS_POOL_URL   = (CONNECTIONS_DRIVER_URL + CONNECTIONS_POOL_NAME);
@ %def CONNECTIONS_URL CONNECTIONS_DRIVER_URL CONNECTIONS_POOL_NAME STATEMENTS_MAX_COUNT REQUEST_TIMEOUT
\item The [[connection_factory]] is an object that returns new connections. The
[[poolableconnection_factory]] registers [[connection_factory]] and then can
return new poolable connections.  The [[pool]] is an object containing the
available poolable connections, and it is registered by the
[[poolableconnection_factory]]. The [[driver]] is the JDBC [[DriverManager]].
We get a reference to [[DriverManager]] in order to register the pool.
<<[[Storage]] member variables>>=
private ConnectionFactory               connection_factory;
private PoolableConnectionFactory       poolableconnection_factory;
private ObjectPool<PoolableConnection>  pool;
private PoolingDriver                   driver;
@ %def connection_factory poolableconnection_factory pool driver
\end{itemize}

To save some typing later on, we chunk out the code to get a database connection
from the JDBC [[DriverManager]].
<<Open [[conn]]>>=
Connection conn = DriverManager.getConnection(CONNECTIONS_POOL_URL)
@

\subsection{Constructor}
\label{sec:constructor}
The constructor simply initializes the prepared statement strings into
[[lu_pstr]].
<<[[Storage]] constructor>>=
public Storage() {
  this.PSInit();
}
@

\section{Public Methods}
\label{sec:public-methods}
This section introduces array diagrams to illustrate the expected shape of some
method parameters. These diagrams show each array element in a box, with the
contents of each box taking the form $\textit{position}:\textit{value}$. For
example,

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:a$}; & \node {$1:b$}; & \node {$2:c$};\\
};
\end{tikzpicture}

\noindent shows an array with three elements. The value at position 0 is $a$; the
value at position 1 is $b$; the value at position 2 is $c$.

\subsection{Utilities}
\label{sec:utilities}

\subsubsection{[[DBCreateNewInstance]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBCreateNewInstance]]}(0) creates a new database
instance. It uses [[setupDriver]](0) to register the JDBC [[DriverManager]] to
the new instance.  If the DBCP2 [[PoolingDriver]] cannot be found, a
[[ClassNotFoundException]] is thrown. We consider this exception to be fatal
and we exit immediately.  On the other hand if a [[SQLException]] occurs, we
rethrow to let the caller handle it. This exception can occur if the driver
cannot access the database for whatever reason.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} initializes a new in-memory Derby instance,
or exits the JVM if the DBCP2 driver
cannot be loaded.\\
\textbf{Throws:} [[SQLException]] if database cannot be accessed for whatever
reason.\\
\bottomrule
\end{tabular}
<<Initialize new empty database>>=
public void DBCreateNewInstance() throws SQLException {
  try {
    this.setupDriver();
  } catch (SQLException e) {
    throw e;
  } catch (ClassNotFoundException e) {
    System.err.println("Storage.init(): "+<<Err0>>);
    e.printStackTrace();
    System.exit(1);
  }
}
@ %def DBCreateNewInstance

\subsubsection{[[DBCloseInstance]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBCloseInstance]]}(0) closes an existing Jargo
database instance.  If the instance closes successfully, a [[SQLException]]
with error code [[45000]] is thrown. Otherwise, some other error code is
thrown. In this case we rethrow to let the caller handle it.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} closes an existing Jargo database instance.\\
\textbf{Throws:} [[SQLException]] if database cannot be closed for whatever
reason.\\
\bottomrule
\end{tabular}
<<Close database>>=
public void DBCloseInstance() throws SQLException {
  try {
    DriverManager.getConnection("jdbc:derby:memory:jargo;drop=true");
  } catch (SQLException e) {
    if (e.getErrorCode() != 45000) {
      throw e;
    }
  }
}
@ %def DBCloseInstance

\subsubsection{[[getReferenceVerticesCache]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[getReferenceVerticesCache]]}(0) returns a read-only
reference to [[lu_vertices]].\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} a read-only reference to [[lu_vertices]].\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Get reference to vertices cache>>=
public final ConcurrentHashMap<Integer, int[]> getReferenceVerticesCache() {
  return this.lu_vertices;
}
@ %def getReferenceVerticesCache

\subsubsection{[[getReferenceEdgesCache]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[getReferenceEdgesCache]]}(0) returns a read-only
reference to [[lu_edges]].\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} a read-only reference to [[lu_edges]].\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Get reference to edges cache>>=
public final ConcurrentHashMap<Integer,
    ConcurrentHashMap<Integer, int[]>> getReferenceEdgesCache() {
  return this.lu_edges;
}
@ %def getReferenceEdgesCache

\subsubsection{[[getReferenceUsersCache]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[getReferenceUsersCache]]}(0) returns a read-only
reference to [[lu_users]].\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} a read-only reference to [[lu_users]].\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Get reference to users cache>>=
public final ConcurrentHashMap<Integer, int[]> getReferenceUsersCache() {
  return this.lu_users;
}
@ %def getReferenceUsersCache

\subsubsection{[[DBLoadDataModel]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBLoadDataModel]]}(0) loads the data model in
\S\ref{sec:ridesharing-data-model} into the Jargo database instance. If the
data model cannot be loaded, a [[SQLException]] is thrown. We consider this
exception to be fatal and we exit immediately. Possible reasons for such an
exception might be because the caller forgot to first call
[[DBCreateNewInstance]](0) resulting in ``No suitable driver found'' (error
code 0), or because the caller previously called [[DBLoadBackup]](1) resulting
in ``Table/View V already exists'' (error code 20000). In either case we print
a hint to terminal to guide the debugging.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} loads the data model in \S\ref{sec:ridesharing-data-model}
into the Jargo instance, or exits the JVM if failure occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Load data model>>=
public void DBLoadDataModel() {
  try (<<Open [[conn]]>>) {
    Statement stmt = conn.createStatement();
    stmt.clearBatch();
    stmt.addBatch(<<Create Table V statement>>);
    stmt.addBatch(<<Create Table E statement>>);
    stmt.addBatch(<<Create Table UQ statement>>);
    stmt.addBatch(<<Create Table UE statement>>);
    stmt.addBatch(<<Create Table UL statement>>);
    stmt.addBatch(<<Create Table UO statement>>);
    stmt.addBatch(<<Create Table UD statement>>);
    stmt.addBatch(<<Create Table UB statement>>);
    stmt.addBatch(<<Create Table S statement>>);
    stmt.addBatch(<<Create Table R statement>>);
    stmt.addBatch(<<Create Table W statement>>);
    stmt.addBatch(<<Create Table PD statement>>);
    stmt.addBatch(<<Create Table CW statement>>);
    stmt.addBatch(<<Create Table CPD statement>>);
    stmt.addBatch(<<Create Table CQ statement>>);
    stmt.addBatch(<<Create View r\_user statement>>);
    stmt.addBatch(<<Create View r\_server statement>>);
    stmt.addBatch(<<Create View f\_distance\_blocks statement>>);
    stmt.addBatch(<<Create View f\_status statement (Eq.~\ref{eq:status})>>);
    stmt.addBatch(<<Create View assignments statement (Eq.~\ref{eq:assignments})>>);
    stmt.addBatch(<<Create View assignments\_r statement (Eq.~\ref{eq:assigned-requests})>>);
    stmt.addBatch(<<Create View service\_rate statement (Eq.~\ref{eq:service-rate})>>);
    stmt.addBatch(<<Create View dist\_base statement (Eq.~\ref{eq:base-distance})>>);
    stmt.addBatch(<<Create View dist\_s\_travel statement>>);
    stmt.addBatch(<<Create View dist\_s\_cruising statement (Eq.~\ref{eq:cruising-distance})>>);
    stmt.addBatch(<<Create View dist\_s\_service statement (Eq.~\ref{eq:service-distance})>>);
    stmt.addBatch(<<Create View dist\_s\_base statement>>);
    stmt.addBatch(<<Create View dist\_r\_base statement>>);
    stmt.addBatch(<<Create View dist\_r\_unassigned statement>>);
    stmt.addBatch(<<Create View dist\_r\_transit statement (Eq.~\ref{eq:transit-distance})>>);
    stmt.addBatch(<<Create View dist\_r\_detour statement (Eq.~\ref{eq:detour-distance})>>);
    stmt.addBatch(<<Create View dur\_s\_travel statement>>);
    stmt.addBatch(<<Create View dur\_r\_pickup statement (Eq.~\ref{eq:pick-up delay})>>);
    stmt.addBatch(<<Create View dur\_r\_transit statement (Eq.~\ref{eq:transit-duration})>>);
    stmt.addBatch(<<Create View dur\_r\_travel statement (Eq.~\ref{eq:travel-duration})>>);
    stmt.addBatch(<<Create View t\_r\_depart statement (Eq.~\ref{eq:departure-time})>>);
    stmt.addBatch(<<Create View t\_s\_depart statement (Eq.~\ref{eq:departure-time})>>);
    stmt.addBatch(<<Create View t\_r\_arrive statement (Eq.~\ref{eq:arrival-time})>>);
    stmt.addBatch(<<Create View t\_s\_arrive statement (Eq.~\ref{eq:arrival-time})>>);
    stmt.addBatch("CREATE INDEX W_sid_t1 ON W (sid, t1)");
    stmt.addBatch("CREATE INDEX W_sid_t2 ON W (sid, t2)");
    stmt.addBatch("CREATE INDEX W_sid_v2 ON W (sid, v2)");
    stmt.addBatch("CREATE INDEX W_sid_t1_t2 ON W (sid, t1, t2)");
    stmt.executeBatch();
    conn.commit();
  } catch (SQLException e) {
    System.err.println("Storage.DBLoadDataModel(): "+<<Err0>>);
    if (e.getErrorCode() == 0) {
      System.err.println("(did you forget to call Storage.DBCreateNewInstance()?)");
    } else if (e.getErrorCode() == 20000) {
      System.err.println("(data model already exists from Storage.DBLoadBackup()?)");
    }
    e.printStackTrace(System.err);
    System.exit(1);
  }
}
@ %def DBLoadDataModel

\subsubsection{[[DBLoadBackup]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBLoadBackup]]}(1) loads a previously saved Jargo
database instance from disk into working memory. It uses [[setupDriver]](0) to
register the JDBC [[DriverManager]] to the new instance.  If the DBCP2
[[PolingDriver]] cannot be found, a [[ClassNotFoundException]] is thrown. We
consider this exception to be fatal and we exit immediately.  On the other hand
if a [[SQLException]] occurs, we rethrow to let the caller handle it. This
exception can occur if the driver cannot access the database for whatever
reason.\\
\midrule
\textbf{Parameters:} \\
\hspace{2mm} String [[p]] (param. 1): path to directory where backup is located.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} loads backup into Jargo database instance, or exits the
JVM if failure occurs.\\
\textbf{Throws:} [[SQLException]] if database cannot be accessed.\\
\bottomrule
\end{tabular}
<<Load backup>>=
public void DBLoadBackup(final String p) throws SQLException {
  this.CONNECTIONS_URL = "jdbc:derby:memory:jargo;createFrom="+p;
  try {
    this.setupDriver();
  } catch (ClassNotFoundException e) {
    System.out.println("Storage.DBLoadBackup(1): "+<<Err0>>);
    e.printStackTrace();
    System.exit(1);
  }
}
@ %def DBLoadBackup

\subsubsection{[[DBLoadRoadNetworkFromDB]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBLoadRoadNetworkFromDB]]}(0) loads the
two caches [[lu_vertices]] and [[lu_edges]] using the vertices and edges
data in Tables V and E in the database. If queries on Tables V and E
fail, this method throws a [[SQLException]].
\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} populates [[lu_vertices]] and [[lu_edges]].\\
\textbf{Throws:} [[SQLException]] if Tables V and E cannot be queried or
other database failure is encountered.\\
\bottomrule
\end{tabular}
<<Load road network from database>>=
public void DBLoadRoadNetworkFromDB() throws SQLException {
@ %def DBLoadRoadNetworkFromDB
{\small Our approach is to create two temporary maps on the heap, populate the
temporary maps, then assign [[lu_vertices]] and [[lu_edges]] to reference the
temporary maps if all succeeds. This way we don't corrupt [[lu_vertices]] and
[[lu_edges]] in case of failure. (The approach might be overly cautious as it's
hard to imagine why this method would ever be called if the caches are already
populated.)}
<<Load road network from database>>=
  ConcurrentHashMap<Integer, int[]>    lu1 = new ConcurrentHashMap<>();
  ConcurrentHashMap<Integer,
    ConcurrentHashMap<Integer, int[]>> lu2 = new ConcurrentHashMap<>();
@
{\small We start by querying the vertices.}
<<Load road network from database>>=
  try {
    final int[] output = this.DBQueryAllVertices();
    for (int i = 0; i < (output.length - 2); i += 3) {
      final int   v = output[(i + 0)];
      final int lng = output[(i + 1)];
      final int lat = output[(i + 2)];
      lu1.put(v, new int[] { lng, lat });
    }
  } catch (SQLException e) {
    throw e;
  }
@
{\small Then we go on to query the edges.}
<<Load road network from database>>=
  try {
    final int[] output = this.DBQueryAllEdges();
    for (int i = 0; i < (output.length - 3); i += 4) {
      final int v1 = output[(i + 0)];
      final int v2 = output[(i + 1)];
      final int dd = output[(i + 2)];
      final int nu = output[(i + 3)];
      if (!lu2.containsKey(v1)) {
        lu2.put(v1, new ConcurrentHashMap());
      }
      lu2.get(v1).put(v2, new int[] { dd, nu });
    }
  } catch (SQLException e) {
    throw e;
  }
@
{\small Finally we do the assignment.}
<<Load road network from database>>=
  this.lu_vertices = lu1;
  this.lu_edges    = lu2;
}
@

\subsubsection{[[DBLoadUsersFromDB]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBLoadUsersFromDB]]}(0) loads the two caches
[[lu_users]] and [[lu_rstatus]] using data in the user and assignment tables in
the database. If queries on these tables fail, this method throws a
[[SQLException]].\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} populates [[lu_users]] and [[lu_rstatus]].\\
\textbf{Throws:} [[SQLException]] if user and assignment tables cannot be
queried or other database failure is encountered.\\
\bottomrule
\end{tabular}
<<Load users from database>>=
public void DBLoadUsersFromDB() throws SQLException {
@ %def DBLoadUsersFromDB
{\small Our approach follows the approach for [[DBLoadRoadNetworkFromDB]](0).
We start by creating two temporary maps on the heap.}
<<Load users from database>>=
  ConcurrentHashMap<Integer, int[]> lu1 = new ConcurrentHashMap<>();
  Map<Integer, Boolean>             lu2 = new HashMap<>();
@
{\small Then we query the users.}
<<Load users from database>>=
  try {
    final int[] output = this.DBQueryAllUsers();
    for (int i = 0; i < (output.length - 6); i += 7) {
      final int uid = output[(i + 0)];
      final int  uq = output[(i + 1)];
      final int  ue = output[(i + 2)];
      final int  ul = output[(i + 3)];
      final int  uo = output[(i + 4)];
      final int  ud = output[(i + 5)];
      final int  ub = output[(i + 6)];
      lu1.put(uid, new int[] { uid, uq, ue, ul, uo, ud, ub });
@
{\small If the user is a request, in other words the user load is positive,
we query the request's assignment status.}
<<Load users from database>>=
      if (uq > 0) {
        lu2.put(uid, (this.DBQueryRequestIsAssigned(uid).length > 0 ? true : false));
      }
    }
  } catch (SQLException e) {
    throw e;
  }
@
{\small Finally we do the assignment.}
<<Load users from database>>=
  this.lu_users   = lu1;
  this.lu_rstatus = lu2;
}
@

\subsubsection{[[DBSaveBackup]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBSaveBackup]]}(1) exports the Jargo database
instance to disk. If a [[SQLException]] occurs, we rethrow to let the caller
handle it.\\
\midrule
\textbf{Parameters:} \\
\hspace{2mm} String [[p]] (param. 1): path to directory where instance should
be exported to.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} writes the database to disk.\\
\textbf{Throws:} [[SQLException]] if failure is encountered.\\
\bottomrule
\end{tabular}
<<Save backup>>=
public void DBSaveBackup(final String p) throws SQLException {
  try (<<Open [[conn]]>>) {
    CallableStatement cs = conn.prepareCall("CALL SYSCS_UTIL.SYSCS_BACKUP_DATABASE("+p+")");
    cs.execute();
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBSaveBackup

\subsubsection{[[_printSQLDriverStatistics]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
FOR INTERNAL USE. Method \textcolor{blue}{[[_printSQLDriverStatistics]]}(0)
prints the number of active and idle connections in the JDBC connection pool.
The following code comes from the Apache DBCP2 examples and is licensed by the
Apache Software Foundation.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} prints number of active and idle connections.\\
\textbf{Throws:} [[SQLException]] if failure occurs.\\
\bottomrule
\end{tabular}
<<Print SQL driver statistics>>=
public void _printSQLDriverStatistics() throws SQLException {
  PoolingDriver d = (PoolingDriver) DriverManager.getDriver(CONNECTIONS_DRIVER_URL);
  ObjectPool<? extends Connection> cp = d.getConnectionPool(CONNECTIONS_POOL_NAME);
  System.out.println("Connections: "+cp.getNumActive()+" active; "+cp.getNumIdle()+" idle");
}
@ %def printSQLDriverStatistics

\subsubsection{[[_getConnection]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
FOR INTERNAL USE. Method \textcolor{blue}{[[_getConnection]]}(0) returns a
database connection.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} a database connection [[Connection]].\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if connection cannot be obtained.\\
\bottomrule
\end{tabular}
<<Get connection (for internal use)>>=
public Connection _getConnection() throws SQLException {
  return DriverManager.getConnection(CONNECTIONS_POOL_URL);
}
@ %def _getConnection

\subsection{Write Methods}
\label{sec:write-methods}

\subsubsection{[[DBAddNewVertex]](3)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBAddNewVertex]]}(3) inserts a vertex into
Table V and into [[lu_vertices]] if all succeeds. If the vertex attemping
to be inserted already exists, a [[DuplicateVertexException]] is thrown.
A [[SQLException]] is thrown for other database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[v]] (param. 1):&vertex identifier.\\
Integer [[lng]] (param. 2):&longitude, written to an \emph{integer
precision}, \emph{e.g.} for longitude $123.456789$, pass $123456789$ for
$10^6$ precision. \textbf{The caller is responsible for remembering the
precision.}\\
Integer [[lat]] (param. 3):&latitude, written to an \emph{integer
precision} as above.
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} inserts a row into Table V, puts an entry into
[[lu_vertices]].\\
\textbf{Throws:} [[DuplicateVertexException]] if vertex already exists,
or [[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Add new vertex>>=
public void DBAddNewVertex(final int v, final int lng, final int lat)
throws DuplicateVertexException, SQLException {
@ %def DBAddNewVertex
{\small If only [[DBAddNewVertex]](3) is ever used to write vertices into Table
V, we can be sure that any vertex appearing in Table V also appears in
[[lu_vertices]].  To check if the vertex in param. 1 is a duplicate entry, it
is sufficient to check [[lu_vertices]].}
<<Add new vertex>>=
  if (this.lu_vertices.containsKey(v)) {
    throw new DuplicateVertexException("Vertex "+v+" already exists.");
  }
@
{\small All we do is use statement [[S0]] to submit the insert statement
against Table V. By putting [[conn]] in the resources of the outer try, we
ensure [[conn]] gets closed in the end no matter what happens. This pattern
will appear in other write methods. If all succeeds, we put the vertex into
[[lu_vertices]].}
<<Add new vertex>>=
  try (<<Open [[conn]]>>) {
    try {
      PreparedStatement pS0 = this.PS(conn, "S0");
      this.PSAdd(pS0, v, lng, lat);
      this.PSSubmit(pS0);
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
  this.lu_vertices.put(v, new int[] { lng, lat });
}
@

\subsubsection{[[DBAddNewEdge]](4)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBAddNewEdge]]}(4) inserts an edge into Table E
and into [[lu_edges]] if all succeeds. If the edge attempting to be inserted
already exists, a [[DuplicateEdgeException]] is thrown. A [[SQLException]]
is thrown for other database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[v1]] (param. 1):&source vertex identifier.\\
Integer [[v2]] (param. 2):&target vertex identifier.\\
Integer [[dd]] (param. 3):&distance along the edge, in meters.\\
Integer [[nu]] (param. 4):&maximum free-flow speed along the edge, in meters per second.\\
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} inserts a row into Table E, puts an entry into
[[lu_edges]].\\
\textbf{Throws:} [[DuplicateEdgeException]] if edge already exists, or
[[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Add new edge>>=
public void DBAddNewEdge(final int v1, final int v2, final int dd, final int nu)
throws DuplicateEdgeException, SQLException {
  if (this.lu_edges.containsKey(v1) && this.lu_edges.get(v1).containsKey(v2)) {
    throw new DuplicateEdgeException("Edge ("+v1+", "+v2+") already exists.");
  }
  if (!this.lu_edges.containsKey(v1)) {
    this.lu_edges.put(v1, new ConcurrentHashMap());
  }
  try (<<Open [[conn]]>>) {
    try {
      PreparedStatement pS1 = this.PS(conn, "S1");
      this.PSAdd(pS1, v1, v2, dd, nu);
      this.PSSubmit(pS1);
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
  this.lu_edges.get(v1).put(v2, new int[] { dd, nu });
}
@ %def DBAddNewEdge

\subsubsection{[[DBUpdateEdgeSpeed]](3)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBUpdateEdgeSpeed]]}(3) updates the maximum free-flow
speed of an edge in the road network. If the edge attempting to be updated
does not exist, an [[EdgeNotFoundException]] is throw.
A [[SQLException]] is thrown for other database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[v1]] (param. 1):&source vertex identifier.\\
Integer [[v2]] (param. 2):&target vertex identifier.\\
Integer [[nu]] (param. 3):&new maximum free-flow speed, in meters per second.
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} updates a row in Table E, updates an entry in
[[lu_edges]]. \textbf{May update rows in Table W if edge belongs to
any server route. This update may cause C56 violations if waypoint times
(columns \textsf{t1}, \textsf{t2}) are not updated accordingly!}\\
\textbf{Throws:} [[EdgeNotFoundException]] if edge does not exist,
or [[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Update edge speed>>=
public void DBUpdateEdgeSpeed(final int v1, final int v2, final int nu)
throws EdgeNotFoundException, SQLException {
  if (!(this.lu_edges.containsKey(v1) && this.lu_edges.get(v1).containsKey(v2))) {
    throw new EdgeNotFoundException("Edge ("+v1+", "+v2+") not found.");
  }
  try (<<Open [[conn]]>>) {
    try {
      PreparedStatement pS15 = this.PS(conn, "S15");
      PreparedStatement pS131 = this.PS(conn, "S131");
      this.PSAdd(pS15, nu, v1, v2);
      this.PSAdd(pS131, nu, v1, v2);
      this.PSSubmit(pS15, pS131);
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
  this.lu_edges.get(v1).get(v2)[1] = nu;
}
@ %def DBUpdateEdgeSpeed

\subsubsection{[[DBAddNewRequest]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBAddNewRequest]]}(1) inserts a new request into the
user tables and into [[lu_users]] and [[lu_rstatus]] if all succeeds.  If the
request attempting to be inserted already exists, a [[DuplicateUserException]]
is thrown. A [[SQLException]] is thrown for other database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Array [[u]] (param. 1):&7-element integer array storing values of
request $r$'s components.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{identifier}$}; & \node {$1:r_\texttt{q}$}; & \node {$2:r_\texttt{e}$};
 &\node {$3:r_\texttt{l}$}; & \node {$4:r_\texttt{o}$}; & \node {$5:r_\texttt{d}$}; & \node {$6:d_r$};\\
};
\end{tikzpicture}
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} inserts a row into each of the user tables, insert a
row into Table R, puts an entry into [[lu_users]] and into [[lu_rstatus]].\\
\textbf{Throws:} [[DuplicateUserException]] if request already exists, or
[[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Add new request>>=
public void DBAddNewRequest(final int[] u)
throws DuplicateUserException, SQLException {
  final int uid = u[0];
  if (this.lu_users.containsKey(uid)) {
    throw new DuplicateUserException("User "+uid+" already exists.");
  }
  try (<<Open [[conn]]>>) {
    try {
      <<..insert new user into user tables>>
      <<..insert new request into r>>
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
@ %def DBAddNewRequest
{\small In the last step, we put $r$ into [[lu_users]] and put it into
[[lu_rstatus]] with the value set to [[false]] to indicate that it is
unassigned. When we put it into [[lu_users]], we store a cloned array [[u]] as
the value because we don't want any changes to [[u]] on the caller side showing
up in our cache (we are considering users to be immutable).}
<<Add new request>>=
  this.lu_users.put(u[0], u.clone());
  this.lu_rstatus.put(u[0], false);
}
@
{\small To insert $r$ into the user tables, we simply prepare and submit each
of the insert statements against the tables using statements [[S2]] through
[[S7]].}
<<..insert new user into user tables>>=
PreparedStatement pS2 = this.PS(conn, "S2");
PreparedStatement pS3 = this.PS(conn, "S3");
PreparedStatement pS4 = this.PS(conn, "S4");
PreparedStatement pS5 = this.PS(conn, "S5");
PreparedStatement pS6 = this.PS(conn, "S6");
PreparedStatement pS7 = this.PS(conn, "S7");
this.PSAdd(pS2, uid, u[1]);
this.PSAdd(pS3, uid, u[2]);
this.PSAdd(pS4, uid, u[3]);
this.PSAdd(pS5, uid, u[4]);
this.PSAdd(pS6, uid, u[5]);
this.PSAdd(pS7, uid, u[6]);
this.PSSubmit(pS2, pS3, pS4, pS5, pS6, pS7);
@
{\small Similarly, we prepare and submit statement [[S9]] to insert $r$ into
Table R.}
<<..insert new request into r>>=
PreparedStatement pS9 = this.PS(conn, "S9");
this.PSAdd(pS9, uid, u[1], u[2], u[3], u[4], u[5], u[6]);
this.PSSubmit(pS9);
@

\subsubsection{[[DBAddNewServer]](2)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBAddNewServer]]}(2) inserts a new server into the
user tables and into [[lu_users]] if all succeeds.  If the server attempting to
be inserted already exists, a [[DuplicateUserException]] is thrown. The method
requires the server's initial route be given in the second parameter. If the
supplied route contains an edge that does not exist in Table E, an
[[EdgeNotFoundException]] is thrown. A [[SQLException]] is thrown for other
database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Array [[u]] (param. 1):&7-element integer array storing values of
server $s$'s components.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{identifier}$}; & \node {$1:s_\texttt{q}$}; & \node {$2:s_\texttt{e}$};
 &\node {$3:s_\texttt{l}$}; & \node {$4:s_\texttt{o}$}; & \node {$5:s_\texttt{d}$}; & \node {$6:d_s$};\\
};
\end{tikzpicture}\\
Array [[route]] (param. 2):&$(2|w|)$-element integer array storing values of
waypoint components in the server's route $w$.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_1$}; & \node {$1:v_1$}; & \node[minimum width=6mm] {...};
 &\node {$(2|w|-2):t_{|w|}$}; & \node {$(2|w|-1):v_{|w|}$}; \\
};
\end{tikzpicture}\\
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} inserts a row into each of the user tables, insert a
row into Table S, inserts at least two rows into Table W, inserts a row into Table CW,
inserts a row into Table CQ, puts an entry into [[lu_users]].\\
\textbf{Throws:} [[DuplicateUserException]] if server already exists,
[[EdgeNotFoundException]] if [[route]] contains an edge that does not exist
in Table E, or [[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Add new server>>=
public void DBAddNewServer(final int[] u, final int[] route)
throws DuplicateUserException, EdgeNotFoundException, SQLException {
  final int uid = u[0];
  if (this.lu_users.containsKey(uid)) {
    throw new DuplicateUserException("User "+uid+" already exists.");
  }
  try (<<Open [[conn]]>>) {
    try {
      final int se = u[2];
@ %def DBAddNewServer
{\small We can re-use the chunk from [[DBAddNewRequest]](1) to insert the
server into the user tables.}
<<Add new server>>=
      <<..insert new user into user tables>>
@
{\small Then we prepare and submit the insert statements that will insert $s$
into Table S and insert [[route]] into Tables W and CW. Next we record the
server's initial load into Table CQ. A ``label'' marks where each chunk begins
in the source code ([[Storage.java]]).}
<<Add new server>>=
/*L1*/<<..insert new server into s>>
/*L2*/<<..insert new server route into w>>
/*L3*/<<..insert new server route into cw>>
/*L4*/<<..insert new server into cq>>
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
@
{\small In the last step, we put $s$ into [[lu_users]].}
<<Add new server>>=
  this.lu_users.put(uid, u.clone());
}
@
{\small We prepare and submit statement [[S8]] to insert $s$ into Table S.}
<<..insert new server into s>>=
PreparedStatement pS8 = this.PS(conn, "S8");
this.PSAdd(pS8, uid, u[1], u[2], u[3], u[4], u[5], u[6]);
this.PSSubmit(pS8);
@
{\small The procedure to insert [[route]] into Table W is written into its own
chunk so we can re-use it later.  After the procedure, we re-initialize
statement [[S10]] to add the first waypoint $(t_1,v_1)$ into columns
\textsf{t2} and \textsf{v2} while setting columns \textsf{t1} and \textsf{v1}
to [[null]].}
<<..insert new server route into w>>=
<<Procedure to insert [[route]] into Table W>>
pS10 = this.PS(conn, "S10");
this.PSAdd(pS10, uid, se, null, null, route[0], route[1], null, null);
this.PSSubmit(pS10);
@
{\small In the procedure to insert [[route]] into Table W, we loop through each
of the waypoints, adding the waypoint $(t_i,v_i)$ into columns \textsf{t1} and
\textsf{v1} and adding its successor $(t_{i+1},v_{i+1})$ into columns
\textsf{t2} and \textsf{v2}. We start by treating $(t_1,v_1)$ as the
predecessor for $(t_2,v_2)$, then add the predecessor to $(t_1,v_1)$ seperately
as mentioned above.}
<<Procedure to insert [[route]] into Table W>>=
PreparedStatement pS10 = this.PS(conn, "S10");
for (int i = 0; i < (route.length - 3); i += 2) {
  final int t1 = route[(i + 0)];
  final int v1 = route[(i + 1)];
  final int t2 = route[(i + 2)];
  final int v2 = route[(i + 3)];
  if (!(this.lu_edges.containsKey(v1) && this.lu_edges.get(v1).containsKey(v2))) {
    throw new EdgeNotFoundException("Edge ("+v1+", "+v2+") not found.");
  }
  final int dd = this.lu_edges.get(v1).get(v2)[0];
  final int nu = this.lu_edges.get(v1).get(v2)[1];
  this.PSAdd(pS10, uid, se, t1, v1, t2, v2, dd, nu);
}
this.PSSubmit(pS10);
@
{\small We prepare and submit statement [[S11]] to insert the server's
start and end times into Table CW.}
<<..insert new server route into cw>>=
PreparedStatement pS11 = this.PS(conn, "S11");
final int te = route[(route.length - 2)];
this.PSAdd(pS11, uid, u[2], u[3], u[4], u[5], u[2], u[4], te, u[5]);
this.PSSubmit(pS11);
@
{\small We prepare and submit statement [[S14]] to insert the server's
initial load into Table CQ.}
<<..insert new server into cq>>=
PreparedStatement pS14 = this.PS(conn, "S14");
this.PSAdd(pS14, uid, u[1], u[2], null, u[2], u[4], null, u[1],
    null, null, null, null, null, 1);
this.PSSubmit(pS14);
@

\subsubsection{[[DBUpdateServerRoute]](3)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBUpdateServerRoute]]}(3) inserts a new
\emph{remaining route} for server $s$ into Table W. As the timing of waypoints
may change, the method also updates timings in the \emph{remaining schedule}.
If the server to be updated does not exist, a [[UserNotFoundException]] is
thrown.  If the supplied route contains an edge that does not exist in Table E,
an [[EdgeNotFoundException]] is thrown. A [[SQLException]] is thrown for other
database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[sid]] (param. 1):&server identifier.\\
Array [[route]] (param. 2):&$2n$-element integer array storing values of
waypoint components in the server's $n$-length remaining route $w_{>t}$.
In the diagram, $|w|-i=n$.
Here $t$ is taken to be [[route[0]]]. Consequently, $(t_i,v_i)$ is \emph{not} part
of the remaining route, in other words \textbf{it must pre-exist in Table W}.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_i$}; & \node {$1:v_i$}; & \node[minimum width=6mm] {...};
 &\node {$(2|w|-2):t_{|w|}$}; & \node {$(2|w|-1):v_{|w|}$}; \\
};
\end{tikzpicture}\\
Array [[sched]] (param. 2):&$3m$-element integer array storing values of
waypoint components and their labels in the server's $m$-length remaining
schedule $b_{>t}$, where $m\leq n$. In the diagram, $|b|-j=m$.  Note
$(t_{i_j},v_{i_j})$ \emph{cannot equal} $(t_i,v_i)$, as $(t_i,v_i)$ is part of
the traveled route and not the remaining route (we cannot change the past).
Therefore $t_{i_j}$ \textbf{must be greater than} $t_i$. Due to rule R3,
$(t_{i_{|b|}},v_{i_{|b|}})$ \textbf{must equal} $(t_{|w|},v_{|w|})$.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_{i_j}$}; & \node {$1:v_{i_j}$}; & \node {$2:L(b_j)$}; & \node[minimum width=6mm] {...};
 &\node {$(2|b|-3):t_{i_{|b|}}$}; & \node {$(2|b|-2):v_{i_{|b|}}$}; & \node {$(2|b|-1):L(b_{|b|})$};\\
};
\end{tikzpicture}

If a waypoint has multiple labels, write them side-by-side, \textit{e.g.}
to record two labels $L_1(b_j)$ and $L_2(b_j)$ on waypoint $b_j$, write
(indices omitted for clarity):

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node[minimum width=6mm] {...};
 &\node {$t_{i_j}$}; & \node {$v_{i_j}$};
 &\node {$L_1(b_j)$};
 &\node {$t_{i_j}$}; & \node {$v_{i_j}$};
 &\node {$L_2(b_j)$};
 &\node[minimum width=6mm] {...};\\
};
\end{tikzpicture}

If a waypoint has multiple labels with some indicating drop-offs, \textbf{write
the drop-offs first} before any of the pick-ups, otherwise C98 violation may
occur.
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may delete and insert rows into Table W, may
update columns in Table CW, may update columns in Tables PD and CPD,
may delete and insert rows into Table CQ.\\
\textbf{Throws:} [[UserNotFoundException]] if server does not exist,
[[EdgeNotFoundException]] if [[route]] contains an edge that does not exist
in Table E, or [[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Update server route>>=
public void DBUpdateServerRoute(final int sid, final int[] route, final int[] sched)
throws UserNotFoundException, EdgeNotFoundException, SQLException {
  if (!this.lu_users.containsKey(sid)) {
    throw new UserNotFoundException("User "+sid+" not found.");
  }
  try (<<Open [[conn]]>>) {
    try {
/*L1*/<<..fetch [[sq]] and [[se]]>>
/*L2*/<<..update route>>
      if (sched.length > 0) {
        Map<Integer, int[]> cache = new HashMap<>();
/*L3*/  <<..update schedule>>
      }
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBUpdateServerRoute
{\small We get the server's load into [[sq]], needed by Table CQ. We also
get the server's early time into [[se]], needed by the procedure to insert
[[route]] into Table W.}
<<..fetch [[sq]] and [[se]]>>=
final int sq = lu_users.get(sid)[1];
final int se = lu_users.get(sid)[2];
@
{\small To update the route, first we delete the pre-existing remaining route
from Table W, then insert the waypoints in [[route]], and lastly update the
route endpoint in Table CW. As Table CPD stores the route endpoint time in
column \textsf{te}, we update this table as well.}
<<..update route>>=
/*a*/<<....delete remaining route from w>>
/*b*/<<....insert new remaining route into w>>
/*c*/<<....update route endpoint in cw, cpd>>
@
{\small We prepare and submit statement [[S76]] to delete the pre-existing
remaining route from Table W.}
<<....delete remaining route from w>>=
PreparedStatement pS76 = this.PS(conn, "S76");
this.PSAdd(pS76, sid, route[0]);
this.PSSubmit(pS76);
@
{\small We re-use the chunk that inserts [[route]] into Table W.}
<<....insert new remaining route into w>>=
final int uid = sid;
<<Procedure to insert [[route]] into Table W>>
@
{\small We prepare and submit statements [[S77]] and [[S139]] to update the
route endpoint in Tables CW and CPD.}
<<....update route endpoint in cw, cpd>>=
PreparedStatement pS77 = this.PS(conn, "S77");
PreparedStatement pS139 = this.PS(conn, "S139");
final int te = sched[(sched.length - 3)];
final int ve = sched[(sched.length - 2)];
this.PSAdd(pS77, te, ve, sid);
this.PSAdd(pS139, te, sid);
this.PSSubmit(pS77, pS139);
@
{\small To update the schedule, first we update the time values in column
\textsf{t2} of Table PD and in columns \textsf{tp} and \textsf{td} of Table
CPD. Then we prepare to update Table CQ. The method does not require
pick-ups and drop-offs in [[sched]] be in the same order as in the pre-existing
remaining schedule. Consequently simply updating column \textsf{t2} in Table CQ
is not enough. Our approach here follows our approach for
updating the route. That is, first we delete the pre-existing remaining
schedule, and then we insert the waypoints in [[sched]]. In order to do so, we
need to know the pick-up and drop-off times of every request in the remaining
schedule, as required by constraints F46 and F47. We also need to know the
latest order number so we can fill in columns \textsf{o1} and \textsf{o2}. Thus
we perform some queries to get the required values before finally submitting
the individual insert statements.}
<<..update schedule>>=
/*a*/<<....update times in pd and cpd>>
@ {\small Here begins the procedure to update Table CQ.}
<<..update schedule>>=
/*b*/<<....populate the tp, td cache and update cq>>
/*c*/<<....select latest order number>>
/*d*/<<....delete remaining schedule from cq>>
/*e*/<<....insert new remaining schedule into cq>>
@
{\small We prepare and submit statements [[S82]], [[S83]], and [[S84]] to
update the times in Tables PD and CPD. As we don't know at this point if a
waypoint in [[sched]] represents a pick-up or a drop-off, we issue both
[[S82]], updating pick-up time \textsf{tp}, and [[S83]], updating drop-off time
\textsf{td}, for all waypoints. As desired, only one of these statements will
succeed due to the [[WHERE]] conditions in the statements.}
<<....update times in pd and cpd>>=
PreparedStatement pS82 = this.PS(conn, "S82");
PreparedStatement pS83 = this.PS(conn, "S83");
PreparedStatement pS84 = this.PS(conn, "S84");
for (int j = 0; j < (sched.length - 2); j += 3) {
  final int tj = sched[(j + 0)];
  final int vj = sched[(j + 1)];
  final int Lj = sched[(j + 2)];
  if (Lj != sid) {
    this.PSAdd(pS82, tj, vj, Lj);
    this.PSAdd(pS83, tj, vj, Lj);
    this.PSAdd(pS84, tj, vj, Lj);
  }
}
this.PSSubmit(pS82, pS83, pS84);
@
{\small To insert a load change due to pick-up or drop-off of a request into
Table CQ, we are required to know the time of both the pick-up and the drop-off
of the request. In this chunk, we loop through all the requests in [[sched]]
and use statement [[S86]] to get the request's pick-up and drop-off times from
the newly-updated Table CPD. We store the obtained times, along with the
request's load, into a temporary map called [[cache]]. At the same time, we go
ahead and use statement [[S140]] to update Table CQ with the discovered pick-up
and drop-off times.}
<<....populate the tp, td cache and update cq>>=
PreparedStatement pS140 = this.PS(conn, "S140");
for (int j = 0; j < (sched.length - 2); j += 3) {
  final int Lj = sched[(j + 2)];
  if (Lj != sid) {
    if (!cache.containsKey(Lj)) {
      final int[] output = DBFetch(conn, "S86", 2, Lj);
      final int tp = output[0];
      final int td = output[1];
      final int rq = this.lu_users.get(Lj)[1];
      cache.put(Lj, new int[] { rq, tp, td });
      this.PSAdd(pS140, tp, td, Lj);
    }
  }
}
this.PSSubmit(pS140);
@
{\small We are also required to know the latest order number so we can
correctly set columns \textsf{o1} and \textsf{o2}. We use statement [[S87]] to
obtain this value and other values from the preceding order. For the special
case where $t=0$, we can skip the query.}
<<....select latest order number>>=
final int[] output = (route[0] == 0 ? null : this.DBFetch(conn, "S87", 3, sid, route[0]));
int t1 = (route[0] == 0 ?  0 : output[0]);
int q1 = (route[0] == 0 ? sq : output[1]);
int o1 = (route[0] == 0 ?  1 : output[2]);
@
{\small We prepare and submit statement [[S80]] to delete the pre-existing
remaining schedule from Table CQ.}
<<....delete remaining schedule from cq>>=
PreparedStatement pS80 = this.PS(conn, "S80");
this.PSAdd(pS80, sid, route[0]);
this.PSSubmit(pS80);
@
{\small We prepare and submit statement [[S14]] to insert the new remaining
schedule into Table CQ, using the pick-up and drop-off times collected in
[[cache]].}
<<....insert new remaining schedule into cq>>=
PreparedStatement pS14 = PS(conn, "S14");
for (int j = 0; j < (sched.length - 2); j += 3) {
  final int t2 = sched[(j + 0)];
  final int v2 = sched[(j + 1)];
  final int Lj = sched[(j + 2)];
  if (Lj != sid) {
    final int[] qpd = cache.get(Lj);
    final int q2 = (t2 == qpd[1] ? q1 + qpd[0] : q1 - qpd[0]);
    final int o2 = o1 + 1;
    this.PSAdd(pS14, sid, sq, se, t1, t2, v2, q1, q2, Lj,
          qpd[0], qpd[1], qpd[2], o1, o2);
    t1 = t2;
    q1 = q2;
    o1 = o2;
  }
}
this.PSSubmit(pS14);
@

\subsubsection{[[DBUpdateServerAddToSchedule]](4)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBUpdateServerAddToSchedule]]}(4) inserts a new
\emph{remaining route} for server $s$ into Table W, and a new \emph{remaining
schedule} with \emph{new labeled waypoints} not found in the pre-existing
remaining schedule into Tables PD, CPD, and CQ.  If the server to be updated
does not exist, a [[UserNotFoundException]] is thrown.  This exception is also
thrown if any labels in the new labeled waypoints is not an existing user.  If
the supplied route contains an edge that does not exist in Table E, an
[[EdgeNotFoundException]] is thrown.  A [[SQLException]] is thrown for other
database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[sid]] (param. 1):&server identifier.\\
Array [[route]] (param. 2):&$2n$-element integer array storing values of
waypoint components in the server's $n$-length remaining route $w_{>t}$.
In the diagram, $|w|-i=n$.
Here $t$ is taken to be [[route[0]]]. Consequently, $(t_i,v_i)$ is \emph{not} part
of the remaining route, in other words \textbf{it must pre-exist in Table W}.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_i$}; & \node {$1:v_i$}; & \node[minimum width=6mm] {...};
 &\node {$(2|w|-2):t_{|w|}$}; & \node {$(2|w|-1):v_{|w|}$}; \\
};
\end{tikzpicture}\\
Array [[sched]] (param. 2):&$3m$-element integer array storing values of
waypoint components and their labels in the server's $m$-length remaining
schedule $b_{>t}$, where $m\leq n$. In the diagram, $|b|-j=m$.  Note
$(t_{i_j},v_{i_j})$ \emph{cannot equal} $(t_i,v_i)$, as $(t_i,v_i)$ is part of
the traveled route and not the remaining route (we cannot change the past).
Therefore $t_{i_j}$ \textbf{must be greater than} $t_i$. Due to rule R3,
$(t_{i_{|b|}},v_{i_{|b|}})$ \textbf{must equal} $(t_{|w|},v_{|w|})$.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_{i_j}$}; & \node {$1:v_{i_j}$}; & \node {$2:L(b_j)$}; & \node[minimum width=6mm] {...};
 &\node {$(2|b|-3):t_{i_{|b|}}$}; & \node {$(2|b|-2):v_{i_{|b|}}$}; & \node {$(2|b|-1):L(b_{|b|})$};\\
};
\end{tikzpicture}

If a waypoint has multiple labels, write them side-by-side, \textit{e.g.}
to record two labels $L_1(b_j)$ and $L_2(b_j)$ on waypoint $b_j$, write
(indices omitted for clarity):

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node[minimum width=6mm] {...};
 &\node {$t_{i_j}$}; & \node {$v_{i_j}$};
 &\node {$L_1(b_j)$};
 &\node {$t_{i_j}$}; & \node {$v_{i_j}$};
 &\node {$L_2(b_j)$};
 &\node[minimum width=6mm] {...};\\
};
\end{tikzpicture}

If a waypoint has multiple labels with some indicating drop-offs, \textbf{write
the drop-offs first} before any of the pick-ups, otherwise C98 violation may
occur.\\
Array [[rid]] (param. 4):&$k$-element integer array storing request identifiers
used to label \emph{new waypoints} not found in the pre-existing schedule but
found in the new remaining schedule [[sched]]. The order of this array doesn't
matter.
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may delete and insert rows into Table W, may
update columns in Table CW, may update columns in Tables PD and CPD,
may delete and insert rows into Table CQ.\\
\textbf{Throws:} [[UserNotFoundException]] if server does not exist or if
any request identifier in [[rid]] (param. 4) cannot be found,
[[EdgeNotFoundException]] if [[route]] contains an edge that does not exist
in Table E, or [[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Update server add to schedule>>=
public void DBUpdateServerAddToSchedule(
    final int sid, final int[] route, final int[] sched, final int[] rid)
throws UserNotFoundException, EdgeNotFoundException, SQLException {
  if (!this.lu_users.containsKey(sid)) {
    throw new UserNotFoundException("User "+sid+" not found.");
  }
  for (final int r : rid) {
    if (!this.lu_users.containsKey(r)) {
      throw new UserNotFoundException("User "+r+" not found.");
    }
  }
  Map<Integer, int[]> cache  = new HashMap<>();
  Map<Integer, int[]> cache2 = new HashMap<>();
  try (<<Open [[conn]]>>) {
    try {
/*L1*/<<..fetch [[sq]] and [[se]]>>
/*L2*/<<..update route>>
/*L3*/<<..update and add to schedule>>
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
@ %def DBUpdateServerAddToSchedule
{\small If all goes well, we add each request identifier in [[rid]] into
[[lu_rstatus]] and change the value to [[true]], indicating that the request
is now \emph{assigned}.}
<<Update server add to schedule>>=
  for (final int r : rid) {
    this.lu_rstatus.put(r, true);
  }
}
@
{\small After re-using some chunks from [[DBUpdateServerRoute]](3) to update
[[route]] (labels [[L1]] and [[L2]] above), we proceed to update [[sched]].}
<<..update and add to schedule>>=
/*a*/<<....update times in pd and cpd>>
/*b*/<<....populate the tp, td cache and vp, vd cache and update cq>>
/*c*/<<....select latest order number>>
/*d*/<<....delete remaining schedule from cq>>
/*e*/<<....insert new remaining schedule into cq>>
/*f*/<<....insert into pd, cpd>>
@
{\small Just as we needed pick-up and drop-off times when updating the schedule
in [[DBupdateServerRoute]](3), we also need them here. But in addition, we
require to get the pick-up and drop-off \emph{vertices} of the new labeled
waypoints in [[sched]] so that we can insert them into column \textsf{v2} in
Table PD and columns \textsf{vp} and \textsf{vd} in Table CPD. For this purpose
we introduce a second temporary map called [[cache2]].}
<<....populate the tp, td cache and vp, vd cache and update cq>>=
PreparedStatement pS140 = this.PS(conn, "S140");
for (int j = 0; j < (sched.length - 2); j += 3) {
  final int Lj = sched[(j + 2)];
  if (Lj != sid && !cache.containsKey(Lj)) {
    final int rq = lu_users.get(Lj)[1];
@
{\small If the waypoint we are working on in the [[for]] loop is a new
labeled waypoint, meaning it is not found in the pre-existing remaining
schedule, then it represents a new pick-up or drop-off for some request.
We need to get both pick-up and drop-off vertices of this request so that
we can insert these values into Tables PD and CPD. We introduce a boolean
[[flagged]] to detect if the waypoint is new or not.}
<<....populate the tp, td cache and vp, vd cache and update cq>>=
    boolean flagged = false;
    <<......check if new job>>
    if (flagged) {
      <<......get tp, vp, td, vd of new job>>
@
{\small If the waypoint we are working on is not a new labeled waypoint, then
we simply cache the pick-up and drop-off time as we did in
[[DBUpdateServerRoute]](3). At the same time we prepare and submit statement
[[S140]] to update the times in Table CQ.}
<<....populate the tp, td cache and vp, vd cache and update cq>>=
    } else {
      final int[] output = this.DBFetch(conn, "S86", 2, Lj);
      final int tp = output[0];
      final int td = output[1];
      this.PSAdd(pS140, tp, td, Lj);
      cache.put(Lj, new int[] { rq, tp, td });
    }
  }
}
this.PSSubmit(pS140);
@
{\small We do a linear search through [[rid]] (param. 4) to determine if a
waypoint is newly labeled or not.}
<<......check if new job>>=
for (final int r : rid) {
  if (Lj == r) {
    flagged = true;
    break;
  }
}
@
{\small If a waypoint is newly labeled, it can either be a new pick-up or a new
drop-off. It is a violation to have a pick-up without a drop-off or vice versa,
so we know that newly labeled waypoints come in pairs. If the label for the
waypoint we are working on doesn't appear in [[cache]], then we know the
waypoint must be a pick-up because it is the first time we've seen it.  We scan
the remainder of [[sched]] to find the corresponding drop-off. Once we've found
it, we put the pick-up and drop-off times into [[cache]] and the pick-up and
drop-off vertices into [[cache2]].}
<<......get tp, vp, td, vd of new job>>=
final int tp = sched[(j + 0)];
final int vp = sched[(j + 1)];
for (int k = (j + 3); k < (sched.length - 2); k += 3) {
  if (Lj == sched[(k + 2)]) {
    final int td = sched[(k + 0)];
    final int vd = sched[(k + 1)];
    cache. put(Lj, new int[] { rq, tp, td });
    cache2.put(Lj, new int[] { vp, vd });
    break;
  }
}
@
{\small After re-using the chunk from [[DBUpdateServerRoute]](3) to insert the
remaining schedule into Table CQ, we prepare and submit statements [[S12]] and
[[S13]] to insert the new labeled waypoints into Tables PD and CPD.}
<<....insert into pd, cpd>>=
PreparedStatement pS12 = this.PS(conn, "S12");
PreparedStatement pS13 = this.PS(conn, "S13");
for (final int r : rid) {
  final int[] output2 = this.DBFetch(conn, "S51", 5, r);
  final int rq = output2[0];
  final int re = output2[1];
  final int rl = output2[2];
  final int ro = output2[3];
  final int rd = output2[4];
  final int[] qpd = cache.get(r);
  final int[]  pd = cache2.get(r);
  this.PSAdd(pS12, sid, qpd[1], pd[0], r);
  this.PSAdd(pS12, sid, qpd[2], pd[1], r);
  this.PSAdd(pS13, sid, se, route[(route.length - 2)], qpd[1], pd[0], qpd[2], pd[1],
        r, re, rl, ro, rd);
}
this.PSSubmit(pS12, pS13);
@

\subsubsection{[[DBUpdateServerRemoveFromSchedule]](4)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBUpdateServerRemoveFromSchedule]](4)} inserts a new
\emph{remaining route} for server $s$ into Table W, and a new \emph{remaining
schedule} with \emph{some pre-existing labeled waypoints removed} into Tables
PD, CPD, and CQ. If the server to be update does not exist, a
[[UserNotFoundException]] is thrown.  This exception is also thrown if any
labels in the new labeled waypoints is not an existing user.  If the supplied
route contains an edge that does not exist in Table E, an
[[EdgeNotFoundException]] is thrown.  A [[SQLException]] is thrown for other
database failures.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[sid]] (param. 1):&server identifier.\\
Array [[route]] (param. 2):&$2n$-element integer array storing values of
waypoint components in the server's $n$-length remaining route $w_{>t}$.
In the diagram, $|w|-i=n$.
Here $t$ is taken to be [[route[0]]]. Consequently, $(t_i,v_i)$ is \emph{not} part
of the remaining route, in other words \textbf{it must pre-exist in Table W}.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_i$}; & \node {$1:v_i$}; & \node[minimum width=6mm] {...};
 &\node {$(2|w|-2):t_{|w|}$}; & \node {$(2|w|-1):v_{|w|}$}; \\
};
\end{tikzpicture}\\
Array [[sched]] (param. 2):&$3m$-element integer array storing values of
waypoint components and their labels in the server's $m$-length remaining
schedule $b_{>t}$, where $m\leq n$. In the diagram, $|b|-j=m$.  Note
$(t_{i_j},v_{i_j})$ \emph{cannot equal} $(t_i,v_i)$, as $(t_i,v_i)$ is part of
the traveled route and not the remaining route (we cannot change the past).
Therefore $t_{i_j}$ \textbf{must be greater than} $t_i$. Due to rule R3,
$(t_{i_{|b|}},v_{i_{|b|}})$ \textbf{must equal} $(t_{|w|},v_{|w|})$.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:t_{i_j}$}; & \node {$1:v_{i_j}$}; & \node {$2:L(b_j)$}; & \node[minimum width=6mm] {...};
 &\node {$(2|b|-3):t_{i_{|b|}}$}; & \node {$(2|b|-2):v_{i_{|b|}}$}; & \node {$(2|b|-1):L(b_{|b|})$};\\
};
\end{tikzpicture}

If a waypoint has multiple labels, write them side-by-side, \textit{e.g.}
to record two labels $L_1(b_j)$ and $L_2(b_j)$ on waypoint $b_j$, write
(indices omitted for clarity):

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node[minimum width=6mm] {...};
 &\node {$t_{i_j}$}; & \node {$v_{i_j}$};
 &\node {$L_1(b_j)$};
 &\node {$t_{i_j}$}; & \node {$v_{i_j}$};
 &\node {$L_2(b_j)$};
 &\node[minimum width=6mm] {...};\\
};
\end{tikzpicture}

If a waypoint has multiple labels with some indicating drop-offs, \textbf{write
the drop-offs first} before any of the pick-ups, otherwise C98 violation may
occur.\\ Array [[rid]] (param. 4):&$k$-element integer array storing request
identifiers found in the pre-existing schedule \emph{but not found in the new
remaining schedule} [[sched]]. The order of this array doesn't matter.
\end{tabular}\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may delete and insert rows into Table W, may
update columns in Table CW, may update columns in Tables PD and CPD,
may delete and insert rows into Table CQ.\\
\textbf{Throws:} [[UserNotFoundException]] if server does not exist or if
any request identifier in [[rid]] (param. 4) cannot be found,
[[EdgeNotFoundException]] if [[route]] contains an edge that does not exist
in Table E, or [[SQLException]] for other database failures.\\
\bottomrule
\end{tabular}
<<Update server remove from schedule>>=
public void DBUpdateServerRemoveFromSchedule(
    final int sid, final int[] route, final int[] sched, final int[] rid)
throws UserNotFoundException, EdgeNotFoundException, SQLException {
  if (!this.lu_users.containsKey(sid)) {
    throw new UserNotFoundException("User "+sid+" not found.");
  }
  for (final int r : rid) {
    if (!this.lu_users.containsKey(r)) {
      throw new UserNotFoundException("User "+r+" not found.");
    }
  }
  Map<Integer, int[]> cache = new HashMap<>();
  try (<<Open [[conn]]>>) {
    try {
/*L1*/<<..fetch [[sq]] and [[se]]>>
/*L2*/<<..update route>>
/*L3*/<<..update schedule>>
/*L4*/<<..remove jobs from pd, cpd>>
      conn.commit();
    } catch (SQLException e) {
      conn.rollback();
      throw e;
    }
  } catch (SQLException e) {
    throw e;
  }
@ %def DBUpdateServerRemoveFromSchedule
{\small If all goes well, we put each request indentifier in [[rid]] into
[[lu_rstatus]] and change the value to [[false]], indicating that the request
is now \emph{unassigned}.}
<<Update server remove from schedule>>=
  for (final int r : rid) {
    this.lu_rstatus.put(r, false);
  }
}
@
{\small We re-use chunks from [[DBUpdateServerRoute]](3) to update the route
and the schedule. Then we prepare and submit statements [[S42]] and [[S43]] to
delete labeled waypoints from Tables PD and CPD.}
<<..remove jobs from pd, cpd>>=
PreparedStatement pS42 = this.PS(conn, "S42");
PreparedStatement pS43 = this.PS(conn, "S43");
for (final int r : rid) {
  this.PSAdd(pS42, r);
  this.PSAdd(pS43, r);
}
this.PSSubmit(pS42, pS43);
@

\subsection{Read Methods}
\label{sec:read-methods}

\subsubsection{[[DBQuery]](2)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQuery]]}(2) executes an arbitrary [[SELECT]]
query against the Jargo database instance.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
String [[sql]] (param. 1):&[[SELECT]] statement to execute.\\
Integer [[ncols]] (param. 2):&number of columns $n$ in the selection.\\
\end{tabular}
\textbf{Returns:} results of the query flattened into an integer array,
or [[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {...};
 &\node {$in+j:\textrm{value at column $j$, row $i$ of the result set}$};
 &\node {...};\\
};
\end{tikzpicture}

where $i$, $j$ start from 0.\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query custom statement>>=
public int[] DBQuery(final String sql, final int ncols) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    Statement stmt = conn.createStatement(
      ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    ResultSet res = stmt.executeQuery(sql);
@
{\small The JDBC method [[ResultSet.last]](0) returns [[false]] if there are no
results.  We use the return value to determine whether or not to continue
flattening results.}
<<Query custom statement>>=
    if (res.last()) {
      <<..flatten results>>
    }
    conn.close();
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQuery
{\small In the flattening procedure, we simply loop through the result rows and
columns, adding values into their respective positions in the returned
[[output]] array.}
<<..flatten results>>=
output = new int[(ncols*res.getRow())];
res.first();
do {
  for (int j = 1; j <= ncols; j++) {
    output[((res.getRow() - 1)*ncols + (j - 1))] = res.getInt(j);
  }
} while (res.next());
@

\subsubsection{[[DBQueryCountVertices]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryCountVertices]]}(0) returns the total number
of vertices in Table V.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{number of vertices in Table V}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query count of vertices>>=
public int[] DBQueryCountVertices() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S62", 1);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryCountVertices

\subsubsection{[[DBQueryCountEdges]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryCountEdges]]}(0) returns the total number
of vertices in Table V.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{number of edges in Table E}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query count of edges>>=
public int[] DBQueryCountEdges() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S63", 1);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryCountEdges

\subsubsection{[[DBQueryVertex]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryVertex]]}(1) returns the longitude and
latitude coordinates of the given vertex. If the vertex does not exist,
a [[VertexNotFoundException]] is thrown.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[v]] (param. 1):&vertex identifier.
\end{tabular}
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{longitude of }\texttt{v}$};
 &\node {$1:\textrm{latitude of }\texttt{v}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[VertexNotFoundException]] if vertex does not exist, or
[[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query vertex>>=
public int[] DBQueryVertex(final int v)
throws VertexNotFoundException, SQLException {
  if (!this.lu_vertices.containsKey(v)) {
    throw new VertexNotFoundException("Vertex "+v+" not found.");
  }
  return this.lu_vertices.get(v).clone();
}
@ %def DBQueryVertex

\subsubsection{[[DBQueryAllVertices]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryAllVertices]]}(0) returns all rows in Table V.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{vertex identifier}$};
 &\node {$1:\textrm{longitude of the vertex}$};
 &\node {$2:\textrm{latitude of the vertex}$};
 &\node {...};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query all vertices>>=
public int[] DBQueryAllVertices() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S136", 3);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryAllVertices

\subsubsection{[[DBQueryEdge]](2)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryEdge]]}(2) returns the distance and
maximum free-flow speed along the given edge.
An [[EdgeNotFoundException]] is thrown if the edge does not exist.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[v1]] (param. 1):&source vertex identifier $v_1$\\
Integer [[v2]] (param. 2):&target vertex identifier $v_2$
\end{tabular}\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:d(v_1,v_2)$}; & \node {$1:v^\textrm{max}(v_1,v_2)$}; \\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query edge>>=
public int[] DBQueryEdge(final int v1, final int v2)
throws EdgeNotFoundException, SQLException {
  if (!(this.lu_edges.containsKey(v1) && this.lu_edges.get(v1).containsKey(v2))) {
    throw new EdgeNotFoundException("Edge ("+v1+", "+v2+") not found.");
  }
  return this.lu_edges.get(v1).get(v2).clone();
}
@ %def DBQueryEdge

\subsubsection{[[DBQueryAllEdges]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryAllEdges]]}(0) returns all rows in Table E.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{source vertex identifier $v_1$}$};
 &\node {$1:\textrm{target vertex identifier $v_2$}$};
 &\node {$2:d(v_1,v_2)$};
 &\node {$3:v^\textrm{max}(v_1,v_2)$};
 &\node {...};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query all edges>>=
public int[] DBQueryAllEdges() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S137", 4);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryAllEdges

\subsubsection{[[DBQueryStatisticsEdges]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryStatisticsEdges]]}(0) returns some edge statistics.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{min. weight}$};
 &\node {$1:\textrm{max. weight}$};
 &\node {$2:\textrm{avg. weight}$};
 &\node {$3:\textrm{min. speed}$};
 &\node {$4:\textrm{max. speed}$};
 &\node {$5:\textrm{avg. speed}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query edge statistics>>=
public int[] DBQueryStatisticsEdges() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S65", 6);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryStatisticsEdges

\subsubsection{[[DBQueryMBR]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryMBR]]}(0) returns the minimum-bounding
rectangle of the road network.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{min. longitude}$};
 &\node {$1:\textrm{max. longitude}$};
 &\node {$2:\textrm{min. latitude}$};
 &\node {$3:\textrm{max. latitude}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query MBR>>=
public int[] DBQueryMBR() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S64", 4);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryMBR

\subsubsection{[[DBQueryCountServers]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryCountSevers]]}(0) returns the total number
of servers in Table S.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{number of servers in Table S}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query count of servers>>=
public int[] DBQueryCountServers() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S66", 1);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryCountServers

\subsubsection{[[DBQueryCountRequests]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryCountRequests]]}(0) returns the total number
of requests in Table R.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{number of requests in Table R}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query count of requests>>=
public int[] DBQueryCountRequests() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S67", 1);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryCountRequests

\subsubsection{[[DBQueryAllUsers]](0)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryAllUsers]]}(0) returns all rows in view [[r_user]].
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{user identifier for user $u$}$};
 &\node {$1:u_\texttt{q}$};
 &\node {$2:u_\texttt{e}$};
 &\node {$3:u_\texttt{l}$};
 &\node {$4:u_\texttt{o}$};
 &\node {$5:u_\texttt{d}$};
 &\node {$6:d_u$};
 &\node {...};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query ridesharing user>>=
public int[] DBQueryAllUsers() throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S141", 7);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryAllUsers

\subsubsection{[[DBQueryUser]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryUser]]}(0) returns the properties of the
given user.
A [[UserNotFoundException]] is thrown if the user does not exist.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[uid]] (param. 1):&user identifier for user $u$
\end{tabular}
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{user identifier}$};
 &\node {$1:u_\texttt{q}$};
 &\node {$2:u_\texttt{e}$};
 &\node {$3:u_\texttt{l}$};
 &\node {$4:u_\texttt{o}$};
 &\node {$5:u_\texttt{d}$};
 &\node {$6:d_u$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[UserNotFoundException]] if user does not exist, or
[[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query ridesharing user>>=
public int[] DBQueryUser(final int uid)
throws UserNotFoundException, SQLException {
  if (!this.lu_users.containsKey(uid)) {
    throw new UserNotFoundException("User "+uid+" not found.");
  }
  return this.lu_users.get(uid).clone();
}
@ %def DBQueryUser

\subsubsection{[[DBQueryRequestStatus]](2)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryRequestStatus]]}(0) returns the status of
the given request at the given time (Eq.~\ref{eq:status}).
A [[UserNotFoundException]] is thrown if the user does not exist.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[rid]] (param. 1):&user identifier for request $r$\\
Integer [[t]] (param. 2):&a time
\end{tabular}\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{status of $r$ at time $t$}$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[UserNotFoundException]] if user does not exist, or
[[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query request status>>=
public int[] DBQueryRequestStatus(int rid, int t) throws UserNotFoundException, SQLException {
  if (!this.lu_users.containsKey(rid)) {
    throw new UserNotFoundException("User "+rid+" not found.");
  }
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S133", 1, rid, t);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryRequestStatus

\subsubsection{[[DBQueryRequestIsAssigned]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryRequestIsAssigned]]}(1) returns a
positive-length array if the given request is assigned (even if the request is
not yet picked-up), or [[null]] if the request is not.  A
[[UserNotFoundException]] is thrown if the user does not exist.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[rid]] (param. 1):&user identifier for request $r$
\end{tabular}\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:1$};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[UserNotFoundException]] if user does not exist, or
[[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query request is assigned?>>=
public int[] DBQueryRequestIsAssigned(int rid) throws SQLException {
  try (<<Open [[conn]]>>) {
    return this.DBFetch(conn, "S148", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
}
@ %def DBQueryRequestIsAssigned

\subsubsection{[[DBQueryQueuedRequests]](1)}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Method \textcolor{blue}{[[DBQueryQueuedRequests]]}(1) returns the requests
eligible for assignment at the given time. A request $r$ is ``eligible'' if it
is not assigned at the given time, and if the given time is between the
request's early time $r_\texttt{e}$ and
$r_\texttt{e}+\texttt{REQUEST\_TIMEOUT}$.
A [[SQLException]] is thrown in case of database failure.\\
\midrule
\textbf{Parameters:} \\
\begin{tabular}{lp{116mm}}
Integer [[t]] (param. 1):&a time
\end{tabular}\\
\textbf{Returns:} results of the query flattened into an integer array, or
[[null]] if no results.

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{user identifier for user $u$}$};
 &\node {$1:u_\texttt{q}$};
 &\node {$2:u_\texttt{e}$};
 &\node {$3:u_\texttt{l}$};
 &\node {$4:u_\texttt{o}$};
 &\node {$5:u_\texttt{d}$};
 &\node {$6:d_u$};
 &\node {...};\\
};
\end{tikzpicture}\\
\textbf{Side Effects:} none.\\
\textbf{Throws:} [[SQLException]] if database failure is encountered.\\
\bottomrule
\end{tabular}
<<Query queued requests>>=
public int[] DBQueryQueuedRequests(int t) throws SQLException {
  try (<<Open [[conn]]>>) {
@ %def DBQueryQueuedRequests
{\small Our approach is to first select all requests where $t$ is between the
request's early time $r_\texttt{e}$ and
$r_\texttt{e}+\texttt{REQUEST\_TIMEOUT}$.  Then, we return a filtered subset of
these requests that are unassigned. As we don't know how many requests will
returned in the end, we initialize a temporary array [[temp1]] to hold the
pre-filter number of requests.}
<<Query queued requests>>=
    final int[] output = this.DBFetch(conn, "S143", 7, t, t, REQUEST_TIMEOUT);
    int[] temp1 = new int[output.length];
    int j = 0;
    for (int i = 0; i < (output.length - 6); i += 7) {
      if (this.lu_rstatus.get(output[i]) == false) {
        temp1[(j + 0)] = output[(i + 0)];
        temp1[(j + 1)] = output[(i + 1)];
        temp1[(j + 2)] = output[(i + 2)];
        temp1[(j + 3)] = output[(i + 3)];
        temp1[(j + 4)] = output[(i + 4)];
        temp1[(j + 5)] = output[(i + 5)];
        temp1[(j + 6)] = output[(i + 6)];
        j += 7;
      }
    }
@
{\small We copy the non-null elements of [[temp1]] into a second array
[[temp2]] and return [[temp2]].}
<<Query queued requests>>=
    int[] temp2 = new int[j];
    for (int i = 0; i < j; i += 7) {
      temp2[(i + 0)] = temp1[(i + 0)];
      temp2[(i + 1)] = temp1[(i + 1)];
      temp2[(i + 2)] = temp1[(i + 2)];
      temp2[(i + 3)] = temp1[(i + 3)];
      temp2[(i + 4)] = temp1[(i + 4)];
      temp2[(i + 5)] = temp1[(i + 5)];
      temp2[(i + 6)] = temp1[(i + 6)];
    }
    return temp2;
  } catch (SQLException e) {
    throw e;
  }
}
@

\subsubsection{[[DBQueryActiveServers]](1)}
<<Query active servers>>=
public int[] DBQueryActiveServers(int t) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S134", 1, t, t, t);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryActiveServers

\subsubsection{[[DBQueryServerLocationsAll]](1)}
<<Query all server locations>>=
public int[] DBQueryServerLocationsAll(int t) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S59", 3, t, t, t, t);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerLocationsAll

\subsubsection{[[DBQueryServerLocationsActive]](1)}
<<Query active server locations>>=
public int[] DBQueryServerLocationsActive(int t) throws SQLException {
  int[] output = new int[] { };
  int[] temp1 = new int[] { };
  int[] temp2 = new int[] { };
  int j = 0;
  int sid = 0;
  int te = 0;
  try (<<Open [[conn]]>>) {
    temp1 = DBFetch(conn, "S134", 2, t, t, t);      // <-- 10 ms/call
    output = new int[(3*(temp1.length/2))];
    for (int i = 0; i < temp1.length - 1; i += 2) {
      sid = temp1[(i + 0)];
       te = temp1[(i + 1)];
      temp2 = (t < te
        ? DBFetch(conn, "S135", 2, sid, sid, t, t)  // <-- 0.07-0.15 ms/call
        : DBFetch(conn, "S147", 2, sid, sid));      // <-- 0.04-0.15 ms/call
      output[(j + 0)] = sid;
      output[(j + 1)] = temp2[0];
      output[(j + 2)] = temp2[1];
      j += 3;
    }
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerLocationsActive

\subsubsection{[[DBQueryServerRoute]](1)}
<<Query routes>>=
public int[] DBQueryServerRoute(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S60", 2, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerRoute

\subsubsection{[[DBQueryServerSchedule]](1)}
Schedules may contain [[null]] values in the labels. A null is recorded
as a 0 in the output array due to [[getInt]] in [[DBFetch]].
<<Query schedules>>=
public int[] DBQueryServerSchedule(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S61", 4, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerSchedule

\subsubsection{[[DBQueryServerRemainingRoute]](2)}
<<Query remaining routes>>=
public int[] DBQueryServerRemainingRoute(int sid, int t) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S129", 2, sid, t);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerRemainingRoute

\subsubsection{[[DBQueryServerRemainingSchedule]](2)}
Aggressively invalidate the cache.
<<Query remaining schedules>>=
public int[] DBQueryServerRemainingSchedule(int sid, int t)
throws SQLException {
  int[] output = new int[] { };
  int[] temp = new int[] { };
  try (<<Open [[conn]]>>) {
    temp = DBFetch(conn, "S144", 3, sid, t);
    output = new int[4*temp.length/3 + 4];
    int j = 0;
    for (int i = 0; i < temp.length - 2; i += 3) {
      output[(j + 0)] = temp[(i + 0)];
      output[(j + 1)] = temp[(i + 1)];
      output[(j + 2)] = 0;
      output[(j + 3)] = temp[(i + 2)];
      j += 4;
    }
    temp = DBFetch(conn, "S145", 2, sid);
    output[(j + 0)] = temp[0];
    output[(j + 1)] = temp[1];
    output[(j + 2)] = sid;
    output[(j + 3)] = 0;
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerRemainingSchedule

\subsubsection{[[DBQueryServerRemainingDistance]](2)}
<<Query remaining distance>>=
public int[] DBQueryServerRemainingDistance(int sid, int t)
throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S142", 1, sid, t);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerRemainingDistance

\subsubsection{[[DBQueryServerRemainingDuration]](2)}
<<Query remaining duration>>=
public int[] DBQueryServerRemainingDuration(int sid, int t)
throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S127", 1, sid, t);
    output[0] -= t;
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerRemainingDuration

\subsubsection{[[DBQueryServerMaxLoad]](2)}
<<Query max load>>=
public int[] DBQueryServerMaxLoad(int sid, int t) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S73", 1, sid, t);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerMaxLoad

\subsubsection{[[DBQueryServerPendingAssignments]](2)}
<<Query server pending assignments>>=
public int[] DBQueryServerPendingAssignments(int sid, int t) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S100", 1, t, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerPendingAssignments

\subsubsection{[[DBQueryServerCompletedAssignments]](2)}
<<Query server completed assignments>>=
public int[] DBQueryServerCompletedAssignments(int sid, int t) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S101", 1, t, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerCompletedAssignments

\subsubsection{[[DBQueryServiceRate]](0)}
The service rate $\mu$ is returned as integer $10000\mu$, for example
if $\mu=.1234$, then [[DBQueryServiceRate]](0) returns $1234$.
<<Query various metrics>>=
public int[] DBQueryServiceRate() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S102", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServiceRate

\subsubsection{[[DBQueryBaseDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryBaseDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S103", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryBaseDistanceTotal

\subsubsection{[[DBQueryServerBaseDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryServerBaseDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S110", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerBaseDistanceTotal

\subsubsection{[[DBQueryRequestBaseDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestBaseDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S111", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestBaseDistanceTotal

\subsubsection{[[DBQueryRequestBaseDistanceUnassigned]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestBaseDistanceUnassigned() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S138", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestBaseDistanceUnassigned

\subsubsection{[[DBQueryServerTravelDistance]](1)}
<<Query various metrics>>=
public int[] DBQueryServerTravelDistance(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S104", 1, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerTravelDistance

\subsubsection{[[DBQueryServerTravelDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryServerTravelDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S105", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerTravelDistanceTotal

\subsubsection{[[DBQueryServerCruisingDistance]](1)}
<<Query various metrics>>=
public int[] DBQueryServerCruisingDistance(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S106", 1, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerCruisingDistance

\subsubsection{[[DBQueryServerCruisingDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryServerCruisingDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S107", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerCruisingDistanceTotal

\subsubsection{[[DBQueryServerServiceDistance]](1)}
<<Query various metrics>>=
public int[] DBQueryServerServiceDistance(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S108", 1, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerServiceDistance

\subsubsection{[[DBQueryServerServiceDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryServerServiceDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S109", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerServiceDistanceTotal

\subsubsection{[[DBQueryRequestDetourDistance]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestDetourDistance(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S112", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestDetourDistance

\subsubsection{[[DBQueryRequestDetourDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestDetourDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S113", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestDetourDistanceTotal

\subsubsection{[[DBQueryRequestTransitDistance]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestTransitDistance(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S114", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestTransitDistance

\subsubsection{[[DBQueryRequestTransitDistanceTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestTransitDistanceTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S115", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestTransitDistanceTotal

\subsubsection{[[DBQueryServerTravelDuration]](1)}
<<Query various metrics>>=
public int[] DBQueryServerTravelDuration(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S116", 1, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerTravelDuration

\subsubsection{[[DBQueryServerTravelDurationTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryServerTravelDurationTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S117", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerTravelDurationTotal

\subsubsection{[[DBQueryRequestPickupDuration]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestPickupDuration(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S118", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestPickupDuration

\subsubsection{[[DBQueryRequestPickupDurationTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestPickupDurationTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S119", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestPickupDurationTotal

\subsubsection{[[DBQueryRequestTransitDuration]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestTransitDuration(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S120", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestTransitDuration

\subsubsection{[[DBQueryRequestTransitDurationTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestTransitDurationTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S121", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestTransitDurationTotal

\subsubsection{[[DBQueryRequestTravelDuration]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestTravelDuration(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S122", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestTravelDuration

\subsubsection{[[DBQueryRequestTravelDurationTotal]](0)}
<<Query various metrics>>=
public int[] DBQueryRequestTravelDurationTotal() throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S123", 1);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestTravelDurationTotal

\subsubsection{[[DBQueryRequestDepartureTime]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestDepartureTime(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S124", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestDepartureTime

\subsubsection{[[DBQueryServerDepartureTime]](1)}
<<Query various metrics>>=
public int[] DBQueryServerDepartureTime(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S125", 1, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerDepartureTime

\subsubsection{[[DBQueryRequestArrivalTime]](1)}
<<Query various metrics>>=
public int[] DBQueryRequestArrivalTime(int rid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S126", 1, rid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryRequestArrivalTime

\subsubsection{[[DBQueryServerArrivalTime]](1)}
<<Query various metrics>>=
public int[] DBQueryServerArrivalTime(int sid) throws SQLException {
  int[] output = new int[] { };
  try (<<Open [[conn]]>>) {
    output = DBFetch(conn, "S127", 1, sid);
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBQueryServerArrivalTime

\section{Private Methods}
\label{sec:private}
<<[[Storage]] private methods>>=
<<Setup JDBC driver>>
<<Initialize statements>>
<<Prepare a prepared statement>>
<<Fetch items from database>>
<<Fill prepared statement>>
<<Submit prepared statement batch>>
@

\subsection{[[setupDriver]](0)}
The following code registers a connection pool to the JDBC driver.  Portions of
this code are licensed by the Apache Software Foundation.  The connection pool
allows us to concurrently submit multiple SQL commands against the database
from different threads.
<<Setup JDBC driver>>=
private void setupDriver() throws SQLException, ClassNotFoundException {
  connection_factory = new DriverManagerConnectionFactory(CONNECTIONS_URL);
  poolableconnection_factory = new PoolableConnectionFactory(connection_factory, null);
  poolableconnection_factory.setPoolStatements(true);
  poolableconnection_factory.setDefaultAutoCommit(false);
  poolableconnection_factory.setMaxOpenPreparedStatements(STATEMENTS_MAX_COUNT);
  GenericObjectPoolConfig cfg = new GenericObjectPoolConfig();
  cfg.setMinIdle(100000);
  cfg.setMaxIdle(100000);
  cfg.setMaxTotal(100000);
  pool = new GenericObjectPool<>(poolableconnection_factory, cfg);
  poolableconnection_factory.setPool(pool);
  Class.forName("org.apache.commons.dbcp2.PoolingDriver");
  driver = (PoolingDriver) DriverManager.getDriver(CONNECTIONS_DRIVER_URL);
  driver.registerPool(CONNECTIONS_POOL_NAME, pool);
}
@ %def setupDriver

\subsection{[[PS]](1)}
<<Prepare a prepared statement>>=
private PreparedStatement PS(Connection conn, String k) throws SQLException {
  PreparedStatement p = null;
  try {
    p = conn.prepareStatement(lu_pstr.get(k),
      ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    p.clearBatch();
    p.clearParameters();
  } catch (SQLException e) {
    throw e;
  }
  return p;
}
@ %def PS

\subsection{[[DBFetch]](3...)}
<<Fetch items from database>>=
private int[] DBFetch(Connection conn, String k, int ncols, Integer... values)
throws SQLException {
  int[] output = new int[] { };
  try {
    PreparedStatement p = PS(conn, k);
    <<..set values for statement>>
    ResultSet res = p.executeQuery();  // <-- if stuck here, investigate locks
    if (res.last() == true) {
      <<..flatten results>>
    }
    res.close();
    p.close();
  } catch (SQLException e) {
    throw e;
  }
  return output;
}
@ %def DBFetch
<<..set values for statement>>=
for (int i = 0; i < values.length; i++) {
  if (values[i] == null) {
    p.setNull((i + 1), java.sql.Types.INTEGER);
  } else {
    p.setInt ((i + 1), values[i]);
  }
}
@

\subsection{[[PSAdd]](2...)}
<<Fill prepared statement>>=
private void PSAdd(PreparedStatement p, Integer... values) throws SQLException {
  p.clearParameters();
  <<..set values for statement>>
  try {
    p.addBatch();
  } catch (SQLException e) {
    throw e;
  }
}
@ %def PSAdd

\subsection{[[PSSubmit]](1...)}
<<Submit prepared statement batch>>=
private void PSSubmit(PreparedStatement... statements) throws SQLException {
  try {
    for (PreparedStatement p : statements) {
      p.executeBatch();
      p.close();
    }
  } catch (SQLException e) {
    throw e;
  }
}
@ %def PSSubmit

\subsection{[[PSInit]](0)}
The [[PSInit]](0) method initializes the statement cache [[lu_pstr]]. Each
statement is placed in its own chunk so it can be referenced wherever the
statement is used.
<<Initialize statements>>=
private void PSInit() {
  String INS = "INSERT INTO ";
  String UPD = "UPDATE ";
  String DEL = "DELETE FROM ";
  String SEL = "SELECT ";
  String q2  = "(?,?)";
  String q3  = "(?,?,?)";
  String q4  = "(?,?,?,?)";
  String q7  = "(?,?,?,?,?,?,?)";
  String q8  = "(?,?,?,?,?,?,?,?)";
  String q9  = "(?,?,?,?,?,?,?,?,?)";
  String q12 = "(?,?,?,?,?,?,?,?,?,?,?,?)";
  String q14 = "(?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
  <<S0>>
  <<S1>>
  <<S2>>
  <<S3>>
  <<S4>>
  <<S5>>
  <<S6>>
  <<S7>>
  <<S8>>
  <<S9>>
  <<S10>>
  <<S11>>
  <<S12>>
  <<S13>>
  <<S14>>
  <<S15>>
  <<S131>>
  <<S77>>
  <<S84>>
  <<S82>>
  <<S83>>
  <<S76>>
  <<S42>>
  <<S43>>
  <<S80>>
  <<S62>>
  <<S64>>
  <<S63>>
  <<S65>>
  <<S46>>
  <<S130>>
  <<S70>>
  <<S48>>
  <<S66>>
  <<S75>>
  <<S51>>
  <<S67>>
  <<S59>>
  <<S128>>
  <<S60>>
  <<S129>>
  <<S61>>
  <<S69>>
  <<S68>>
  <<S85>>
  <<S86>>
  <<S73>>
  <<S87>>
  <<S100>>
  <<S101>>
  <<S102>>
  <<S103>>
  <<S104>>
  <<S105>>
  <<S106>>
  <<S107>>
  <<S108>>
  <<S109>>
  <<S110>>
  <<S111>>
  <<S112>>
  <<S113>>
  <<S114>>
  <<S115>>
  <<S116>>
  <<S117>>
  <<S118>>
  <<S119>>
  <<S120>>
  <<S121>>
  <<S122>>
  <<S123>>
  <<S124>>
  <<S125>>
  <<S126>>
  <<S127>>
  <<S133>>
  <<S134>>
  <<S135>>
  <<S136>>
  <<S137>>
  <<S138>>
  <<S139>>
  <<S140>>
  <<S141>>
  <<S142>>
  <<S143>>
  <<S144>>
  <<S145>>
  <<S147>>
  <<S148>>
  <<S149>>
}
@ %def PSInit
<<S0>>=
this.lu_pstr.put("S0", INS+"V VALUES "+q3);
@ %def S0
<<S1>>=
this.lu_pstr.put("S1", INS+"E VALUES "+q4);
@ %def S1
<<S2>>=
this.lu_pstr.put("S2", INS+"UQ VALUES "+q2);
@ %def S2
<<S3>>=
this.lu_pstr.put("S3", INS+"UE VALUES "+q2);
@ %def S3
<<S4>>=
this.lu_pstr.put("S4", INS+"UL VALUES "+q2);
@ %def S4
<<S5>>=
this.lu_pstr.put("S5", INS+"UO VALUES "+q2);
@ %def S5
<<S6>>=
this.lu_pstr.put("S6", INS+"UD VALUES "+q2);
@ %def S6
<<S7>>=
this.lu_pstr.put("S7", INS+"UB VALUES "+q2);
@ %def S7
<<S8>>=
this.lu_pstr.put("S8", INS+"S VALUES "+q7);
@ %def S8
<<S9>>=
this.lu_pstr.put("S9", INS+"R VALUES "+q7);
@ %def S9
<<S10>>=
this.lu_pstr.put("S10", INS+"W VALUES "+q8);
@ %def S10
<<S70>>=
this.lu_pstr.put("S70", SEL+"sid, sq, se, sl, so, sd, sb FROM S WHERE sid=?");
@ %def S70
<<S11>>=
this.lu_pstr.put("S11", INS+"CW VALUES "+q9);
@ %def S11
<<S12>>=
this.lu_pstr.put("S12", INS+"PD VALUES "+q4);
@ %def S12
<<S13>>=
this.lu_pstr.put("S13", INS+"CPD VALUES "+q12);
@ %def S13
<<S14>>=
this.lu_pstr.put("S14", INS+"CQ VALUES "+q14);
@ %def S14
<<S15>>=
this.lu_pstr.put("S15", UPD+"E SET nu=? WHERE v1=? AND v2=?");
@ %def S15
<<S131>>=
this.lu_pstr.put("S131", UPD+"W SET nu=? WHERE v1=? AND v2=?");
@ %def S131
<<S77>>=
this.lu_pstr.put("S77", UPD+"CW SET te=?, ve=? WHERE sid=?");
@ %def S77
<<S84>>=
this.lu_pstr.put("S84", UPD+"PD SET t2=? WHERE v2=? AND rid=?");
@ %def S84
<<S82>>=
this.lu_pstr.put("S82", UPD+"CPD SET tp=? WHERE vp=? AND rid=?");
@ %def S82
<<S83>>=
this.lu_pstr.put("S83", UPD+"CPD SET td=? WHERE vd=? AND rid=?");
@ %def S83
<<S76>>=
this.lu_pstr.put("S76", DEL+"W WHERE sid=? AND t2>?");
@ %def S76
<<S42>>=
this.lu_pstr.put("S42", DEL+"PD WHERE rid=?");
@ %def S42
<<S43>>=
this.lu_pstr.put("S43", DEL+"CPD WHERE rid=?");
@ %def S43
<<S80>>=
this.lu_pstr.put("S80", DEL+"CQ WHERE sid=? AND t2>?");
@ %def S80
<<S62>>=
this.lu_pstr.put("S62", SEL+"COUNT (*) FROM V WHERE v<>0");
@ %def S62
<<S64>>=
this.lu_pstr.put("S64", SEL+"MIN (lng), MAX (lng), MIN (lat), MAX (lat) "
      + "FROM V WHERE v<>0");
@ %def S64
<<S63>>=
this.lu_pstr.put("S63", SEL+"COUNT (*) FROM E WHERE v1<>0 AND v2<>0");
@ %def S63
<<S65>>=
this.lu_pstr.put("S65", SEL+"MIN (dd), MAX (dd), SUM (dd) / COUNT (dd), "
      + "MIN (nu), MAX (nu), SUM (nu) / COUNT (nu) "
      + "FROM E WHERE v1<>0 AND v2<>0");
@ %def S65
<<S46>>=
this.lu_pstr.put("S46", SEL+"dd, nu FROM E WHERE v1=? AND v2=?");
@ %def S46
<<S130>>=
this.lu_pstr.put("S130", SEL+"lng, lat FROM V WHERE v=?");
@ %def S130
<<S48>>=
this.lu_pstr.put("S48", SEL+"sq, se FROM S WHERE sid=?");
@ %def S48
<<S66>>=
this.lu_pstr.put("S66", SEL+"COUNT (*) FROM S");
@ %def S66
<<S75>>=
this.lu_pstr.put("S75", SEL+"rid, rq, re, rl, ro, rd, rb FROM R WHERE rid=?");
@ %def S75
<<S51>>=
this.lu_pstr.put("S51", SEL+"rq, re, rl, ro, rd FROM R WHERE rid=?");
@ %def S51
<<S67>>=
this.lu_pstr.put("S67", SEL+"COUNT (*) FROM R");
@ %def S67
<<S59>>=
this.lu_pstr.put("S59", SEL+"a.sid, a.t2, a.v2 FROM W AS a INNER JOIN ("
      + "SELECT sid, MIN(ABS(t2-?)) as tdiff FROM W WHERE t2<=? AND v2<>0 "
      + "GROUP BY sid"
      + ") as b ON a.sid=b.sid AND ABS(a.t2-?)=b.tdiff AND a.t2<=?");
@ %def S59
<<S128>>=
this.lu_pstr.put("S128", SEL+"a.sid, a.t2, a.v2 FROM W AS a INNER JOIN ("
      + "SELECT sid FROM CW WHERE te>? OR (ve=0 AND sl>?)"
      + ") as b ON a.sid=b.sid INNER JOIN ("
      + "SELECT sid, MIN(ABS(t2-?)) as tdiff FROM W WHERE t2<=? AND v2<>0 "
      + "GROUP BY sid"
      + ") as c ON a.sid=c.sid AND ABS(a.t2-?)=c.tdiff AND a.t2<=?");
@ %def S128
<<S60>>=
this.lu_pstr.put("S60", SEL+"t, v FROM r_server WHERE sid=? ORDER BY t ASC");
@ %def S60
<<S129>>=
this.lu_pstr.put("S129", SEL+"t, v FROM r_server WHERE sid=? AND t>? ORDER BY t ASC");
@ %def S129
<<S61>>=
this.lu_pstr.put("S61", SEL+"t, v, Ls, Lr FROM r_server WHERE sid=?"
      + "AND (Ls IS NOT NULL OR Lr IS NOT NULL) ORDER BY t ASC");
@ %def S61
Need to join CQ in order to sort by order number [[o2]]. This query has
worse performance after W (r\_server), CQ, PD grow.
<<S69>>=
this.lu_pstr.put("S69", SEL+"t, v, Ls, Lr "
      + "FROM r_server LEFT JOIN CQ ON t=t2 and v=v2 and Lr=rid "
      + "WHERE r_server.sid=?"
      + "   AND (t>? OR v=0)"
      + "   AND (Ls IS NOT NULL OR Lr IS NOT NULL)"
      + "ORDER BY t ASC, o2 ASC");
@ %def S69
<<S68>>=
// A "timeout" of 30 seconds is hard-coded here
this.lu_pstr.put("S68", SEL+"* FROM R WHERE re<=? AND ?<=re+30 AND rid NOT IN  "
      + "(SELECT rid FROM assignments_r)");
@ %def S68
<<S85>>=
this.lu_pstr.put("S85", SEL+"uq FROM UQ WHERE uid=?");
@ %def S85
<<S86>>=
this.lu_pstr.put("S86", SEL+"tp, td FROM CPD WHERE rid=?");
@ %def S86
<<S73>>=
this.lu_pstr.put("S73", SEL+"q2 FROM CQ WHERE sid=? AND t2<=? "
      + "ORDER BY t2 DESC, q2 DESC FETCH FIRST ROW ONLY");
@ %def S73
<<S87>>=
this.lu_pstr.put("S87", SEL+"t2, q2, o2 FROM CQ WHERE sid=? AND t2<=? "
      + "ORDER BY t2 DESC, o2 DESC FETCH FIRST ROW ONLY");
@ %def S87
<<S100>>=
this.lu_pstr.put("S100", SEL+"rid FROM assignments WHERE t>? AND sid=?");
@ %def S100
<<S101>>=
this.lu_pstr.put("S101", SEL+"rid FROM assignments WHERE t<=? AND sid=?");
@ %def S101
<<S102>>=
this.lu_pstr.put("S102", SEL+"* FROM service_rate");
@ %def S102
<<S103>>=
this.lu_pstr.put("S103", SEL+"* FROM dist_base");
@ %def S103
<<S104>>=
this.lu_pstr.put("S104", SEL+"val FROM dist_s_travel WHERE sid=?");
@ %def S104
<<S105>>=
this.lu_pstr.put("S105", SEL+"SUM (val) FROM dist_s_travel");
@ %def S105
<<S106>>=
this.lu_pstr.put("S106", SEL+"val FROM dist_s_cruising WHERE sid=?");
@ %def S106
<<S107>>=
this.lu_pstr.put("S107", SEL+"SUM (val) FROM dist_s_cruising");
@ %def S107
<<S108>>=
this.lu_pstr.put("S108", SEL+"val FROM dist_s_service WHERE sid=?");
@ %def S108
<<S109>>=
this.lu_pstr.put("S109", SEL+"SUM (val) FROM dist_s_service");
@ %def S109
<<S110>>=
this.lu_pstr.put("S110", SEL+"val FROM dist_s_base");
@ %def S110
<<S111>>=
this.lu_pstr.put("S111", SEL+"val FROM dist_r_base");
@ %def S111
<<S112>>=
this.lu_pstr.put("S112", SEL+"val FROM dist_r_detour WHERE rid=?");
@ %def S112
<<S113>>=
this.lu_pstr.put("S113", SEL+"SUM (val) FROM dist_r_detour");
@ %def S113
<<S114>>=
this.lu_pstr.put("S114", SEL+"val FROM dist_r_transit WHERE rid=?");
@ %def S114
<<S115>>=
this.lu_pstr.put("S115", SEL+"SUM (val) FROM dist_r_transit");
@ %def S115
<<S116>>=
this.lu_pstr.put("S116", SEL+"val FROM dur_s_travel WHERE sid=?");
@ %def S116
<<S117>>=
this.lu_pstr.put("S117", SEL+"SUM (val) FROM dur_s_travel");
@ %def S117
<<S118>>=
this.lu_pstr.put("S118", SEL+"val FROM dur_r_pickup WHERE rid=?");
@ %def S118
<<S119>>=
this.lu_pstr.put("S119", SEL+"SUM (val) FROM dur_r_pickup");
@ %def S119
<<S120>>=
this.lu_pstr.put("S120", SEL+"val FROM dur_r_transit WHERE rid=?");
@ %def S120
<<S121>>=
this.lu_pstr.put("S121", SEL+"SUM (val) FROM dur_r_transit");
@ %def S121
<<S122>>=
this.lu_pstr.put("S122", SEL+"val FROM dur_r_travel WHERE rid=?");
@ %def S122
<<S123>>=
this.lu_pstr.put("S123", SEL+"SUM (val) FROM dur_r_travel");
@ %def S123
<<S124>>=
this.lu_pstr.put("S124", SEL+"val FROM t_r_depart WHERE rid=?");
@ %def S124
<<S125>>=
this.lu_pstr.put("S125", SEL+"val FROM t_s_depart WHERE sid=?");
@ %def S125
<<S126>>=
this.lu_pstr.put("S126", SEL+"val FROM t_r_arrive WHERE rid=?");
@ %def S126
<<S127>>=
this.lu_pstr.put("S127", SEL+"val FROM t_s_arrive WHERE sid=?");
@ %def S127
<<S133>>=
this.lu_pstr.put("S133", SEL+"val FROM f_status WHERE rid=? AND t<=? "
    + "ORDER BY t DESC FETCH FIRST ROW ONLY");
@ %def S133
<<S134>>=
this.lu_pstr.put("S134", SEL+"sid, te FROM CW WHERE se<=? AND (?<te OR (ve=0 AND sl>?))");
@ %def S134
<<S135>>=
this.lu_pstr.put("S135", SEL+"t2, v2 FROM W WHERE sid=? AND t2=("
    + "SELECT t1 FROM W WHERE sid=? AND t1 <= ? AND ? < t2)");
@ %def S135
<<S136>>=
this.lu_pstr.put("S136", SEL+"* FROM V");
@ %def S136
<<S137>>=
this.lu_pstr.put("S137", SEL+"* FROM E");
@ %def S137
<<S138>>=
this.lu_pstr.put("S138", SEL+"val FROM dist_r_unassigned");
@ %def S138
<<S139>>=
this.lu_pstr.put("S139", UPD+"CPD SET te=? WHERE sid=?");
@ %def S139
<<S140>>=
this.lu_pstr.put("S140", UPD+"CQ SET tp=?, td=? WHERE rid=?");
@ %def S140
<<S141>>=
this.lu_pstr.put("S141", SEL+"* FROM r_user");
@ %def S141
<<S142>>=
this.lu_pstr.put("S142", SEL+"SUM (dd) FROM W WHERE sid=? AND t2>?");
@ %def S142
<<S143>>=
this.lu_pstr.put("S143", SEL+"* FROM R WHERE re<=? AND ?<=re+?");
@ %def S143
<<S144>>=
this.lu_pstr.put("S144", SEL+"t2, v2, rid FROM CQ WHERE sid=? AND t2>? ORDER BY o2 ASC");
@ %def S144
<<S145>>=
this.lu_pstr.put("S145", SEL+"te, ve FROM CW WHERE sid=?");
@ %def S145
<<S147>>=
this.lu_pstr.put("S147", SEL+"t2, v2 FROM W WHERE sid=? AND t2=("
    + "SELECT t1 FROM W WHERE sid=? AND v2=0)");
@ %def S147
<<S148>>=
this.lu_pstr.put("S148", SEL+"1 FROM assignments_r WHERE rid=?");
@ %def S148
<<S149>>=
this.lu_pstr.put("S149", SEL+"t2, v2 FROM W WHERE sid=? ORDER BY t2 ASC");
@ %def S149

\appendix

\section{Appendix: Error Strings}
\label{ap:error-strings}
<<Err0>>=
"Encountered catastrophic exception."
@ %def Err0

\section{Appendix: List of Chunks}
\label{ap:list-of-chunks}
\nowebchunks

\section{Appendix: List of Identifiers}
\label{ap:list-of-identifiers}
\nowebindex

\end{document}

