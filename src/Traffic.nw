\chapter{Class: Traffic}
\label{traffic}

<<Traffic.java>>=
<<Traffic.java preamble>>
public abstract class Traffic {
  <<[[Traffic]] member variables>>
  <<[[Traffic]] constructor>>
  <<[[Traffic]] methods>>
}
@

We supply an abstract base class for developing Jargo traffic functions.

\section{Preamble}
The preamble declares the package and imports dependencies.
<<Traffic.java preamble>>=
package com.github.jargors;
import com.github.jargors.Tools;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;
@

\section{Member Variables}
<<[[Traffic]] member variables>>=
protected Tools tools = new Tools();
private final boolean DEBUG = "true".equals(System.getProperty("jargors.traffic.debug"));
@


\section{Constructor}
<<[[Traffic]] constructor>>=
public Traffic() { }
@

\section{Methods}

\subsection{\texttt{forwardVertices(1)}}
<<forwardVertices(1)>>=
void forwardVertices(final ConcurrentHashMap<Integer, int[]> src) {
  this.tools.registerVertices(src);
}
@ %def forwardVertices

\subsection{\texttt{forwardEdges(1)}}
<<forwardEdges(1)>>=
void forwardEdges(final ConcurrentHashMap<Integer,
    ConcurrentHashMap<Integer, int[]>> src) {
  this.tools.registerEdges(src);
}
@ %def forwardEdges

\subsection{\texttt{apply}(3)}
<<apply(3)>>=
double apply(int v1, int v2, int t) {
  return 1.0;
}
@ %def apply


