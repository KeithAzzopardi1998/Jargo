\section{Class: Client}
\label{sim-client}

\etocsettocstyle{}{}
\localtableofcontents

<<Client.java>>=
<<Package: [[sim]]>>
<<Client.java preamble>>
public abstract class Client {
  <<[[Client]] member variables>>
  <<[[Client]] constructor>>
  <<[[Client]] methods>>
}
@

\subsection{Preamble}

<<Client.java preamble>>=
import com.github.jargors.sim.Communicator;
import com.github.jargors.sim.Tools;
import com.github.jargors.sim.ClientException;
import com.github.jargors.sim.ClientFatalException;
import java.util.Arrays;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;
import java.util.HashMap;
import java.io.FileNotFoundException;
import java.sql.SQLException;
@

\subsection{Member Variables}
\label{sim-client: member-variables}

<<[[Client]] member variables>>=
protected ConcurrentLinkedQueue<int[]> queue = new ConcurrentLinkedQueue<int[]>();
protected Communicator communicator;
protected Tools tools = new Tools();
protected final boolean DEBUG =
    "true".equals(System.getProperty("jargors.client.debug"));
protected ConcurrentHashMap<Integer, Integer> lut = new ConcurrentHashMap<Integer, Integer>();
protected ConcurrentHashMap<Integer, Integer> luv = new ConcurrentHashMap<Integer, Integer>();
protected long dur_handle_request = 0;
@

\subsection{Constructor}
\label{sim-client: constructor}

<<[[Client]] constructor>>=
public Client() {
  if (DEBUG) {
    System.out.printf("create Client\n");
  }
}
@

\subsection{Methods}
\label{sim-client: methods}

\subsubsection{Administration}
<<[[Client]] methods>>=
public <<Admin: forwardRefCacheEdges(1)>>
public <<Admin: forwardRefCacheUsers(1)>>
public <<Admin: forwardRefCacheVertices(1)>>
public <<Admin: setRefCommunicator(1)>>
@
\subsubsection{G-tree Methods}
<<[[Client]] methods>>=
public <<Gtree: gtreeLoad(1)>>
public <<Gtree: gtreeClose(0)>>
@
\subsubsection{Special Methods}
<<[[Client]] methods>>=
public <<Client: addRequest(1)>>
public <<Client: collectServerLocations(1)>>
public <<Client: dropRequests(1)>>
public <<Client: filterByProximity(2)>>
public <<Client: filterByScheduleLength(2)>>
public <<Client: filterByScheduleLength(3)>>
public <<Client: getHandleRequestDur(0)>>
public <<Client: getQueueSize(0)>>
public <<Client: init(0)>>
public <<Client: notifyNew(0)>>
public <<Client: routeMinDistMinDur(2)>>
public <<Client: scheduleMinDistInsertion(2)>>
protected <<Client: end(0)>>
protected <<Client: handleRequest(1)>>
protected <<Client: handleServerLocation(1)>>
@

\subsubsection{\texttt{addRequest}(1)}
<<Client: addRequest(1)>>=
void addRequest(final int[] r) {
  this.queue.add(r);
}
@ %def addRequest
\subsubsection{\texttt{collectServerLocations}(1)}
Array [[src]] =

\noindent
\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{[[sid]] of server }s$};
 &\node {$1:\textrm{time of $s$'s last location}$};
 &\node {$2:\textrm{vertex of $s$'s last location}$};
 &\node[minimum width=12mm] {...};\\
};
\end{tikzpicture}
<<Client: collectServerLocations(1)>>=
void collectServerLocations(final int[] src) throws ClientException, ClientFatalException {
  for (int i = 0; i < (src.length - 2); i += 3) {
    this.handleServerLocation(new int[] {
      src[i],
      src[(i + 1)],
      src[(i + 2)]
    });
  }
}
@ %def collectServerLocations


\subsubsection{\texttt{dropRequests}(1)}
<<Client: dropRequests(1)>>=
int dropRequests(final int deadline) {
  final int temp = this.queue.size();
  this.queue.removeIf((r) -> { return r[2] < deadline; });
  return Math.max(0, temp - this.queue.size());
}
@ %def dropRequests

\subsubsection{\texttt{end}(0)}
<<Client: end(0)>>=
void end() { }
@ %def end

\subsubsection{\texttt{filterByProximity(2)}}
Important: ignores servers with proximity 0 due to Limitation 4.
<<Client: filterByProximity(2)>>=
Map<Integer, Integer> filterByProximity(
    Map<Integer, Integer> candidates, int threshold, int rid)
    throws ClientException {
  Map<Integer, Integer> results = new HashMap<Integer, Integer>();
  try {
    final int ro = this.communicator.queryUser(rid)[4];
    for (final int sid : candidates.keySet()) {
      final int val = this.tools.computeHaversine(this.luv.get(sid), ro);
      if (0 < val && val <= threshold)
        results.put(sid, val);
    }
  } catch (Exception e) {
    throw new ClientException(e);
  }
  return results;
}
@ %def filterByProximity

\subsubsection{\texttt{filterByScheduleLength(2)}}
<<Client: filterByScheduleLength(2)>>=
Map<Integer, Integer> filterByScheduleLength(
    Map<Integer, Integer> candidates, int threshold)
    throws SQLException {
  return filterByScheduleLength(candidates, threshold,
           this.communicator.retrieveClock());
}
@

\subsubsection{\texttt{filterByScheduleLength(3)}}
<<Client: filterByScheduleLength(3)>>=
Map<Integer, Integer> filterByScheduleLength(
    Map<Integer, Integer> candidates, int threshold, int time)
    throws SQLException {
  Map<Integer, Integer> results = new HashMap<Integer, Integer>();
  for (final int sid : candidates.keySet()) {
    final int val = this.communicator.queryServerScheduleRemaining(sid, time).length / 4;
    if (val <= threshold) {
      results.put(sid, val);
    }
  }
  return results;
}
@ %def filterByScheduleLength

\subsubsection{\texttt{getHandleRequestDur}(0)}
<<Client: getHandleRequestDur(0)>>=
long getHandleRequestDur() {
  return this.dur_handle_request;
}
@

\subsubsection{\texttt{getQueueSize}(0)}
<<Client: getQueueSize(0)>>=
int getQueueSize() {
  return this.queue.size();
}
@ %def getQueueSize

\subsubsection{\texttt{handleRequest}(1)}
Array [[r]] =

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{[[rid]] of request $r$}$};
 &\node {$1:r_q$}; & \node {$2:r_e$}; & \node {$3:r_l$};
 &\node {$4:r_o$}; & \node {$5:r_d$}; & \node {$6:d_r$};\\
};
\end{tikzpicture}

<<Client: handleRequest(1)>>=
void handleRequest(final int[] r) throws ClientException, ClientFatalException { }
@ %def handleRequest

\subsubsection{\texttt{handleServerLocation}(1)}
Array [[loc]] =

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{[[sid]] of server $s$}$};
 &\node {$1:\textrm{time of $s$'s last location}$};
 &\node {$2:\textrm{vertex of $s$'s last location}$};\\
};
\end{tikzpicture}

<<Client: handleServerLocation(1)>>=
void handleServerLocation(final int[] loc) throws ClientException, ClientFatalException {
  this.lut.put(loc[0], loc[1]);
  this.luv.put(loc[0], loc[2]);
}
@ %def handleServerLocation

\subsubsection{\texttt{init}(0)}
<<Client: init(0)>>=
void init() { }
@

\subsubsection{\texttt{notifyNew}(0)}
<<Client: notifyNew(0)>>=
void notifyNew() throws ClientException, ClientFatalException {
  while (!this.queue.isEmpty()) {
    long A0 = System.currentTimeMillis();
    this.handleRequest(this.queue.remove());
    this.dur_handle_request = System.currentTimeMillis() - A0;
    if (DEBUG) {
      System.out.printf("handleRequest(1), arg1=[#]\n");
    }
  }
}
@ %def notifyNew

\subsubsection{\texttt{routeMinDistMinDur}(2)}
Important: the first waypoint in the new route depends on the location of
the server at the world-time when this method is called. Another thing: the
second parameter (bnew) gets modified, specifically the time components on
all waypoints get updated.
<<Client: routeMinDistMinDur(2)>>=
int[] routeMinDistMinDur(int sid, int[] bnew) throws ClientException {
  int[] wnew = null;
  boolean ok = true;
  try {
    final int now = this.communicator.retrieveClock();
    int[] wact = this.communicator.queryServerRouteActive(sid);
    int[] wbeg = (wact[3] == 0
        ? new int[] { now    , wact[1] }
        : new int[] { wact[2], wact[3] });
    {
      final int _p = (bnew.length/4);
      final int[][] _legs = new int[_p][];

      int[] _leg = this.tools.computeRoute(wbeg[1], bnew[1], wbeg[0]);
      int _n = _leg.length;
      int _t = _leg[(_n - 2)];

      _legs[0] = _leg;
      for (int _i = 1; _i < _p; _i++) {
        // Extract vertices
        final int _u = bnew[(4*_i - 3)];
        final int _v = bnew[(4*_i + 1)];
        // Compute path and store into _legs
        _leg = this.tools.computeRoute(_u, _v, _t);
        _legs[_i] = _leg;
        // Update _n and _t
        _n += (_leg.length - 2);
        _t = _leg[_leg.length - 2];
      }
      wnew = new int[_n];
      int _k = 0;
      for (int _i = 0; _i < _legs.length; _i++) {
        final int _rend = (_legs[_i].length - (_i == (_legs.length - 1) ? 0 : 2));
        for (int _j = 0; _j < _rend; _j++) {
          wnew[_k] = _legs[_i][_j];
          _k++;
        }
      }
      // Populate times in the provided schedule
      for (int _i = 1; _i < _legs.length; _i++) {
        bnew[(4*_i - 4)] = _legs[_i][0];
      }
      bnew[(4*_p - 4)] = _t;
    }

    // if next waypoint is vehicle destination,
    // reset route start time to last-visited time
    if (wact[3] == 0) {
      wnew[0] = lut.get(sid);
    }

    // Check time-windows
    for (int _i = 0; _i < (bnew.length - 3); _i += 4) {
      int _rid = bnew[(_i + 3)];
      int _rt  = bnew[(_i)];
      if (_rid != 0) {
        int[] _u = this.communicator.queryUser(_rid);
        int _ue = _u[2];
        int _ul = _u[3];
        if (_rt < _ue || _rt > _ul) {
          ok = false;
          break;
        }
      }
    }
  } catch (Exception e) {
    throw new ClientException(e);
  }
  return (ok ? wnew : null);
}
@ %def routeMinDistMinDur

\subsubsection{\texttt{scheduleMinDistInsertion}(2)}
Important: this method uses the world time at the time of the method
call to get sid's remaining schedule (because it makes no sense to
use a past or future schedule).
<<Client: scheduleMinDistInsertion(2)>>=
int[] scheduleMinDistInsertion(int sid, int rid) throws ClientException {
  int[] bmin = null;
  try {
    final int now = this.communicator.retrieveClock();
    final int[] r = this.communicator.queryUser(rid);
    final int rq  = r[1];
    final int ro  = r[4];
    final int rd  = r[5];

    int cmin = Integer.MAX_VALUE;

    int[] brem = this.communicator.queryServerScheduleRemaining(sid, now);

    final int[] wact = this.communicator.queryServerRouteActive(sid);

    int[] wbeg = (wact[3] == 0
        ? new int[] { now    , wact[1] }
        : new int[] { wact[2], wact[3] });

    // if next events occurs at next waypoint and is not server's own
    // destination, then delete these events from schedule (limitation #4).
    if (brem[2] != sid && brem[0] == wact[2]) {
      while (brem[0] == wact[2]) {
        brem = Arrays.copyOfRange(brem, 4, brem.length);
      }
    }

    int imax = (brem.length/4);
    int jmax = imax;
    int cost = brem[(brem.length - 4)];

    final int[] bold = brem;

    // Try all insertion positions
    for (int i = 0; i < imax; i++) {
      int tbeg = (i == 0 ? now : brem[4*(i - 1)]);

      for (int j = i; j < jmax; j++) {
        int tend = bold[4*j];

        boolean ok = (this.communicator.queryServerCapacityViolations(sid, rq, tbeg, tend)[0] == 0);

        if (ok) {
          brem = bold.clone();  // reset to original
          int[] bnew = new int[] { };

          int[] stop = new int[] { 0, ro, 0, rid };
          int ipos = i;

          // Insert
          bnew = new int[(brem.length + 4)];
          System.arraycopy(stop, 0, bnew, 4*ipos, 4);
          System.arraycopy(brem, 0, bnew, 0, 4*ipos);
          System.arraycopy(brem, 4*ipos, bnew, 4*(ipos + 1), brem.length - 4*ipos);

          brem = bnew;

          stop[1] = rd;
          ipos = (j + 1);

          // Insert
          bnew = new int[(brem.length + 4)];
          System.arraycopy(stop, 0, bnew, 4*ipos, 4);
          System.arraycopy(brem, 0, bnew, 0, 4*ipos);
          System.arraycopy(brem, 4*ipos, bnew, 4*(ipos + 1), brem.length - 4*ipos);

          int cdel = bnew[(bnew.length - 4)] - cost;
          if (cdel < cmin) {
            bmin = bnew;
            cmin = cdel;
          }
        }
      }
    }
  } catch (Exception e) {
    throw new ClientException(e);
  }
  return bmin;
}
@ %def scheduleMinDistInsertion

\subsection{Exceptions}

\subsubsection{\texttt{ClientException}}
<<ClientException.java>>=
<<Package: [[sim]]>>
public class ClientException extends Exception {
  public ClientException() { }
  public ClientException(String message) {
    super(message);
  }
  public ClientException(Throwable cause) {
    super(cause);
  }
  public ClientException(String message, Throwable cause) {
    super(message, cause);
  }
}
@

\subsubsection{\texttt{ClientFatalException}}
<<ClientFatalException.java>>=
<<Package: [[sim]]>>
public class ClientFatalException extends Exception {
  public ClientFatalException() { }
  public ClientFatalException(String message) {
    super(message);
  }
  public ClientFatalException(Throwable cause) {
    super(cause);
  }
  public ClientFatalException(String message, Throwable cause) {
    super(message, cause);
  }
}
@

\subsection{Debug}

