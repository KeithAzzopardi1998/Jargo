\chapter{Class: Client}
\label{sim-client}

<<Client.java>>=
<<Package: [[sim]]>>
<<Client.java preamble>>
public abstract class Client {
  <<[[Client]] member variables>>
  <<[[Client]] constructor>>
  <<[[Client]] methods>>
}
@

\section{Preamble}

<<Client.java preamble>>=
import com.github.jargors.sim.Communicator;
import com.github.jargors.sim.Tools;
import com.github.jargors.sim.ClientException;
import com.github.jargors.sim.ClientFatalException;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentHashMap;
import java.io.FileNotFoundException;
@

<<Client.java preamble>>=
<<Import JMX dependencies>>
@

\section{Member Variables}
\label{sim-client: member-variables}

<<[[Client]] member variables>>=
protected ConcurrentLinkedQueue<int[]> queue = new ConcurrentLinkedQueue<int[]>();
protected Communicator communicator;
protected Tools tools = new Tools();
protected final boolean DEBUG =
    "true".equals(System.getProperty("jargors.client.debug"));
protected ConcurrentHashMap<Integer, Integer> lut = new ConcurrentHashMap<Integer, Integer>();
protected ConcurrentHashMap<Integer, Integer> luv = new ConcurrentHashMap<Integer, Integer>();
@

\section{Constructor}
\label{sim-client: constructor}

<<[[Client]] constructor>>=
public Client() {
  <<[[Client]] register JMX monitor>>
  if (DEBUG) {
    System.out.printf("create Client\n");
  }
}
@

\section{Methods}
\label{sim-client: methods}

\subsection{\texttt{notifyNew}(0)}

<<Client: notifyNew(0)>>=
void notifyNew() throws ClientException, ClientFatalException {
  while (!this.queue.isEmpty()) {
    long A0 = System.currentTimeMillis();
    this.handleRequest(this.queue.remove());
    if (DEBUG) {
      System.out.printf("handleRequest(1), arg1=[#]\n");
    }
    <<Stats: clientHandleRequest>>
  }
}
@ %def notifyNew

\subsection{\texttt{addRequest}(1)}
<<Client: addRequest(1)>>=
void addRequest(final int[] r) {
  this.queue.add(r);
}
@ %def addRequest

\subsection{\texttt{dropRequests}(1)}
<<Client: dropRequests(1)>>=
int dropRequests(final int deadline) {
  final int temp = this.queue.size();
  this.queue.removeIf((r) -> { return r[2] < deadline; });
  return Math.max(0, temp - this.queue.size());
}
@ %def dropRequests

\subsection{\texttt{collectServerLocations}(1)}
Array [[src]] =

\noindent
\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{[[sid]] of server }s$};
 &\node {$1:\textrm{time of $s$'s last location}$};
 &\node {$2:\textrm{vertex of $s$'s last location}$};
 &\node[minimum width=12mm] {...};\\
};
\end{tikzpicture}
<<Client: collectServerLocations(1)>>=
void collectServerLocations(final int[] src) {
  for (int i = 0; i < (src.length - 2); i += 3) {
    this.handleServerLocation(new int[] {
      src[i],
      src[(i + 1)],
      src[(i + 2)]
    });
  }
}
@ %def collectServerLocations

\subsection{\texttt{end}(0)}
<<Client: end(0)>>=
void end() { }
@ %def end

\subsection{\texttt{handleRequest}(1)}
Array [[r]] =

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{[[rid]] of request $r$}$};
 &\node {$1:r_q$}; & \node {$2:r_e$}; & \node {$3:r_l$};
 &\node {$4:r_o$}; & \node {$5:r_d$}; & \node {$6:d_r$};\\
};
\end{tikzpicture}

<<Client: handleRequest(1)>>=
void handleRequest(final int[] r) throws ClientException, ClientFatalException { }
@ %def handleRequest

\subsection{\texttt{handleServerLocation}(1)}
Array [[loc]] =

\begin{tikzpicture}
\small
\matrix[nodes={draw,minimum size=6mm}] {
  \node {$0:\textrm{[[sid]] of server $s$}$};
 &\node {$1:\textrm{time of $s$'s last location}$};
 &\node {$2:\textrm{vertex of $s$'s last location}$};\\
};
\end{tikzpicture}

<<Client: handleServerLocation(1)>>=
void handleServerLocation(final int[] loc) {
  lut.put(loc[0], loc[1]);
  luv.put(loc[0], loc[2]);
}
@ %def handleServerLocation

\subsection{\texttt{init}(0)}
<<Client: init(0)>>=
void init() { }
@

\section{Exceptions}

\subsection{\texttt{ClientException}}
<<ClientException.java>>=
<<Package: [[sim]]>>
public class ClientException extends Exception {
  public ClientException() { }
  public ClientException(String message) {
    super(message);
  }
  public ClientException(Throwable cause) {
    super(cause);
  }
  public ClientException(String message, Throwable cause) {
    super(message, cause);
  }
}
@

\subsection{\texttt{ClientFatalException}}
<<ClientFatalException.java>>=
<<Package: [[sim]]>>
public class ClientFatalException extends Exception {
  public ClientFatalException() { }
  public ClientFatalException(String message) {
    super(message);
  }
  public ClientFatalException(Throwable cause) {
    super(cause);
  }
  public ClientFatalException(String message, Throwable cause) {
    super(message, cause);
  }
}
@

\section{Debug}

