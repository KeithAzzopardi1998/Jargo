\part{Jargo Simulator}
\label{part-simulator}

\chapter{Methods Overview}
\label{sim-overview}

This chapter presents an overview of all of Jargo's library methods, organized
by class and function.
Tables~\ref{tab:method-functions}~and~\ref{tab:class-descriptions} describe the
class and functional groupings.  The number in parentheses next to each method
indicates the number of parameters. Go to the page number next to a method
to jump to the summary and source code.

The following chapters serve as an API reference. Chapters~9--12 detail the
methods arranged by their functional groupings. Chapter 13 describes Jargo's
JMX functionality. Chapters 14--19 define the individual classes.

\begin{table}[h]
\begin{center}
\small
\caption{Method Functional Groupings}
\label{tab:method-functions}
\begin{tabular}{|l|l|p{100mm}|}
\hline
Ch. & Functional Group & Description \\
\hline
Ch.~\ref{sim-administration} & Administration & Manage classes and the simulation lifecycle \\
Ch.~\ref{sim-reading} & Read Methods & Retrieve direct or derived values from the simulation state \\
& Cached Read Methods & Retrieve values from cache instead of from Derby (overloads of normal read methods) \\
Ch.~\ref{sim-writing} & Write Methods & Push new values into the simulation state \\
Ch.~\ref{sim-gtree} & G-tree Methods & Interact with G-tree spatial index \\
& Special Methods & Specific to a class (see individual chapters on classes)\\
\hline
\end{tabular}
\caption{Class Descriptions}
\label{tab:class-descriptions}
\begin{tabular}{|l|l|p{120mm}|}
\hline
Ch. & Class & Description \\
\hline
Ch.~\ref{sim-storage} & Storage & Provides direct access to Jargo's underlying Derby database containing
the ridesharing simulation state \\
Ch.~\ref{sim-controller} & Controller & Manages the simulation lifecycle \\
Ch.~\ref{sim-communicator} & Communicator & Provides a client-facing subset of Storage functionality \\
Ch.~\ref{sim-client} & Client & Provides overrideable functionality for serving ridesharing requests \\
Ch.~\ref{sim-traffic} & Traffic & Provides overrideable functionality for returning speeds in the road network \\
Ch.~\ref{sim-tools} & Tools & Provides convenience methods \\
\hline
\end{tabular}
\end{center}
\end{table}

\section{Storage}
\subsection{Read Methods}
<<[[Storage]] methods>>=
public <<Read: DBQuery(2)>>
public <<Read: DBQueryQuick(3)>>
public <<Read: DBQueryEdge(2)>>
public <<Read: DBQueryEdgeStatistics(0)>>
public <<Read: DBQueryEdges(0)>>
public <<Read: DBQueryEdgesCount(0)>>
public <<Read: DBQueryMBR(0)>>
public <<Read: DBQueryMetricRequestDistanceBaseTotal(0)>>
public <<Read: DBQueryMetricRequestDistanceBaseUnassignedTotal(1)>>
public <<Read: DBQueryMetricRequestDistanceBaseUnassignedRunning(0)>>
public <<Read: DBQueryMetricRequestDistanceDetourTotal(1)>>
public <<Read: DBQueryMetricRequestDistanceTransitTotal(1)>>
public <<Read: DBQueryMetricRequestDurationPickupTotal(1)>>
public <<Read: DBQueryMetricRequestDurationTransitTotal(1)>>
public <<Read: DBQueryMetricRequestDurationTravelTotal(1)>>
public <<Read: DBQueryMetricRequestTWViolationsTotal(0)>>
public <<Read: DBQueryMetricServerDistanceBaseTotal(0)>>
public <<Read: DBQueryMetricServerDistanceCruisingTotal(1)>>
public <<Read: DBQueryMetricServerDistanceRunning(0)>>
public <<Read: DBQueryMetricServerDistanceServiceTotal(1)>>
public <<Read: DBQueryMetricServerDistanceTotal(1)>>
public <<Read: DBQueryMetricServerDurationCruisingTotal(1)>>
public <<Read: DBQueryMetricServerDurationServiceTotal(1)>>
public <<Read: DBQueryMetricServerDurationTravelTotal(1)>>
public <<Read: DBQueryMetricServerTWViolationsTotal(0)>>
public <<Read: DBQueryMetricServiceRate(1)>>
public <<Read: DBQueryMetricUserDistanceBaseTotal(1)>>
public <<Read: DBQueryMetricUserDistanceBaseRunning(0)>>
public <<Read: DBQueryRequestDistanceDetour(2)>>
public <<Read: DBQueryRequestDistanceTransit(2)>>
public <<Read: DBQueryRequestDurationPickup(2)>>
public <<Read: DBQueryRequestDurationTransit(2)>>
public <<Read: DBQueryRequestDurationTravel(2)>>
public <<Read: DBQueryRequestIsAssigned(2)>>
public <<Read: DBQueryRequestStatus(2)>>
public <<Read: DBQueryRequestTimeOfArrival(1)>>
public <<Read: DBQueryRequestTimeOfDeparture(1)>>
public <<Read: DBQueryRequestsCount(0)>>
public <<Read: DBQueryRequestsCountActive(1)>>
public <<Read: DBQueryRequestsCountAssigned(0)>>
public <<Read: DBQueryRequestsCountCompleted(1)>>
public <<Read: DBQueryRequestsQueued(1)>>
public <<Read: DBQueryRequestsWaiting(1)>>
public <<Read: DBQueryServerAssignmentsCompleted(2)>>
public <<Read: DBQueryServerAssignmentsPending(2)>>
public <<Read: DBQueryServerCapacityViolations(4)>>
public <<Read: DBQueryServerDistance(2)>>
public <<Read: DBQueryServerDistanceCruising(2)>>
public <<Read: DBQueryServerDistanceRemaining(2)>>
public <<Read: DBQueryServerDistanceService(2)>>
public <<Read: DBQueryServerDurationCruising(2)>>
public <<Read: DBQueryServerDurationService(2)>>
public <<Read: DBQueryServerDurationRemaining(2)>>
public <<Read: DBQueryServerDurationTravel(2)>>
public <<Read: DBQueryServerLoadMax(2)>>
public <<Read: DBQueryServerRoute(1)>>
public <<Read: DBQueryServerRouteActive(1)>>
public <<Read: DBQueryServerRouteRemaining(2)>>
public <<Read: DBQueryServerSchedule(1)>>
public <<Read: DBQueryServerScheduleRemaining(2)>>
public <<Read: DBQueryServerTimeOfArrival(1)>>
public <<Read: DBQueryServerTimeOfDeparture(1)>>
public <<Read: DBQueryServersActive(1)>>
public <<Read: DBQueryServersCount(0)>>
public <<Read: DBQueryServersCountActive(1)>>
public <<Read: DBQueryServersLocations(1)>>
public <<Read: DBQueryServersLocationsActive(1)>>
public <<Read: DBQueryUser(1)>>
public <<Read: DBQueryUsers(0)>>
public <<Read: DBQueryVertex(1)>>
public <<Read: DBQueryVertices(0)>>
public <<Read: DBQueryVerticesCount(0)>>
@
\subsection{Cached Read Methods}
<<[[Storage]] methods>>=
public <<Read: DBQueryMetricRequestDistanceBaseUnassignedTotal(0)>>
public <<Read: DBQueryMetricRequestDistanceDetourTotal(0)>>
public <<Read: DBQueryMetricRequestDistanceTransitTotal(0)>>
public <<Read: DBQueryMetricRequestDurationPickupTotal(0)>>
public <<Read: DBQueryMetricRequestDurationTransitTotal(0)>>
public <<Read: DBQueryMetricRequestDurationTravelTotal(0)>>
public <<Read: DBQueryMetricServerDistanceCruisingTotal(0)>>
public <<Read: DBQueryMetricServerDistanceServiceTotal(0)>>
public <<Read: DBQueryMetricServerDistanceTotal(0)>>
public <<Read: DBQueryMetricServerDurationCruisingTotal(0)>>
public <<Read: DBQueryMetricServerDurationServiceTotal(0)>>
public <<Read: DBQueryMetricServerDurationTravelTotal(0)>>
public <<Read: DBQueryMetricServiceRate(0)>>
public <<Read: DBQueryMetricUserDistanceBaseTotal(0)>>
@
\subsection{Write Methods}
<<[[Storage]] methods>>=
public <<Write: DBInsertEdge(4)>>
public <<Write: DBInsertRequest(1)>>
public <<Write: DBInsertServer(2)>>
public <<Write: DBInsertVertex(3)>>
public <<Write: DBUpdateEdgeSpeed(3)>>
public <<Write: DBUpdateServerService(5)>>
@
\subsection{Administration}
<<[[Storage]] methods>>=
public <<Admin: JargoCacheRoadNetworkFromDB(0)>>
public <<Admin: JargoCacheUsersFromDB(0)>>
public <<Admin: JargoInstanceClose(0)>>
public <<Admin: JargoInstanceExport(1)>>
public <<Admin: JargoInstanceInitialize(0)>>
public <<Admin: JargoInstanceLoad(1)>>
public <<Admin: JargoInstanceLoadInMem(1)>>
public <<Admin: JargoInstanceNew(0)>>
public <<Admin: getRefCacheEdges(0)>>
public <<Admin: getRefCacheUsers(0)>>
public <<Admin: getRefCacheVertices(0)>>
public <<Admin: setRequestTimeout(1)>>
private <<Admin: JargoSetupDriver(0)>>
private <<Admin: JargoSetupPreparedStatements(0)>>
private <<Admin: PSAdd(2..)>>
private <<Admin: PSCreate(2)>>
private <<Admin: PSQuery(3..)>>
private <<Admin: PSSubmit(1..)>>
@

\section{Controller}
\subsection{Read Methods}
<<[[Controller]] methods>>=
public <<Read: query(2)>>
public <<Read: queryQuick(3)>>
public <<Read: queryEdge(2)>>
public <<Read: queryEdgeStatistics(0)>>
public <<Read: queryEdges(0)>>
public <<Read: queryEdgesCount(0)>>
public <<Read: queryMBR(0)>>
public <<Read: queryMetricRequestDistanceBaseTotal(0)>>
public <<Read: queryMetricRequestDistanceBaseUnassignedTotal(1)>>
public <<Read: queryMetricRequestDistanceBaseUnassignedRunning(0)>>
public <<Read: queryMetricRequestDistanceDetourTotal(1)>>
public <<Read: queryMetricRequestDistanceTransitTotal(1)>>
public <<Read: queryMetricRequestDurationPickupTotal(1)>>
public <<Read: queryMetricRequestDurationTransitTotal(1)>>
public <<Read: queryMetricRequestDurationTravelTotal(1)>>
public <<Read: queryMetricRequestTWViolationsTotal(0)>>
public <<Read: queryMetricServerDistanceBaseTotal(0)>>
public <<Read: queryMetricServerDistanceCruisingTotal(1)>>
public <<Read: queryMetricServerDistanceRunning(0)>>
public <<Read: queryMetricServerDistanceServiceTotal(1)>>
public <<Read: queryMetricServerDistanceTotal(1)>>
public <<Read: queryMetricServerDurationCruisingTotal(1)>>
public <<Read: queryMetricServerDurationServiceTotal(1)>>
public <<Read: queryMetricServerDurationTravelTotal(1)>>
public <<Read: queryMetricServerTWViolationsTotal(0)>>
public <<Read: queryMetricServiceRate(1)>>
public <<Read: queryMetricServiceRateRunning(0)>>
public <<Read: queryMetricUserDistanceBaseTotal(1)>>
public <<Read: queryMetricUserDistanceBaseRunning(0)>>
public <<Read: queryRequestTimeOfArrival(1)>>
public <<Read: queryRequestTimeOfDeparture(1)>>
public <<Read: queryRequestsCount(0)>>
public <<Read: queryRequestsCountActive(1)>>
public <<Read: queryRequestsCountAppeared(0)>>
public <<Read: queryRequestsCountAssigned(0)>>
public <<Read: queryRequestsCountCompleted(1)>>
public <<Read: queryRequestsQueued(1)>>
public <<Read: queryRequestsWaiting(1)>>
public <<Read: queryServerDistance(2)>>
public <<Read: queryServerRoute(1)>>
public <<Read: queryServerRouteActive(1)>>
public <<Read: queryServerRouteRemaining(2)>>
public <<Read: queryServerSchedule(1)>>
public <<Read: queryServerTimeOfDeparture(1)>>
public <<Read: queryServersActive(1)>>
public <<Read: queryServersCount(0)>>
public <<Read: queryServersCountActive(1)>>
public <<Read: queryServersCountAppeared(0)>>
public <<Read: queryServersLocationsActive(1)>>
public <<Read: queryUser(1)>>
public <<Read: queryVertex(1)>>
public <<Read: queryVertices(0)>>
public <<Read: queryVerticesCount(0)>>
@
\subsection{Cached Read Methods}
<<[[Controller]] methods>>=
public <<Read: queryMetricRequestDistanceBaseUnassignedTotal(0)>>
public <<Read: queryMetricRequestDistanceDetourTotal(0)>>
public <<Read: queryMetricRequestDistanceTransitTotal(0)>>
public <<Read: queryMetricRequestDurationPickupTotal(0)>>
public <<Read: queryMetricRequestDurationTransitTotal(0)>>
public <<Read: queryMetricRequestDurationTravelTotal(0)>>
public <<Read: queryMetricServerDistanceCruisingTotal(0)>>
public <<Read: queryMetricServerDistanceServiceTotal(0)>>
public <<Read: queryMetricServerDistanceTotal(0)>>
public <<Read: queryMetricServerDurationCruisingTotal(0)>>
public <<Read: queryMetricServerDurationServiceTotal(0)>>
public <<Read: queryMetricServerDurationTravelTotal(0)>>
public <<Read: queryMetricServiceRate(0)>>
public <<Read: queryMetricUserDistanceBaseTotal(0)>>
@
\subsection{Write Methods}
<<[[Controller]] methods>>=
public <<Write: insertRequest(1)>>
public <<Write: insertServer(2)>>
@
\subsection{Administration}
<<[[Controller]] methods>>=
public <<Admin: cacheRoadNetworkFromDB(0)>>
public <<Admin: cacheUsersFromDB(0)>>
public <<Admin: instanceClose(0)>>
public <<Admin: instanceExport(1)>>
public <<Admin: instanceInitialize(0)>>
public <<Admin: instanceLoad(1)>>
public <<Admin: instanceLoadInMem(1)>>
public <<Admin: instanceNew(0)>>
public <<Admin: getClock(0)>>
public <<Admin: getClockStart(0)>>
public <<Admin: getClockReference(0)>>
public <<Admin: getClockReferenceMs(0)>>
public <<Admin: getRefCommunicator(0)>>
public <<Admin: getRefStorage(0)>>
public <<Admin: retrieveQueueSize(0)>>
public <<Admin: retrieveHandleRequestDur(0)>>
public <<Admin: retrieveRefCacheEdges(0)>>
public <<Admin: retrieveRefCacheUsers(0)>>
public <<Admin: retrieveRefCacheVertices(0)>>
public <<Admin: forwardRefCommunicator(1)>>
public <<Admin: forwardRefTraffic(1)>>
public <<Admin: setClockEnd(1)>>
public <<Admin: setClockReference(1)>>
public <<Admin: setClockStart(1)>>
public <<Admin: setQueueTimeout(1)>>
public <<Admin: setRefClient(1)>>
@
\subsection{G-tree Methods}
<<[[Controller]] methods>>=
public <<Gtree: gtreeClose(0)>>
public <<Gtree: gtreeLoad(1)>>
@
\subsection{Special Methods}
<<[[Controller]] methods>>=
public <<Controller: loadProblem(1)>>
public <<Controller: loadRoadNetworkFromFile(1)>>
public <<Controller: isKilled(0)>>
public <<Controller: returnRequest(1)>>
public <<Controller: startRealtime(1)>>
public <<Controller: startSequential(1)>>
public <<Controller: step(0)>>
public <<Controller: stop(1)>>
@

\section{Communicator}
\subsection{Read Methods}
<<[[Communicator]] methods>>=
public <<Read: queryEdge(2)>>
public <<Read: queryServerCapacityViolations(4)>>
public <<Read: queryServerDistanceRemaining(2)>>
public <<Read: queryServerDurationRemaining(2)>>
public <<Read: queryServerDurationTravel(2)>>
public <<Read: queryServerLoadMax(2)>>
public <<Read: queryServerRouteActive(1)>>
public <<Read: queryServerRouteRemaining(2)>>
public <<Read: queryServerScheduleRemaining(2)>>
public <<Read: queryServersLocationsActive(1)>>
public <<Read: queryUser(1)>>
public <<Read: queryVertex(1)>>
@
\subsection{Write Methods}
<<[[Communicator]] methods>>=
public <<Write: updateServerService(5)>>
@
\subsection{Adminstration}
<<[[Communicator]] methods>>=
public <<Admin: retrieveClock(0)>>
public <<Admin: retrieveRefCacheEdges(0)>>
public <<Admin: retrieveRefCacheUsers(0)>>
public <<Admin: retrieveRefCacheVertices(0)>>
public <<Admin: setRefController(1)>>
public <<Admin: setRefStorage(1)>>
public <<Admin: setRefTraffic(1)>>
@
\subsection{Special Methods}
<<[[Communicator]] methods>>=
public <<Communicator: forwardReturnRequest(1)>>
@

\section{Client}
\subsection{Administration}
<<[[Client]] methods>>=
public <<Admin: forwardRefCacheEdges(1)>>
public <<Admin: forwardRefCacheUsers(1)>>
public <<Admin: forwardRefCacheVertices(1)>>
public <<Admin: setRefCommunicator(1)>>
@
\subsection{G-tree Methods}
<<[[Client]] methods>>=
public <<Gtree: gtreeLoad(1)>>
public <<Gtree: gtreeClose(0)>>
@
\subsection{Special Methods}
<<[[Client]] methods>>=
public <<Client: addRequest(1)>>
public <<Client: dropRequests(1)>>
public <<Client: collectServerLocations(1)>>
public <<Client: notifyNew(0)>>
public <<Client: init(0)>>
protected <<Client: end(0)>>
protected <<Client: handleRequest(1)>>
protected <<Client: handleServerLocation(1)>>
@

\section{Traffic}
\subsection{Administration}
<<[[Traffic]] methods>>=
public <<Admin: forwardRefCacheEdges(1)>>
public <<Admin: forwardRefCacheVertices(1)>>
@
\subsection{Special Methods}
<<[[Traffic]] methods>>=
public <<Traffic: apply(3)>>
public <<Traffic: init(0)>>
@

\section{Tools}
\subsection{Read Methods}
<<[[Tools]] methods>>=
public <<Read: DBQueryEdge(2)>>
public <<Read: DBQueryVertex(1)>>
@
\subsection{Administration}
<<[[Tools]] methods>>=
public <<Admin: setRefCacheEdges(1)>>
public <<Admin: setRefCacheUsers(1)>>
public <<Admin: setRefCacheVertices(1)>>
@
\subsection{G-tree Methods}
<<[[Tools]] methods>>=
public <<Gtree: GTGtreeLoad(1)>>
public <<Gtree: GTGtreeClose(0)>>
@
\subsection{Special Methods}
<<[[Tools]] methods>>=
public <<Tools: computeBoundingBox(0)>>
public <<Tools: computeDuration(2)>>
public <<Tools: computeHaversine(2)>>
public <<Tools: computeHaversine(4)>>
public <<Tools: computeRoute(3)>>
public <<Tools: computeShortestPath(2)>>
public <<Tools: computeShortestPathDistance(2)>>
public <<Tools: filterByHaversine(3)>>
public <<Tools: parseClockReference(1)>>
public <<Tools: printPath(1)>>
public <<Tools: printRoute(1)>>
public <<Tools: printSchedule(1)>>
public <<Tools: printUser(1)>>
public static <<Tools: Print(1)>>
public static <<Tools: Print(2)>>
public static <<Tools: PrintSQLException(1)>>
@

