\chapter*{Preface}
\label{preface}

\addcontentsline{toc}{chapter}{Preface}

This document is the user manual and the annotated source code for Jargo. I
developed Jargo using the
Noweb\footnote{\url{https://www.cs.tufts.edu/~nr/noweb/}} literate
programming\footnote{\url{http://literateprogramming.com/}} tool. The files in
the [[src]] directory are the source files for this document ([[jargo.pdf]])
and the Java code ([[java/]], \texttt{jar/jargors-{\jsVersion}.jar}). With
literate programming, the documentation and the code are developed at the same
time.

This document is organized into five chapters.
\begin{itemize}
\item Chapter~\ref{ch-tutorial}: is the tutorial.
Section~\ref{tut-install} describes the installation procedure.
Section~\ref{tut-example} explains where to find example clients and traffic functions.
Section~\ref{tut-start} demonstrates how to start a Jargo simulation.
\item Chapter~\ref{ch-model} discusses the Jargo model of ridesharing.
Developers interested in understanding Jargo's internal model may find this
chapter useful.
Section~\ref{mod-setting} describes the setting (time and road network).
Section~\ref{mod-users} explains ridesharing users (customers and vehicles).
Section~\ref{mod-metrics} describes ridesharing service metrics.
Section~\ref{mod-schema} presents the SQL schema.
\item Chapter~\ref{ch-simulator} presents the simulator components. These
chapters serve as a reference for Jargo's classes and methods.
Section~\ref{sim-overview} presents an overview of all classes and their public and private methods.
Section~\ref{sim-administration} presents methods to administer the simulation.
Section~\ref{sim-reading} presents methods to read the simulated ridesharing state.
Section~\ref{sim-writing} presents methods to write and update the state.
Section~\ref{sim-gtree} presents methods for interacting with G-tree.
Section~\ref{sim-jmx} describes the Java Management Extension (JMX) Beans.
Sections~\ref{sim-storage}--\ref{sim-tools} present Jargo classes and class-specific methods.
\item Chapter~\ref{ch-interfaces} describes the evaluator programs.
Section~\ref{ui-overview} gives an overview of these programs.
Section~\ref{ui-command} presents the command-line evaluator.
Sections~\ref{ui-guiapp}--\ref{ui-guicontroller} present the graphical evaluator.
\item Chapter~\ref{ch-troubleshooting} list debugging statements and gives
troubleshooting suggestions.
\end{itemize}

\section*{What is Jargo?}

Jargo is a Java library that provides real-time ridesharing simulation. It
intends to help researchers evaluate the quality of ridesharing algorithms.
Jargo offers:
\begin{itemize}
\item historical or synthetic real-time customers and vehicles;
\item microscopic vehicle routing;
\item modular algorithms and traffic conditions;
\item various out-of-the-box quality-of-service metrics.
\end{itemize}
Thanks to these features, it can be used to:
\begin{itemize}
\item evaluate the effects of different customer and vehicle configurations,
  such as customer demand surges and extreme spatial distributions;
\item evaluate the effects of algorithm throughput, and observe how
  throughput changes over time;
\item evaluate the effects of traffic;
\item perform multi-objective analysis.
\end{itemize}
Jargo is licensed under the GNU General Public License, Version 3.

\section*{Why Literate Programming?}

With literate programming, code can be structured in any way and not just in
the way imposed by the programming language. For example, suppose you have a
\texttt{Cat} and \texttt{Dog} class, and each have a \texttt{speak} method:
\begin{verbatim}
class Cat {
  public void speak() {
    System.out.println("Meow!");
  }
}
class Dog {
  public void speak() {
    System.out.println("Woof!");
  }
}
\end{verbatim}
With literate programming, you could organize the \texttt{speak} methods into a
single file:
\begin{verbatim}
<Cat speak>=
public void speak() {
  System.out.println("Meow!");
}
<Dog speak>=
public void speak() {
  System.out.println("Woof!");
}
\end{verbatim}
and then add the methods to the classes by referencing them:
\begin{verbatim}
class Cat {
  <Cat speak>
}
class Dog {
  <Dog speak>
}
\end{verbatim}
Putting the \texttt{speak} methods together lets you reason about them as a
single unit of functionality instead of scattered across various classes.
I found that this way of writing code helped me to develop Jargo in terms of
reading, writing, and other functionality. The result is a codebase that
hopefully is easy to understand, well-reasoned, and correct.

\section*{Reporting Bugs}

Report bugs by logging an issue at the official Jargo GitHub repository:
\url{https://github.com/jargors/Jargo/issues}. By using GitHub, other users can
see the existing issues and possible resolutions. You can also write to me
directly: \url{pan-j16@mails.tsinghua.edu.cn}.

\section*{Contributing}

Jargo is an open-source software and contributions are welcome. The recommended
way to contribute is to fork the repository
(\url{https://github.com/jargors/Jargo}), make your changes in your local fork,
then create a pull request on GitHub. You can also open an Issue on the GitHub
page for any comments or complaints.

If you make your changes directly onto the \texttt{*.java} or \texttt{*.tex}
files, there is a danger of your changes getting overwritten if you
accidentally recompile the noweb files. To avoid the danger, remove the entire
\texttt{src} directory.

\bigskip
\begin{flushright}
James\\
March 23, 2020
\end{flushright}

