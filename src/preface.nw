\chapter*{Preface}
\label{preface}

\addcontentsline{toc}{chapter}{Preface}

This document is the user manual and the annotated source code for Jargo. I
developed Jargo using the
Noweb\footnote{\url{https://www.cs.tufts.edu/~nr/noweb/}} literate
programming\footnote{\url{http://literateprogramming.com/}} tool. The files in
the [[src]] directory are the source files for this document ([[jargo.pdf]])
and the Java code ([[java/]], [[jar/jargors-1.0.0.jar]]). With literate
programming, the documentation and the code are developed at the same time.

This document is organized into four parts.
\begin{itemize}
\item Part~I is the tutorial.
Chapter~1 describes the installation procedure.
Chapter~2 walks you through a simple example client (ridesharing algorithm) and
traffic function.
Chapter~3 demonstrates how to start a Jargo simulation.
\item Part~II discusses the Jargo model of ridesharing. Users can safely
skip this part. Developers interested in tinkering with Jargo's internal
model may find these chapters useful.
Chapter~4 describes modeling the setting (time and road network).
Chapter~5 explains ridesharing user (customers and vehicles) modeling.
Chapter~6 describes ridesharing service metrics.
Chapter~7 presents the SQL schema.
\item Part~III presents the simulator components. Users can use this
part to look up method signatures.
Chapter~8 presents an overview of all Jargo classes and their public and
private methods.
Chapter~9 presents methods to read the simulated ridesharing state.
Chapter~10 presents methods to write and update the state.
Chapter~11 presents methods to administer the simulation.
Chapter~12 presents methods for interacting with G-tree.
Chapter~13 describes the Java Management Extension (JMX) Beans.
Chapters~14--19 present Jargo classes and class-specific methods.
\item Part~IV describes the user-interface components.
Chapter~20 presents the command-line interface.
Chapters~21--22 present the graphical interface.
\item Part~V is the appendix.
\end{itemize}

\section*{What is Jargo?}

Jargo is a Java library that provides real-time ridesharing simulation. It
intends to help researchers evaluate the quality of ridesharing algorithms.
Jargo offers:
\begin{itemize}
\item specifiable real-time customers and vehicles;
\item microscopic vehicle routing;
\item modular algorithms and traffic conditions;
\item various out-of-the-box quality-of-service metrics.
\end{itemize}
Thanks to these features, it can be used to:
\begin{itemize}
\item evaluate the effects of different customer and vehicle configurations,
  such as customer demand surges and extreme spatial distributions;
\item evaluate the effects of algorithm throughput, and observe how
  throughput changes over time;
\item evaluate the effects of traffic;
\item perform multi-objective analysis.
\end{itemize}
Jargo is licensed under the GNU General Public License, Version 3.

\section*{Why Literate Programming?}

What attracted me to literate programming is that code can be structured in any
way and not just in the way imposed by the programming language. For example,
suppose you have a \texttt{Cat} and \texttt{Dog} class, and each have a
\texttt{speak} method:
\begin{verbatim}
class Cat {
  public void speak() {
    System.out.println("Meow!");
  }
}
class Dog {
  public void speak() {
    System.out.println("Woof!");
  }
}
\end{verbatim}
With literate programming, you could organize the \texttt{speak} methods into a
single file:
\begin{verbatim}
<Cat speak>=
public void speak() {
  System.out.println("Meow!");
}
<Dog speak>=
public void speak() {
  System.out.println("Woof!");
}
\end{verbatim}
and then add the methods to the classes by referencing them:
\begin{verbatim}
class Cat {
  <Cat speak>
}
class Dog {
  <Dog speak>
}
\end{verbatim}
Putting the \texttt{speak} methods together lets you reason about them as a
single unit of functionality instead of scattered across various classes.
I found that this way of writing code helped me to develop Jargo in terms of
reading, writing, and other functionality. The result is a codebase that
hopefully is easy to understand, well-reasoned, and correct.

\section*{Reporting Bugs}

Report bugs by logging an issue at the official Jargo GitHub repository:
\url{https://github.com/jargors/Jargo/issues}. By using GitHub, other users can
see the existing issues and possible resolutions. You can also write to me
directly: \url{pan-j16@mails.tsinghua.edu.cn}.

\section*{Contributing}

Jargo is an open-source software and contributions are welcome. The recommended
way to contribute is to fork the repository
(\url{https://github.com/jargors/Jargo}), make your changes in your local fork,
then create a pull request on GitHub. You can also open an Issue on the GitHub
page for any comments or complaints.

If you make your changes directly onto the \texttt{*.java} or \texttt{*.tex}
files, there is a danger of your changes getting overwritten if you
accidentally recompile the noweb files. To avoid the danger, remove the entire
\texttt{src} directory.

\bigskip
\begin{flushright}
James\\
February 20, 2020
\end{flushright}

