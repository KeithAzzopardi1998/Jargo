\chapter*{Preface}
\label{preface}

\addcontentsline{toc}{chapter}{Preface}

This document is the user manual and the annotated source code for Jargo. I
developed Jargo using the
Noweb\footnote{\url{https://www.cs.tufts.edu/~nr/noweb/}} literate
programming\footnote{\url{http://literateprogramming.com/}} tool. The files in
the [[src]] directory are the source files for this document ([[jargo.pdf]])
and the Java code ([[java/]], [[jar/jargors-1.0.0.jar]]). With literate
programming, the documentation and the code are developed at the same time.

This document is organized into four parts.
\begin{itemize}
\item Part~I is the user manual. Chapter~1 introduces the data model, and
Chapters~2--3 give instructions for new users on how to build and run Jargo
programs.
\item Part~II begins the production code. This part begins with a Class
Overview that lists the seven Jargo classes and their methods. Turn to the
page listed next to each method to see the method code and summary. Methods
themselves are organized in this document by functionality. Chapter~4
contains the read methods, Chapter~5 contains the write methods,
Chapter~6 contains administrative utilities, and Chapter~7 contains
methods for interacting with G-tree. Following the methods, Chapters~8--14
contain the imports, member variables, and constructors for each of the classes.
Finally, Chapter~15 contains Beans for the Java Management Extension (JMX).
\item Part~III contains SQL statements for the Jargo data model. Chapter~16
lists the SQL tables, and Chapter~17 lists the SQL views.
\item Part~IV is the appendix and contains Noweb chunks and identifiers used
throughout the document.
\end{itemize}

\section*{What is Jargo?}

Jargo is a Java library that provides real-time ridesharing simulation. My
goal is to help researchers evaluate the quality of ridesharing algorithms.
Jargo offers:
\begin{itemize}
\item customizable real-time customers and vehicles;
\item microscopic vehicle routing;
\item modular algorithms and traffic conditions;
\item various out-of-the-box quality-of-service metrics.
\end{itemize}
Due to these features, it can be used to:
\begin{itemize}
\item evaluate the effects of different customer and vehicle configurations,
  including customer demand surges and spatial distributions;
\item evaluate the effects of algorithm throughput, and observe how
  throughput changes over time;
\item evaluate the effects of traffic;
\item perform multi-objective analysis.
\end{itemize}
Jargo is licensed under the GNU General Public License, Version 3.

\section*{Why Literate Programming?}

All programming languages impose restrictions on how code is structured. For
Java, code must be organized into classes, with each class acting as a
container for a set of related methods. Sometimes, code is better organized in
other ways instead of by the structure imposed by the language. For example,
suppose you have a \texttt{Cat} and \texttt{Dog} class, and each have a
\texttt{speak} method:
\begin{verbatim}
class Cat {
  public void speak() {
    System.out.println("Meow!");
  }
}
class Dog {
  public void speak() {
    System.out.println("Woof!");
  }
}
\end{verbatim}
With literate programming, you could organize the \texttt{speak} methods into a
single file:
\begin{verbatim}
<Cat speak>=
public void speak() {
  System.out.println("Meow!");
}
<Dog speak>=
public void speak() {
  System.out.println("Woof!");
}
\end{verbatim}
and then add the methods to the classes by referencing them:
\begin{verbatim}
class Cat {
  <Cat speak>
}
class Dog {
  <Dog speak}
}
\end{verbatim}
Putting the \texttt{speak} methods together lets you reason about them as a
single unit of functionality instead of scattered across various classes.
I found that this way of writing code helped me to develop Jargo in terms of
reading, writing, and other functionality. The result is a codebase that
hopefully is easy to understand, well-reasoned, and correct.

\section*{Reporting Bugs}

Report bugs by logging an issue at the official Jargo GitHub repository:
\url{https://github.com/jargors/Jargo/issues}. By using GitHub, other users can
see the existing issues and possible resolutions. You can also write to me
directly: \url{pan-j16@mails.tsinghua.edu.cn}.


\bigskip
\begin{flushright}
James\\
January 28, 2020
\end{flushright}

