\section{Class: Controller}
\label{sim-controller}

\etocsettocstyle{}{}
\localtableofcontents

<<Controller.java>>=
<<Package: [[sim]]>>
<<Controller.java preamble>>
public class Controller {
  <<[[Controller]] member variables>>
  <<[[Controller]] constructor>>
  <<[[Controller]] methods>>
}
@

\subsection{Preamble}
We import:
\begin{itemize}
\item all parts of the Jargo stack;
<<Controller.java preamble>>=
import com.github.jargors.sim.Storage;
import com.github.jargors.sim.Communicator;
import com.github.jargors.sim.Client;
import com.github.jargors.sim.Tools;
import com.github.jargors.sim.ClientException;
import com.github.jargors.sim.ClientFatalException;
import com.github.jargors.sim.DuplicateVertexException;
import com.github.jargors.sim.DuplicateEdgeException;
import com.github.jargors.sim.DuplicateUserException;
import com.github.jargors.sim.EdgeNotFoundException;
import com.github.jargors.sim.UserNotFoundException;
import com.github.jargors.sim.VertexNotFoundException;
import com.github.jargors.sim.GtreeNotLoadedException;
import com.github.jargors.sim.GtreeIllegalSourceException;
import com.github.jargors.sim.GtreeIllegalTargetException;
@ \item standard utilities for concurrent execution;
<<Controller.java preamble>>=
import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executors;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.Random;
@ \item standard classes for file operations;
<<Controller.java preamble>>=
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
@ \item standard map classes for caching various items.
<<Controller.java preamble>>=
import java.util.Map;
import java.util.HashMap;
@
<<Controller.java preamble>>=
import java.sql.SQLException;
@
\end{itemize}

\subsection{Member Variables}
Member variables are grouped into \emph{containers}, \emph{settings}, and
\emph{loops}.
<<[[Controller]] member variables>>=
<<Container objects>>
<<Settings objects>>
<<Loop objects>>
@
\hi{Containers.}
<<Container objects>>=
private Random random = new Random();
private Storage storage;
private Communicator communicator;
private Tools tools = new Tools();
private Client client;
private Map<Integer, Boolean> lu_rseen = new HashMap<Integer, Boolean>();
private Map<Integer, Boolean> lu_sseen = new HashMap<Integer, Boolean>();
private String refTimeStr = "";
private long refTimeMs = 0;
private int simClock = 0;
private int simClockReferenceDay = 0;
private int simClockReferenceMinute = 0;
private int simClockReferenceHour = 0;
private int simClockReferenceSecond = 0;
private long dur_query = 0;
@

\hi{Settings.} Settings objects configure various aspects of the simulation.
<<Settings objects>>=
private int MEAN_DELAY =  // in minutes
    Integer.parseInt(System.getProperty("jargors.controller.mean_delay", "5"));
private int STD_DELAY =   // in minutes
    Integer.parseInt(System.getProperty("jargors.controller.std_delay", "2"));
private int CLOCK_START =
    Integer.parseInt(System.getProperty("jargors.controller.clock_start", "0"));
private int CLOCK_END =
    Integer.parseInt(System.getProperty("jargors.controller.clock_end", "1800"));
private int REQUEST_TIMEOUT =
    Integer.parseInt(System.getProperty("jargors.controller.request_timeout", "30"));
private int QUEUE_TIMEOUT =
    Integer.parseInt(System.getProperty("jargors.controller.queue_timeout", "30"));
private int REQUEST_COLLECTION_PERIOD =
    Integer.parseInt(System.getProperty("jargors.controller.request_collection_period", "1"));
private int REQUEST_HANDLING_PERIOD =
    Integer.parseInt(System.getProperty("jargors.controller.request_handling_period", "1"));
private int SERVER_COLLECTION_PERIOD =
    Integer.parseInt(System.getProperty("jargors.controller.server_collection_period", "1"));
@
The [[loop_delay]] configures how many seconds to wait until the controller
loops start. The update periods configure how often particular loops should
execute, in seconds.
<<Settings objects>>=
private int loop_delay = 0;
// private int deviation_rate = 0.02;
// private int breakdown_rate = 0.005;
@
The [[CSHIFT]] setting configures the precision for longitude and latitude
coordiates (see [[Storage.DBInsertVertex]](3)).
<<Settings objects>>=
private final double CSHIFT = Storage.CSHIFT;
private boolean kill = false;
private boolean working = false;
private ScheduledExecutorService exe = null;
private ScheduledFuture<?> cb1 = null;
private ScheduledFuture<?> cb2 = null;
private ScheduledFuture<?> cb3 = null;
private ScheduledFuture<?> cb4 = null;
private ScheduledFuture<?> cb5 = null;
@
The [[DEBUG]] setting controls whether certain messages are print to screen.
Pass [[-Djargors.controller.debug=true]] to the [[java]] command to set
[[DEBUG]] to [[true]].
<<Settings objects>>=
private final boolean DEBUG =
    "true".equals(System.getProperty("jargors.controller.debug"));
@
Added v1.0.1: the [[SNAPSHOT]] setting controls whether or not to export
snapshots of the server relation every minute. Pass
[[-Djargors.controller.snapshot=true]] to set the flag.
<<Settings objects>>=
private final boolean SNAPSHOT =
    "true".equals(System.getProperty("jargors.controller.snapshot"));
@

\hi{Loops.} Jargo's simulation environment comprises four ``loops'', defined
here, running in parallel. They are executed using Java's
[[ScheduledExecutorService]] to control timing.
<<Loop objects>>=
<<Definition of clock loop>>
<<Definition of request collection loop>>
<<Definition of request handling loop>>
<<Definition of server collection loop>>
@

\subsubsection{Clock Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[ClockLoop]]} is a [[Runnable]] that does two things.
First it advances the simulation world time, and then it tells [[communicator]]
about the new time.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} increments [[simClock]] by 1, may modify
[[communicator]] by changing [[Communicator.simClock]], may print to
standard error if [[DEBUG]] is [[true]].\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of clock loop>>=
private Runnable ClockLoop = () -> {
  // TODO: The speed of the updateServer.. methods is about 50ms, meaning we
  // can do ~20 updates per second. If a problem instance has more than 20
  // requests per second and an algo is fast enough to do more than 20 updates
  // per second, the updates will become the bottleneck. It might be unfair
  // to the algo if we advance the clock while waiting for updates to finish.
  // So in this case we only advance the clock after the updates finish.
  // How to implement? We just measure the time it takes to do an update and
  // add that duration onto the clock. We can output a "clock rate" to show
  // the user the current simulation rate, i.e. clock_rate=1x means real-time,
  // clock_rate=0.5x means 1 simulated second takes 2 real seconds, etc.
  this.simClock++;
  this.simClockReferenceSecond++;
  if (this.simClockReferenceSecond > 59) {
    this.simClockReferenceSecond = 0;
    this.simClockReferenceMinute++;
    if (SNAPSHOT) {
      try {
        this.instanceExport(String.format("snapshot%06d", this.simClock));
      } catch (SQLException e) {
        if (e.getErrorCode() == 40000) {
          System.err.println("Warning: database connection interrupted");
        } else {
          System.err.println("Encountered fatal error");
            System.err.println(e.toString());
            System.err.println(e.getErrorCode());
            e.printStackTrace();
        }
      }
    }
    if (this.simClockReferenceMinute > 59) {
      this.simClockReferenceMinute = 0;
      this.simClockReferenceHour++;
      if (this.simClockReferenceHour > 23) {
        this.simClockReferenceHour = 0;
        this.simClockReferenceDay++;
      }
    }
  }
  if (DEBUG) {
    System.out.printf("t=%d (day %d, %02d:%02d:%02d)\n",
        this.simClock,
        this.simClockReferenceDay,
        this.simClockReferenceHour,
        this.simClockReferenceMinute,
        this.simClockReferenceSecond);
  }
};
@

\subsubsection{Request Collection Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[RequestCollectionLoop]]} is a [[Runnable]] that
collects requests eligible for assignment at the current world time.  A request
$r$ is ``eligible'' if it is not assigned at the current world time, and if the
world time is between the request's early time $r_\texttt{e}$ and
$(r_\texttt{e}+\texttt{REQUEST\_TIMEOUT})$ (see
[[Storage.DBQueryRequestsQueued]](1)). If the eligible requests cannot be
collected, we consider this failure to be fatal and exit immediately. A possible
reason may be database failure in [[storage]]. \\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may modify [[client]] by adding objects into
[[Client.queue]], may put new entries or modify existing entries in
[[lu_rseen]], may print to standard error if [[DEBUG]] is [[true]], or exits the JVM if
failure occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of request collection loop>>=
private Runnable RequestCollectionLoop = () -> {
  int  A1 = 0;
  int  A2 = 0;
  final int now = this.simClock;
  try {
    A2 = this.client.dropRequests(now - QUEUE_TIMEOUT);
    if (DEBUG) {
      System.out.printf("drop %d requests\n", A2);
    }
    int[] output = this.storage.DBQueryRequestsQueued(now);
    if (DEBUG) {
      System.out.printf("query %d unassigned requests\n", (output.length/7));
    }
    for (int i = 0; i < (output.length - 6); i += 7) {
      if (!this.lu_rseen.containsKey(output[i]) || this.lu_rseen.get(output[i]) == false) {
        this.client.addRequest(new int[] {
          output[(i + 0)],
          output[(i + 1)],
          output[(i + 2)],
          output[(i + 3)],
          output[(i + 4)],
          output[(i + 5)],
          output[(i + 6)] });
        this.lu_rseen.put(output[i], true);
        A1++;
      }
    }
    if (DEBUG) {
      System.out.printf("add %d new requests\n", A1);
    }
  } catch (SQLException e) {
    if (e.getErrorCode() == 40000) {
      System.err.println("Warning: database connection interrupted");
    } else {
      System.err.println("Encountered fatal error");
      try {
        instanceExport("crash-db");
        System.err.println(e.toString());
        System.err.println(e.getErrorCode());
        e.printStackTrace();
      } catch (Exception ee) {
        // ..
      } finally {
        System.exit(1);
      }
    }
  }
};
@

\subsubsection{Request Handling Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[RequestHandlingLoop]]} is a [[Runnable]] that
notifies the client algorithm to check for and process new requests.\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may indirectly modify the database underlying
[[storage]] depending on the body of [[Client.notifyNew]](0). May print to
standard error if a [[ClientException]] occurs or [[ClientFatalException]]
occurs or [[DEBUG]] is [[true]], or exits the JVM if [[ClientFatalException]]
occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of request handling loop>>=
private Runnable RequestHandlingLoop = () -> {
  try {
    this.client.notifyNew();  // blocks this thread until queue is empty
  } catch (ClientException e) {
    System.err.printf("[t=%d] Controller.RequestHandlingLoop caught a ClientException: %s\n",
        this.simClock, e.toString());
    e.printStackTrace();
  } catch (ClientFatalException e) {
    System.err.printf("[t=%d] Controller.RequestHandlingLoop caught a ClientFatalException: %s\n",
        this.simClock, e.toString());
    e.printStackTrace();
    System.exit(1);
  } catch (Exception e) {
    System.err.printf("[t=%d] Controller.RequestHandlingLoop caught a unspecified Exception: %s\n",
        this.simClock, e.toString());
    e.printStackTrace();
    System.exit(1);
  }
};
@

\subsubsection{Server Loop}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Member \textcolor{blue}{[[ServerLoop]]} is a [[Runnable]] that collects
last-known locations of all active servers at the current word time.  A server
is ``active'' if its service has not ended, in other words it has not arrived
at its own destination.  The ``last-known location'' is the waypoint in the
server's route $w$ with a time component closest to but not exceeding the given
time, in other words ${w_{\leq t}}_{|w_{\leq t}|}$ (see
[[Storage.DBQueryServersLocationsActive]](1)).  If the last-known locations
cannot be collected, we consider this failure to be fatal and exit immediately.
A possible reason may be database failure in [[storage]]. \\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} may indirectly modify the database underlying
[[storage]] depending on the body of [[Client.collectServerLocations]](1).
May print to standard error if [[DEBUG]] is [[true]], or
exits the JVM if failure occurs.\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<Definition of server collection loop>>=
private Runnable ServerLoop = () -> {
  try {
    int[] output = this.storage.DBQueryServersLocationsActive(this.simClock);
    if (DEBUG) {
      System.out.printf("got %d servers\n", (output.length/3));
    }
    for (int i = 0; i < (output.length - 2); i += 3) {
      if (!this.lu_sseen.containsKey(output[i])) {
        this.lu_sseen.put(output[i], true);
      }
    }
    this.client.collectServerLocations(output);
  } catch (SQLException e) {
    if (e.getErrorCode() == 40000) {
      System.err.println("Warning: database connection interrupted");
    } else {
      System.err.println("Encountered fatal error");
      System.err.println(e.toString());
      System.err.println(e.getErrorCode());
      e.printStackTrace();
      System.exit(1);
    }
  } catch (Exception e) {
    System.err.printf("[t=%d] Controller.ServerLoop caught a unspecified Exception: %s\n",
        this.simClock, e.toString());
    e.printStackTrace();
    System.exit(1);
  }
};
@

\subsection{Constructor}
\begin{tabular}{p{\textwidth}}
\toprule
\rowcolor{TableTitle}
Constructor \textcolor{blue}{[[Controller]]}(0) registers a new [[Storage]] to
the [[storage]] member variable. It also registers a new [[Communicator]] to
the [[communicator]] member variable. It then registers itself and the new
[[Storage]] to [[communicator]].\\
\midrule
\textbf{Parameters:} none.\\
\textbf{Returns:} nothing.\\
\textbf{Side Effects:} creates a new [[Storage]] and [[Communicator]] on the
memory heap, modifies [[storage]] and [[communicator]].\\
\textbf{Throws:} nothing.\\
\bottomrule
\end{tabular}
<<[[Controller]] constructor>>=
public Controller() {
  this.storage = new Storage();
  this.communicator = new Communicator();
  this.communicator.setRefStorage(this.storage);
  this.communicator.setRefController(this);
}
@

\subsection{Chunks}

\subsection{Methods}
\subsubsection{Read Methods}
<<[[Controller]] methods>>=
public <<Read: query(2)>>
public <<Read: queryQuick(3)>>
public <<Read: queryEdge(2)>>
public <<Read: queryEdgeStatistics(0)>>
public <<Read: queryEdges(0)>>
public <<Read: queryEdgesCount(0)>>
public <<Read: queryMBR(0)>>
public <<Read: queryMetricRequestDistanceBaseTotal(0)>>
public <<Read: queryMetricRequestDistanceBaseUnassignedTotal(1)>>
public <<Read: queryMetricRequestDistanceBaseUnassignedRunning(0)>>
public <<Read: queryMetricRequestDistanceDetourTotal(1)>>
public <<Read: queryMetricRequestDistanceTransitTotal(1)>>
public <<Read: queryMetricRequestDurationPickupTotal(1)>>
public <<Read: queryMetricRequestDurationTransitTotal(1)>>
public <<Read: queryMetricRequestDurationTravelTotal(1)>>
public <<Read: queryMetricRequestTWViolationsTotal(0)>>
public <<Read: queryMetricServerDistanceBaseTotal(0)>>
public <<Read: queryMetricServerDistanceCruisingTotal(1)>>
public <<Read: queryMetricServerDistanceRunning(0)>>
public <<Read: queryMetricServerDistanceServiceTotal(1)>>
public <<Read: queryMetricServerDistanceTotal(1)>>
public <<Read: queryMetricServerDurationCruisingTotal(1)>>
public <<Read: queryMetricServerDurationServiceTotal(1)>>
public <<Read: queryMetricServerDurationTravelTotal(1)>>
public <<Read: queryMetricServerTWViolationsTotal(0)>>
public <<Read: queryMetricServiceRate(1)>>
public <<Read: queryMetricServiceRateRunning(0)>>
public <<Read: queryMetricUserDistanceBaseTotal(1)>>
public <<Read: queryMetricUserDistanceBaseRunning(0)>>
public <<Read: queryRequestTimeOfArrival(1)>>
public <<Read: queryRequestTimeOfDeparture(1)>>
public <<Read: queryRequestsCount(0)>>
public <<Read: queryRequestsCountActive(1)>>
public <<Read: queryRequestsCountAppeared(0)>>
public <<Read: queryRequestsCountAssigned(0)>>
public <<Read: queryRequestsCountCompleted(1)>>
public <<Read: queryRequestsQueued(1)>>
public <<Read: queryRequestsWaiting(1)>>
public <<Read: queryServerDistance(2)>>
public <<Read: queryServerRoute(1)>>
public <<Read: queryServerRouteActive(1)>>
public <<Read: queryServerRouteRemaining(2)>>
public <<Read: queryServerSchedule(1)>>
public <<Read: queryServerTimeOfDeparture(1)>>
public <<Read: queryServersActive(1)>>
public <<Read: queryServersCount(0)>>
public <<Read: queryServersCountActive(1)>>
public <<Read: queryServersCountAppeared(0)>>
public <<Read: queryServersLocationsActive(1)>>
public <<Read: queryUser(1)>>
public <<Read: queryVertex(1)>>
public <<Read: queryVertices(0)>>
public <<Read: queryVerticesCount(0)>>
@
\subsubsection{Cached Read Methods}
<<[[Controller]] methods>>=
public <<Read: queryMetricRequestDistanceBaseUnassignedTotal(0)>>
public <<Read: queryMetricRequestDistanceDetourTotal(0)>>
public <<Read: queryMetricRequestDistanceTransitTotal(0)>>
public <<Read: queryMetricRequestDurationPickupTotal(0)>>
public <<Read: queryMetricRequestDurationTransitTotal(0)>>
public <<Read: queryMetricRequestDurationTravelTotal(0)>>
public <<Read: queryMetricServerDistanceCruisingTotal(0)>>
public <<Read: queryMetricServerDistanceServiceTotal(0)>>
public <<Read: queryMetricServerDistanceTotal(0)>>
public <<Read: queryMetricServerDurationCruisingTotal(0)>>
public <<Read: queryMetricServerDurationServiceTotal(0)>>
public <<Read: queryMetricServerDurationTravelTotal(0)>>
public <<Read: queryMetricServiceRate(0)>>
public <<Read: queryMetricUserDistanceBaseTotal(0)>>
@
\subsubsection{Write Methods}
<<[[Controller]] methods>>=
public <<Write: insertRequest(1)>>
public <<Write: insertServer(2)>>
@
\subsubsection{Administration}
<<[[Controller]] methods>>=
public <<Admin: cacheRoadNetworkFromDB(0)>>
public <<Admin: cacheUsersFromDB(0)>>
public <<Admin: instanceClose(0)>>
public <<Admin: instanceExport(1)>>
public <<Admin: instanceInitialize(0)>>
public <<Admin: instanceLoad(1)>>
public <<Admin: instanceNew(0)>>
public <<Admin: instanceReset(0)>>
public <<Admin: getClock(0)>>
public <<Admin: getClockStart(0)>>
public <<Admin: getClockReference(0)>>
public <<Admin: getClockReferenceMs(0)>>
public <<Admin: getRefCommunicator(0)>>
public <<Admin: getRefStorage(0)>>
public <<Admin: retrieveQueueSize(0)>>
public <<Admin: retrieveHandleRequestDur(0)>>
public <<Admin: retrieveRefCacheEdges(0)>>
public <<Admin: retrieveRefCacheUsers(0)>>
public <<Admin: retrieveRefCacheVertices(0)>>
public <<Admin: forwardRefCommunicator(1)>>
public <<Admin: forwardRefTraffic(1)>>
public <<Admin: setClockEnd(1)>>
public <<Admin: setClockReference(1)>>
public <<Admin: setClockStart(1)>>
public <<Admin: setQueueTimeout(1)>>
public <<Admin: setRefClient(1)>>
@
\subsubsection{G-tree Methods}
<<[[Controller]] methods>>=
public <<Gtree: gtreeClose(0)>>
public <<Gtree: gtreeLoad(1)>>
@
\subsubsection{Special Methods}
<<[[Controller]] methods>>=
public <<Controller: getClockReferenceDay(0)>>
public <<Controller: getClockReferenceHour(0)>>
public <<Controller: getClockReferenceMinute(0)>>
public <<Controller: getClockReferenceSecond(0)>>
public <<Controller: getQueryDur(0)>>
public <<Controller: loadProblem(1)>>
public <<Controller: loadRoadNetworkFromFile(1)>>
public <<Controller: kill(0)>>
public <<Controller: isKilled(0)>>
public <<Controller: returnRequest(1)>>
public <<Controller: startRealtime(1)>>
public <<Controller: startSequential(1)>>
public <<Controller: step(0)>>
public <<Controller: stop(1)>>
@

\subsubsection{\texttt{getClockReferenceDay}(0)}
<<Controller: getClockReferenceDay(0)>>=
int getClockReferenceDay() {
  return this.simClockReferenceDay;
}
@

\subsubsection{\texttt{getClockReferenceHour}(0)}
<<Controller: getClockReferenceHour(0)>>=
int getClockReferenceHour() {
  return this.simClockReferenceHour;
}
@

\subsubsection{\texttt{getClockReferenceMinute}(0)}
<<Controller: getClockReferenceMinute(0)>>=
int getClockReferenceMinute() {
  return this.simClockReferenceMinute;
}
@

\subsubsection{\texttt{getClockReferenceSecond}(0)}
<<Controller: getClockReferenceSecond(0)>>=
int getClockReferenceSecond() {
  return this.simClockReferenceSecond;
}
@

\subsubsection{\texttt{getQueryDur}(0)}
<<Controller: getQueryDur(0)>>=
long getQueryDur() {
  return this.dur_query;
}
@

\subsubsection{\texttt{kill}(0)}
<<Controller: kill(0)>>=
void kill() {
  this.kill = true;
}
@

\subsubsection{\texttt{loadRoadNetworkFromFile}(1)}
<<Controller: loadRoadNetworkFromFile(1)>>=
void loadRoadNetworkFromFile(final String f_rnet)
throws FileNotFoundException, SQLException {
  try {
    this.storage.DBInsertVertex(0, 0, 0);
  } catch (DuplicateVertexException e) {
    // ...
  }
  Scanner sc = new Scanner(new File(f_rnet));
  while (sc.hasNext()) {
    final int col0 = sc.nextInt();
    final int col1 = sc.nextInt();
    final int col2 = sc.nextInt();
    final int col3 = (int) Math.round(sc.nextDouble()*CSHIFT);
    final int col4 = (int) Math.round(sc.nextDouble()*CSHIFT);
    final int col5 = (int) Math.round(sc.nextDouble()*CSHIFT);
    final int col6 = (int) Math.round(sc.nextDouble()*CSHIFT);
    final int dist = this.tools.computeHaversine(
          col3/CSHIFT, col4/CSHIFT, col5/CSHIFT, col6/CSHIFT);
    try {
      this.storage.DBInsertVertex(col1, col3, col4);
    } catch (DuplicateVertexException e) { /*...*/ }
    try {
      this.storage.DBInsertVertex(col2, col5, col6);
    } catch (DuplicateVertexException e) { /*...*/ }
    try {
      this.storage.DBInsertEdge(col1, col2, dist, 10);  // TODO: 10 speed
    } catch (DuplicateEdgeException e) { /*...*/ }
    try {
      this.storage.DBInsertEdge(col1, 0, 0, 10);
    } catch (DuplicateEdgeException e) { /*...*/ }
    try {
      this.storage.DBInsertEdge(col2, 0, 0, 10);
    } catch (DuplicateEdgeException e) { /*...*/ }
  }
  this.tools.setRefCacheVertices(this.storage.getRefCacheVertices());
  this.tools.setRefCacheEdges(this.storage.getRefCacheEdges());
}
@ %def loadRoadNetworkFromFile

\subsubsection{\texttt{loadProblem(1)}}
<<Controller: loadProblem(1)>>=
void loadProblem(String p)
throws FileNotFoundException, DuplicateUserException, EdgeNotFoundException,
SQLException, GtreeNotLoadedException, GtreeIllegalSourceException,
GtreeIllegalTargetException {
  Scanner sc = new Scanner(new File(p));
  while (sc.hasNext()) {
    final int uid = sc.nextInt();
    final int  uo = sc.nextInt();
    final int  ud = sc.nextInt();
    final int  uq = sc.nextInt();
    final int  ue = sc.nextInt();
    final int  ub = this.tools.computeShortestPathDistance(uo, ud);
    final int  ul = (ud == 0)
        ? Integer.MAX_VALUE
        : ue + (int) Math.round((float) ub/10)  // TODO: 10 speed
          + ( (int) Math.round(Math.abs
              ( this.random.nextGaussian()*this.STD_DELAY + this.MEAN_DELAY ))
                * 60 );
    final int[] user = new int[] { uid, uq, ue, ul, uo, ud, ub };
    if (uq < 0) {
      this.insertServer(user);
    } else {
      this.insertRequest(user);
    }
  }
}
@ %def loadProblem

\subsubsection{\texttt{isKilled}(0)}
<<Controller: isKilled(0)>>=
final boolean isKilled() {
  return this.kill;
}
@ %def isKilled

\subsubsection{\texttt{returnRequest}(1)}
<<Controller: returnRequest(1)>>=
void returnRequest(final int[] r) {
  if (this.simClock - r[2] < QUEUE_TIMEOUT) {
    this.lu_rseen.put(r[0], false);
  }
}
@ %def returnRequest

\subsubsection{\texttt{startRealtime}(1)}
<<Controller: startRealtime(1)>>=
void startRealtime(final Consumer<Boolean> app_cb) {
  this.kill = false;
  this.lu_rseen.clear();
  this.lu_sseen.clear();
  if (DEBUG) {
    System.out.printf("startRealtime(1)\n");
  }

  this.storage.setRequestTimeout(REQUEST_TIMEOUT);
  if (DEBUG) {
    System.out.printf("setRequestTimeout(1), arg1=%d\n", REQUEST_TIMEOUT);
  }

  this.simClock = CLOCK_START;
  if (DEBUG) {
    System.out.printf("simClock=%d\n", CLOCK_START);
  }

  int simulation_duration = (CLOCK_END - CLOCK_START);
  if (DEBUG) {
    System.out.printf("simulation_duration=%d\n", simulation_duration);
  }

  this.exe = Executors.newScheduledThreadPool(5);
  if (DEBUG) {
    System.out.printf("newScheduledThreadPool(1), arg1=5\n");
  }

  this.cb1 = exe.scheduleAtFixedRate(
    this.ClockLoop, 0, 1, TimeUnit.SECONDS);
  if (DEBUG) {
    System.out.printf("exe ClockLoop, delay=0, int=1\n");
  }

  this.cb2 = exe.scheduleAtFixedRate(
    this.RequestCollectionLoop, this.loop_delay, REQUEST_COLLECTION_PERIOD, TimeUnit.SECONDS);
  if (DEBUG) {
    System.out.printf("exe RequestCollectionLoop, delay=%d, int=%d\n",
        this.loop_delay, REQUEST_COLLECTION_PERIOD);
  }

  this.cb3 = exe.scheduleAtFixedRate(
    this.RequestHandlingLoop, this.loop_delay, REQUEST_HANDLING_PERIOD, TimeUnit.MILLISECONDS);
  if (DEBUG) {
    System.out.printf("exe RequestHandlingLoop, delay=%d, int=%d\n",
        this.loop_delay, REQUEST_HANDLING_PERIOD);
  }

  this.cb4 = exe.scheduleAtFixedRate(
    this.ServerLoop, this.loop_delay, SERVER_COLLECTION_PERIOD, TimeUnit.SECONDS);
  if (DEBUG) {
    System.out.printf("exe ServerLoop, delay=%d, int=%d\n",
        this.loop_delay, SERVER_COLLECTION_PERIOD);
  }

  this.exe.schedule(() -> {
    this.stop(app_cb);
  }, simulation_duration, TimeUnit.SECONDS);
  if (DEBUG) {
    System.out.printf("exe stop, delay=%d\n",
        simulation_duration);
  }
}
@ %def startRealtime

\subsubsection{\texttt{startSequential}(1)}
<<Controller: startSequential(1)>>=
void startSequential(final Consumer<Boolean> app_cb) throws Exception {
  this.storage.setRequestTimeout(REQUEST_TIMEOUT);
  this.simClock = CLOCK_START;
  this.kill = false;
  this.lu_rseen.clear();
  this.lu_sseen.clear();
  if (DEBUG) {
    System.out.printf("startSequential(1)\n");
    System.out.printf("clock set to %d..%d\n", simClock, CLOCK_END);
  }
  while (!kill && this.simClock < CLOCK_END) {
    this.working = true;
    this.step();
    this.working = false;
  }
  this.stop(app_cb);
}
@ %def startSequential

\subsubsection{\texttt{step}(0)}
<<Controller: step(0)>>=
void step() {
  this.ClockLoop.run();
  this.ServerLoop.run();
  this.RequestCollectionLoop.run();
  this.RequestHandlingLoop.run();
}
@

\subsubsection{\texttt{stop}(1)}
<<Controller: stop(1)>>=
void stop(final Consumer<Boolean> app_cb) {
  if (DEBUG) {
    System.out.printf("stop(1)\n");
  }
  if (this.exe == null) {  // sequential mode
    this.kill = true;
    while (this.working) {
      try {
        Thread.sleep(100);
      } catch (InterruptedException e) {
        // ...
      }
    }
  } else {  // realtime mode
    this.cb1.cancel(true);
    this.cb2.cancel(true);
    this.cb3.cancel(true);
    this.cb4.cancel(true);
    this.exe.shutdown();
  }
  try {
    if (this.client != null) {
      this.client.end();
    }
    app_cb.accept(true);
  } catch (Exception e) {
    System.err.println("Error in ending callback");
    System.err.println(e.toString());
    e.printStackTrace();
    return;
  }
}
@ %def stop

