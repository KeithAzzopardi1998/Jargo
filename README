    Jargo: Real-Time Stochastic Ridesharing Simulator
        Visit our website for tutorials and screenshots,
            https://jargors.github.io/

Latest Version: 1.0.0 (January 20, 2020) (in-development)
Build Status (master):
    https://github.com/jargors/jargo/workflows/Build/badge.svg

Jargo is a Java library for providing real-time ridesharing simulation
functionality. It aims to help researchers evaluate the quality of ridesharing
algorithms. Jargo supports configurable traffic conditions, flexible vehicle
routing, and 20 out-of-the-box quality metrics. It is the second incarnation of
Cargo (https://github.com/jamjpan/Cargo).

Jargo is written with literate programming. The idea is to write code that can
be compiled into a form understood by humans (English) and a form understood by
machines (Java). Developers write 'literate' code, and then use various
programs to compile the code. Jargo uses noweb. The workflows are:

To produce the jar archive, input
  src/*.nw source files into
    | notangle to produce java/*.java files, used by
    | javac to produce com/*/*.class files, used by
    | jar to produce jar/jargors-1.0.0.jar file;

To produce the pdf document, input
  src/*.nw source files into
    | noweave to produce doc/body.tex, used by
    | pdflatex to produce pdf/jargo.pdf.

The notangle and noweave programs can be obtained from
    https://www.cs.tufts.edu/~nr/noweb/

The pdflatex program can be obtained from most LaTeX distributions
such as TeX Live. The javac program can be obtained from the Java JDK.

Run `make` in this directory to see a list of build commands. For detailed
build instructions, see the file INSTALL.

For more information about literate programming, visit
    http://literateprogramming.com/

