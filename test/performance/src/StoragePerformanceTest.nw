\documentclass{article}

\usepackage{../../noweb}
\noweboptions{smallcode,longchunks}

\usepackage[a4paper,margin=1in]{geometry}

\usepackage{colortbl}
\usepackage[colorlinks=true]{hyperref}
\usepackage{graphicx}

% Remove noweb page break penalty
\def\nwendcode{\endtrivlist \endgroup}
\let\nwdocspar=\par

\title{Jargo Storage Interface
  and Data Model\footnote{\url{https://github.com/jargors/Storage}}\\
  \vspace{.5em}
  \Large{\textbf{Performance Test Program}}}
\author{James J. Pan\\
  \small{\href{mailto:jamesjpan@outlook.com}{jamesjpan@outlook.com}}
}

\begin{document}
\maketitle
\pagestyle{noweb}

%\begin{figure}[h]
%\centering
%\fbox{\includegraphics[width=\textwidth]{data/test.png}}
%\caption{Portion of a road network in Chengdu, China,
%    used for tests (46 nodes, 104 directed edges).}
%\label{fig:road-network}
%\end{figure}
%\newpage

\tableofcontents

\section{Introduction}
\label{sec:introduction}
<<StoragePerformanceTest.java>>=
<<StoragePerformanceTest.java preamble>>
<<[[StoragePerformanceTest]] definition>>
@

<<StoragePerformanceTest.java preamble>>=
import com.github.jargors.Controller;
import com.github.jargors.Storage;
import com.github.jargors.Tools;
import com.github.jargors.exceptions.DuplicateVertexException;
import com.github.jargors.exceptions.DuplicateEdgeException;
import com.github.jargors.exceptions.DuplicateUserException;
import com.github.jargors.exceptions.EdgeNotFoundException;
import com.github.jargors.exceptions.UserNotFoundException;
import com.github.jargors.exceptions.VertexNotFoundException;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
@

<<[[StoragePerformanceTest]] definition>>=
public class StoragePerformanceTest {
  <<[[StoragePerformanceTest]] main routine>>
}
@
<<[[StoragePerformanceTest]] main routine>>=
public static void main(String[] args) {
  Tools.Print("Starting storage performance tests");
  try {
    <<Load performance tests>>
  } catch (SQLException e) {
    Tools.PrintSQLException(e);
  }
  Tools.Print("Complete!");
}
@ %def main

<<Begin timing block>>=
long _t0 = System.currentTimeMillis();
int _count = 0;
float _dur = 0;
@

<<Increment call count>>=
System.out.print("\r          \r"+_count);
_count++;
@

<<End timing block>>=
long _t1 = System.currentTimeMillis();
_dur=((_t1 - _t0)/(float)(_count == 0 ? 1 : _count));
System.out.print("\r");
@

<<Load performance tests>>=
<<Test [[_getConnection]](0)>>
<<Test [[DBAddNewServer]](1)>>
<<Test [[DBQueryQueuedRequests]](1)>>
<<Test [[DBQueryServerLocationsActive]](1)>>
<<Test [[DBQueryServerRemainingSchedule]](2)>>
@

\section{Tests}
\label{sec:tests}

<<Test [[_getConnection]](0)>>=
{
  Storage storage = new Storage();
  storage.DBCreateNewInstance();
  final int n = 10000;  // 10,000
  Connection[] arr = new Connection[n];
  <<Begin timing block>>
  for (int i = 0; i < n; i++) {
    arr[i] = storage._getConnection();
    <<Increment call count>>
  }
  <<End timing block>>
  Tools.Print("_getConnection(0): "+_dur+" ms/call");
  for (Connection c : arr) {
    try {
      c.close();
    } catch (Exception e) { }
  }
  storage.DBCloseInstance();
}
@

<<Test [[DBAddNewServer]](1)>>=
{
  Controller controller = new Controller();
  controller.loadDataModel();
  controller.loadRoadNetwork("data/chengdu.rnet");
  controller.loadGTree("data/chengdu.gtree");
  final int n = 1000;  // 1,000
  <<Begin timing block>>
  for (int i = 0; i < n; i++) {
    int o = (int) Math.round(Math.random()*32934);
    int d = (int) Math.round(Math.random()*32934);
    controller.addNewServer(new int[] { i, -1, 0, 86400000, o, d, 1 });
    <<Increment call count>>
  }
  <<End timing block>>
  Tools.Print("DBAddNewServer(1): "+_dur+" ms/call");
  controller.closeInstance();
}
@

Even though [[Controller]] falls out of scope from the previous test,
the Derby database is still live! No need to load data model, road network
again.
<<Test [[DBQueryQueuedRequests]](1)>>=
{
  Controller controller = new Controller();
  controller.loadDataModel();
  controller.loadRoadNetwork("data/chengdu.rnet");
  controller.loadGTree("data/chengdu.gtree");
  controller.loadProblem("data/chengdu.instance");
  int[] output = new int[] { };
  <<Begin timing block>>
  for (int t = 0; t < 1800; t++) {
    output = controller.queryQueuedRequests(t);
    <<Increment call count>>
  }
  <<End timing block>>
  Tools.Print("DBQueryQueuedRequests(1): "+_dur+" ms/call");
  controller.closeInstance();
}
@

<<Test [[DBQueryServerLocationsActive]](1)>>=
{
  Storage storage = new Storage();
  storage.DBLoadBackup("data/db");
  storage.DBLoadRoadNetworkFromDB();
  storage.DBLoadUsersFromDB();
  // BACKUP DOES NOT HAVE INDEXES
  try {
    Connection conn = storage._getConnection();
    Statement stmt = conn.createStatement();
    stmt.addBatch("CREATE INDEX W_sid_t1 ON W (sid, t1)");
    stmt.addBatch("CREATE INDEX W_sid_t2 ON W (sid, t2)");
    stmt.addBatch("CREATE INDEX W_sid_v2 ON W (sid, v2)");
    stmt.addBatch("CREATE INDEX W_sid_t1_t2 ON W (sid, t1, t2)");
    stmt.executeBatch();
    conn.commit();
    conn.close();
  } catch (Exception e) {
    Tools.Print(e.toString());
  }
  int[] output = new int[] { };
  <<Begin timing block>>
  for (int t = 0; t < 1800; t+=100) {
    output = storage.DBQueryServerLocationsActive(t);
    <<Increment call count>>
  }
  <<End timing block>>
  Tools.Print("DBQueryServerLocationsActive(1): "+_dur+" ms/call");
  storage.DBCloseInstance();
}
@

<<Test [[DBQueryServerRemainingSchedule]](2)>>=
{
  Storage storage = new Storage();
  storage.DBLoadBackup("data/db");
  storage.DBLoadRoadNetworkFromDB();
  storage.DBLoadUsersFromDB();
  // BACKUP DOES NOT HAVE INDEXES
  try {
    Connection conn = storage._getConnection();
    Statement stmt = conn.createStatement();
    stmt.addBatch("CREATE INDEX W_sid_t1 ON W (sid, t1)");
    stmt.addBatch("CREATE INDEX W_sid_t2 ON W (sid, t2)");
    stmt.addBatch("CREATE INDEX W_sid_v2 ON W (sid, v2)");
    stmt.addBatch("CREATE INDEX W_sid_t1_t2 ON W (sid, t1, t2)");
    stmt.executeBatch();
    conn.commit();
    conn.close();
  } catch (Exception e) {
    Tools.Print(e.toString());
  }
  int[] output = new int[] { };
  <<Begin timing block>>
  for (int t = 0; t < 1800; t++) {
    for (int i = 0; i < 100; i++) {
      int sid = (int) (Math.random()*4999.0) + 1;
      output = storage.DBQueryServerRemainingSchedule(sid, t);
    }
    <<Increment call count>>
  }
  <<End timing block>>
  Tools.Print("DBQueryServerRemainingSchedule(2): "+_dur+" ms/call");
  storage.DBCloseInstance();
}
@

\appendix

\section{Appendix: List of Chunks}
\label{ap:list-of-chunks}
\nowebchunks

\section{Appendix: List of Identifiers}
\label{ap:list-of-identifiers}
\nowebindex

\end{document}

