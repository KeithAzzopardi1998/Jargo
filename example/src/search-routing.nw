\chapter{Routing Operations}
\label{search-routing}

\section{Shortest Path}

<<Route: Shortest Path>>=
{
  <<Shortest: Step 1: Initialize>>
  <<Shortest: Step 2: Compute>>
  <<Shortest: Step 3: Join>>
  <<Shortest: Step 4: Fill>>
}
@

<<Shortest: Step 1: Initialize>>=
final int _p = (bnew.length/4);
final int[][] _legs = new int[_p][];

int[] _leg = this.tools.computeRoute(wbeg[1], bnew[1], wbeg[0]);
int _n = _leg.length;
int _t = _leg[(_n - 2)];

_legs[0] = _leg;
@

<<Shortest: Step 2: Compute>>=
for (int _i = 1; _i < _p; _i++) {
  // Extract vertices
  final int _u = bnew[(4*_i - 3)];
  final int _v = bnew[(4*_i + 1)];
  // Compute path and store into _legs
  _leg = this.tools.computeRoute(_u, _v, _t);
  _legs[_i] = _leg;
  // Update _n and _t
  _n += (_leg.length - 2);
  _t = _leg[_leg.length - 2];
}
@

<<Shortest: Step 3: Join>>=
wnew = new int[_n];
int _k = 0;
for (int _i = 0; _i < _legs.length; _i++) {
  final int _rend = (_legs[_i].length - (_i == (_legs.length - 1) ? 0 : 2));
  for (int _j = 0; _j < _rend; _j++) {
    wnew[_k] = _legs[_i][_j];
    _k++;
  }
}
@

<<Shortest: Step 4: Fill>>=
for (int _i = 1; _i < _legs.length; _i++) {
  bnew[(4*_i - 4)] = _legs[_i][0];
}
bnew[(4*_p - 4)] = _t;
@

% \section{Longest Path}
% \section{Average Path}

