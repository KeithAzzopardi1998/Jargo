\part{Debug}
\label{part-debug}

<<Debug: print request>>=
if (DEBUG) {
  System.out.printf("got request={ %d, %d, %d, %d, %d, %d, %d }\n",
      r[0], r[1], r[2], r[3], r[4], r[5], r[6]);
}
@

<<Debug: print candidates>>=
if (DEBUG) {
  System.out.printf("got candidates={ #%d }\n", candidates.size());
}
@

<<Debug: map/filter: last update time>>=
if (DEBUG) {
  System.out.printf("do map/filter: last update time\n");
}
@

<<Debug: map/filter: proximity>>=
if (DEBUG) {
  System.out.printf("do map/filter: proximity\n");
}
@

<<Debug: map/filter: schedule length>>=
if (DEBUG) {
  System.out.printf("do map/filter: schedule length\n");
}
@

<<Debug: print candidate>>=
if (DEBUG) {
  System.out.printf("got cand={ %d, %d }\n", cand.getKey(), cand.getValue());
}
@

<<Debug: print brem>>=
if (DEBUG) {
  System.out.printf("got brem=\n");
  for (int __i = 0; __i < (brem.length - 3); __i += 4) {
    System.out.printf("  { %d, %d, %d, %d }\n",
        brem[__i], brem[__i+1], brem[__i+2], brem[__i+3]);
  }
}
@

<<Debug: print bnew>>=
if (DEBUG) {
  System.out.printf("got bnew=\n");
  for (int __i = 0; __i < (bnew.length - 3); __i += 4) {
    System.out.printf("  { %d, %d, %d, %d }\n",
        bnew[__i], bnew[__i+1], bnew[__i+2], bnew[__i+3]);
  }
}
@

<<Debug: print stop>>=
if (DEBUG) {
  System.out.printf("set stop={ %d, %d, %d, %d }\n",
      stop[0], stop[1], stop[2], stop[3]);
}
@

<<Debug: print ipos>>=
if (DEBUG) {
  System.out.printf("set ipos=%d\n", ipos);
}
@

<<Debug: print tbeg, tend>>=
if (DEBUG) {
  System.out.printf("set tbeg=%d, tend=%d\n", tbeg, tend);
}
@

<<Debug: print wact>>=
if (DEBUG) {
  System.out.printf("got wact=\n");
  for (int __i = 0; __i < (wact.length - 1); __i += 2) {
    System.out.printf("  { %d, %d }\n",
        wact[__i], wact[(__i + 1)]);
  }
}
@

<<Debug: echo limitation 4>>=
if (DEBUG) {
  System.out.printf("detected limitation #4\n");
}
@

<<Debug: echo remove event>>=
if (DEBUG) {
  System.out.printf("remove event\n");
}
@

<<Debug: echo check capacity>>=
if (DEBUG) {
  System.out.printf("check capacity\n");
}
@

<<Debug: echo check time window>>=
if (DEBUG) {
  System.out.printf("check time window\n");
}
@

<<Debug: print ok>>=
if (DEBUG) {
  System.out.printf("set ok=%s\n", (ok ? "true" : "false"));
}
@

<<Debug: print wbeg>>=
if (DEBUG) {
  System.out.printf("set wbeg={ %d, %d }\n", wbeg[0], wbeg[1]);
}
@

<<Debug: print wnew>>=
if (DEBUG) {
  System.out.printf("set wnew=\n");
  for (int __i = 0; __i < (wnew.length - 1); __i += 2) {
    System.out.printf("  { %d, %d }\n",
        wnew[__i], wnew[(__i + 1)]);
  }
}
@

<<Debug: print remove candidate>>=
if (DEBUG) {
  System.out.printf("remove candidate %d\n", sid);
}
@

<<Debug: print imax, jmax, cost>>=
if (DEBUG) {
  System.out.printf("set imax=%d, jmax=%d, cost=%d\n", imax, jmax, cost);
}
@

<<Debug: print i, j>>=
if (DEBUG) {
  System.out.printf("set i=%d, j=%d\n", i, j);
}
@

<<Debug: print cmin>>=
if (DEBUG) {
  System.out.printf("set cmin=%d\n", cmin);
}
@

<<Debug: print queue size>>=
if (DEBUG) {
  System.out.printf("got queue size=%d\n", this.queue.size());
}
@

<<Debug: echo start insertion heuristic>>=
if (DEBUG) {
  System.out.printf("start insertion heuristic\n");
}
@

<<Debug: echo end insertion heuristic>>=
if (DEBUG) {
  System.out.printf("end insertion heuristic\n");
}
@

<<Debug: echo empty candidates>>=
if (DEBUG) {
  System.out.printf("empty candidates\n");
}
@

<<Debug: echo fallback>>=
if (DEBUG) {
  System.out.printf("fallback\n");
}
@

