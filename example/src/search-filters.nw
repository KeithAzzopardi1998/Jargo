\chapter{Maps and Filters}
\label{search-filters}

Each server can be mapped to a quantitative value indicating its ``fitness''
for a given request.  If the fitness is low, the server can be removed
immediately from further consideration. This chapter implements some example
map and filter functions for determining fitness and whether or not to keep a
server.

\section{Schedule Length}

A server with a very long schedule can be difficult to evaluate because there
will be more scheduling possibilities. Filtering these servers out may improve
the speed performance.

<<Map/Filter: Schedule Length>>=
for (final int sid : candidates.keySet()) {
  final int val = this.communicator.queryServerScheduleRemaining(sid,
      this.communicator.retrieveClock()).length / 4;
  if (val <= MAX_SCHEDULE_LENGTH)
    results.put(sid, val);
}
@

\section{Proximity}

Proximity is easy to compute and can be used to approximate actual pick-up
distance. In the filter, we disregard zero proximities due to Limitation \#4.

<<Map/Filter: Proximity>>=
for (final int sid : candidates.keySet()) {
  final int val = this.tools.computeHaversine(luv.get(sid), ro);
  if (0 < val && val <= MAX_PROXIMITY)
    results.put(sid, val);
}
@

\section{Perpendicular}

<<Map/Filter: Perpendicular>>=
int __now = this.communicator.retrieveClock();
for (final int sid : candidates.keySet()) {
  int[] route = { };
  <<Utilities: get route cache>>
  int min_to_o = Integer.MAX_VALUE;
  int min_to_d = Integer.MAX_VALUE;
  for (int __i = 0; __i < route.length - 1; __i += 2*ROUTE_SKIP_EVERY_N) {
    if (route[__i] > __now) {
      int val_to_o = this.tools.computeHaversine(route[(__i + 1)], ro);
      int val_to_d = this.tools.computeHaversine(route[(__i + 1)], rd);
      if (val_to_o < min_to_o) {
          min_to_o = val_to_o;
      }
      if (val_to_d < min_to_d) {
          min_to_d = val_to_d;
      }
    }
  }
  if (min_to_o == Integer.MAX_VALUE || min_to_d == Integer.MAX_VALUE) {
    min_to_o = candidates.get(sid);  // carry over the existing value
    min_to_d = 0;
  }
  results.put(sid, (min_to_o + min_to_d));
}
@


