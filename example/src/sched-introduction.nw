\part{Scheduling}
\label{part-scheduling}

\chapter{Introduction}
\label{sched-introduction}

\renewcommand{\thepage}{\arabic{page}}
\setcounter{page}{1}

Given a vehicle in progress of servicing customers that have been assigned to
it, how should the vehicle move if a new customer is added to its assignments?
One way to solve this problem is to view it as two sub-problems,
\emph{scheduling} and \emph{routing}. Scheduling is the first sub-problem. The
goal of scheduling is to determine the order that the customer pick-up and
drop-off events should be attended. Then in the routing problem, the goal is to
construct a path through the road network for the vehicle to follow so that it
will attend the events in the determined order. In this part of the examples,
we'll see some methods for solving the scheduling sub-problem. Then in the next
part, we'll see some methods for routing.

Before we begin, take note that no one knows which solutions to the scheduling
sub-problem are good for any particular situation (by using Jargo, maybe we can
find out!), thus we won't aim at satisfying an objective. Instead we'll
brainstorm a few methods and go over some that appear in the literature, and
our attention will be on \emph{how to implement these methods in Jargo}. You
will find each method described in its own chapter. At the top of each chapter,
a table will appear showing the required memory objects and side effects of the
method.

We'd be wise to define the problem \emph{in terms of Jargo data structures} so
that low-level implementation can be understood. In Jargo, a \emph{schedule} is
an integer array with a special physical meaning for each of the elements.
(The following inconsistency must be addressed soon!) 

