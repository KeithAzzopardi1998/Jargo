# This file describes how to build the Jargo solvers

# Here I am getting the names of all the *.java files to be tangled.
JAVA1 = \
	java/client/NearestNeighbor.java \
	java/client/NearestPerpendicular.java \
	java/client/GreedyInsertion.java \
	java/client/GreedyInsertionFallback.java \

# Here I am getting the names of all the *.class files to be compiled.
CLASS1=$(addsuffix .class, $(subst java/client/,com/github/jargors/client/,$(basename $(wildcard java/client/*.java))))

.PHONY : _mod all jar compile src clean purge

# Print the menu.
_mod :
	@printf "_______________________________________________________________\n"
	@printf "Jargo Clients\n"
	@printf "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
	@printf "Commands:\n"
	@printf "  make all        build solvers.jar + documentation\n"
	@printf "  make jar        build solvers.jar only\n"
	@printf "  make src        build Java sources from Noweb files\n"
	@printf "  make clean      delete jar/, com/, pdf/, build.log\n"
	@printf "  make purge      clean + delete Java sources, doc/autogenerated.tex\n"
	@printf "===============================================================\n"

################################################################################
# These functions are used to keep terminal output clean during Java compilation.
# They redirect javac output into build.log. If javac returns with an error,
# then they dump build.log to the screen for the user to view. If javac returns
# a warning, in other words build.log is not empty, then they print a warning.
# These functions were modified from:
#     http://www.lunderberg.com/2015/08/25/cpp-makefile-pretty-output/
define run1
$(1) >> pdf/build.log 2>&1; \
RES=$$?; \
if [ $$RES -ne 0 ]; then \
	cat pdf/build.log; \
fi; \
exit $$RES
endef
define run2
$(1) >> build.log 2>&1; \
RES=$$?; \
if [ $$RES -ne 0 ]; then \
	cat build.log; \
elif [ -s build.log ]; then \
	printf "\twarning! check 'build.log' for details...\n"; \
fi; \
exit $$RES
endef
################################################################################
all : jar

# This target produces jar/solvers.jar, along with com/.
jar : _prep src $(CLASS1)
	@printf "make solvers.jar\n"
	@mkdir -p jar
	@printf "compress jar/solvers.jar...\n"
	@jar cvf jar/solvers.jar com >> build.log
	@printf "done solvers.jar\n"

# This target produces all the Java files in java/
src : _precheck $(JAVA1)

# This target describes how to compile the client Java sources in java/ into bytecode.
com/github/jargors/client/%.class : java/client/%.java
	@printf "compile $@...\n";
	@$(call run2, javac -Xlint:deprecation -Xlint:unchecked -d . -cp .:../jar/* $<)
#
# This target describes how to compile the traffic Java sources in java/ into bytecode.
com/github/jargors/traffic/%.class : java/traffic/%.java
	@printf "compile $@...\n";
	@$(call run2, javac -Xlint:deprecation -Xlint:unchecked -d . -cp .:../jar/* $<)

clean :
	@printf "make clean\n"
	@if [ -d "jar" ]; then printf "remove jar/...\n"; rm -rf jar/ ; fi; \
	 if [ -d "com" ]; then printf "remove com/...\n"; rm -rf com/ ; fi; \
	 if [ -s "build.log" ]; then printf "remove build.log...\n"; rm -rf build.log ; fi;
	@printf "done clean\n"

# In addition to 'clean', remove Java files in java/ and doc/autogenerated.tex.
purge : clean
	@printf "make purge\n"
	@printf "purge java...\n"; rm -rf java/;
	@printf "done purge\n"

# Remove any existing com/, build.log, pdf/build.log.
_prep :
	@rm -rf com/ build.log 

_precheck :
	@mkdir -p java/client

