INSTALLATION

To "install" Jargo, build the jar and place it in a directory accessible by
`java`. You can put it with your other Java libraries.

BUILD TOOLS

These programs have been used to build Jargo, tested on Fedora 27:

    GNU make 4.2.1
    GNU bash 4.4.23(1)-release (x86_64-redhat-linux-gnu)
    GNU coreutils 8.27 (cat, echo, printf, mv, rm)
    GNU Wget 1.19.5
    latexmk 4.60
    pdflatex 3.14159265-2.6-1.40.19 (TeX Live 2018)
    javac 11.0.1
    jar 11.0.1
    texfot 1.37
    unzip 6.00
    noweb 2.12 (noweave, notangle) (optional) (https://github.com/nrnrnr/noweb)

BUILD COMMANDS

Running `make` in this directory will show a list of build commands.
- `make dep` will download the dependencies into the dep/ folder.
- `make jar` will build the library.
- `make pdf` will build the documentation.
- `make all` will execute `dep`, `jar`, and `pdf` targets.
- `make clean` will delete the library, documentation, and java objects.
- `make purge` will execute `clean` and also delete the Java and TeX sources.
- `make src` will regenerate the Java and TeX sources from noweb files.

BUILD PREREQUISITES

Jargo uses third-party dependencies during compilation. These dependencies MUST
be in the dep/ folder because this folder is used as the classpath in
makejar.mk. If you don't want to put dependencies into dep/ because you have
them in some other folder on your machine, you could edit makejar.mk to use a
different directory, or you could symlink the dependencies into dep/. If your
dependencies are all in one directory, you could simply symlink the whole
directory, for example
    ln -s /your/directory dep

Here are all the dependencies. PLATFORM-SPECIFIC COMPONENTS marked with *.

  JavaFX SDK - Jargo uses JavaFX for the graphical Desktop program. JavaFX
    includes some platform-specific compiled components. The `make dep` command
    will fetch the Linux SDK. IF YOU ARE ON A DIFFERENT PLATFORM, you will need
    to download JavaFX SDK manually from the JavaFX website:
        https://gluonhq.com/products/javafx/

    Jargo has been tested with version 13.0.1+1, but later versions will
    probably work fine. The components are:

        javafx.base.jar
        javafx.controls.jar
        javafx.fxml.jar
        javafx.graphics.jar
        javafx.media.jar
        javafx.swing.jar
        javafx-swt.jar
        javafx.web.jar
        *libavplugin-54.so
        *libavplugin-56.so
        *libavplugin-57.so
        *libavplugin-ffmpeg-56.so
        *libavplugin-ffmpeg-57.so
        *libavplugin-ffmpeg-58.so
        *libdecora_sse.so
        *libfxplugins.so
        *libglassgtk2.so
        *libglassgtk3.so
        *libglass.so
        *libgstreamer-lite.so
        *libjavafx_font_freetype.so
        *libjavafx_font_pango.so
        *libjavafx_font.so
        *libjavafx_iio.so
        *libjfxmedia.so
        *libjfxwebkit.so
        *libprism_common.so
        *libprism_es2.so
        *libprism_sw.so

    Apache DBCP2 - to provide database connection pooling.
        http://commons.apache.org/proper/commons-dbcp/

        commons-dbcp2-2.7.0.jar

    Apache Logging - used by DBCP2 and Pool2.
        http://commons.apache.org/proper/commons-logging/

        commons-logging-1.2.jar

    Apache Pool2 - used by DBCP2.
        http://apache.mirror.cdnetworks.com/commons/pool/

        commons-pool2-2.7.0.jar

    jamjpan/GTreeJNI - used to provide G-tree functionality for Java. GTreeJNI
      uses a compiled component. The `make dep` command will fetch the Linux
      release. IF YOU ARE ON A DIFFERENT PLATFORM, you will need to compile the
      component manually for your platform. Visit the website for more info:
        https://github.com/jamjpan/GTreeJNI

        gtree-2.0.jar
        *libgtree.so

    VisualVM Charting Components - used to provide charting functionality.
        https://github.com/oracle/visualvm

        com-sun-tools-visualvm-charts-RELEASE139.jar
        com-sun-tools-visualvm-uisupport-RELEASE139.jar
        org-netbeans-lib-profiler-ui-RELEASE139.jar
        org-netbeans-lib-profiler-charts-RELEASE139.jar
        org-netbeans-modules-profiler-api-RELEASE139.jar
        org-openide-util-lookup-RELEASE139.jar

To run a Jargo-based application, you will also need the Apache Derby database
derby.jar in your DERBY_PATH. See launcher.sh for example runtime parameters.
You can also check out the example/ folder for run instructions. For more
information about Apache Derby, visit https://db.apache.org/derby/.

